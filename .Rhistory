res_sig <- res2[get(paste0("q_",group_values[2]))<qvalue_threshold &
get(paste0("q_",group_values[2]))<qvalue_threshold]
qvalue_threshold=0.05
### Significant results in both CTDs
res_sig <- res2[get(paste0("q_",group_values[2]))<qvalue_threshold &
get(paste0("q_",group_values[2]))<qvalue_threshold]
res_sig
plots <- list()
plots[["p.all"]] <- plot_density_cor(res2,
x=paste0("p_",group_values[1]),
y=paste0("p_",group_values[2])
)
source("~/Desktop/Rare Disease Celltyping/MSTExplorer/R/plot_density_cor.R")
plots[["p.all"]] <- plot_density_cor(res2,
x=paste0("p_",group_values[1]),
y=paste0("p_",group_values[2])
)
plots[["p.all"]]
plots[["logFC.all"]] <- plot_density_cor(res2,
x=paste0("logFC_",group_values[1]),
y=paste0("logFC_",group_values[2])
)
plots[["p.significant"]] <- plot_density_cor(res_sig,
x=paste0("p_",group_values[1]),
y=paste0("p_",group_values[2]))
plots[["p.significant"]]
plots[["logFC.significant"]] <- plot_density_cor(res_sig,
x=paste0("logFC_",group_values[1]),
y=paste0("logFC_",group_values[2])
)
plots[["logFC.significant"]]
group_values
data_stats <- lapply(plots, get_ggstatsplot_stats)
data_stats
source("~/Desktop/Rare Disease Celltyping/MSTExplorer/R/validate_associations_correlate_ctd.R")
results <- load_example_results()
out1 <- validate_associations_correlate_ctd(results=results,
group_var="ctd")
source("~/Desktop/Rare Disease Celltyping/MSTExplorer/R/messager.R")
source("~/Desktop/Rare Disease Celltyping/MSTExplorer/R/validate_associations_correlate_ctd.R")
out1 <- validate_associations_correlate_ctd(results=results,
group_var="ctd")
group_var
group_var="ctd"
filters=NULL
results=load_example_results()
celltype_var="cl_name"
qvalue_threshold=0.05
results <- map_celltype(results)
add_logfc(results)
results <- KGExplorer::filter_dt(results,
filters = filters)
group_values <- unique(results[[group_var]])
value.var <- intersect(c("p","q","logFC","estimate"),
names(results))
group_values
res2 <- results |>
data.table::dcast.data.table(
formula = as.formula(paste0("hpo_id+",celltype_var,"~",comparison_var)),
fun.aggregate = mean,
drop = TRUE,
value.var = value.var)
### All results ####
messager(length(unique(res2$cl_name)),"comparable celltypes.")
messager(length(unique(res2$hpo_id)),"comparable phenotypes.")
#### Significant results in both groups ####
res_sig <- res2[get(paste0("q_",group_values[1]))<qvalue_threshold &
get(paste0("q_",group_values[2]))<qvalue_threshold]
source("~/Desktop/Rare Disease Celltyping/MSTExplorer/R/validate_associations_correlate_ctd.R")
out1 <- validate_associations_correlate_ctd(results=results,
group_var="ctd")
n_celltypes.significant <- length(unique(res_sig$cl_name))
n_phenotypes.significant <- length(unique(res_sig$hpo_id))
messager(n_celltypes.significant,"comparable celltypes",
paste0("@FDR<",qvalue_threshold,"."))
messager(n_phenotypes.significant,"comparable phenotypes",
paste0("@FDR<",qvalue_threshold,"."))
source("~/Desktop/Rare Disease Celltyping/MSTExplorer/R/validate_associations_correlate_ctd.R")
out1 <- validate_associations_correlate_ctd(results=results,
group_var="ctd")
results <- load_example_results()[1:5000]
out1 <- validate_associations_correlate_ctd(results=results,
group_var="ctd")
results <- load_example_results()[1:50000]
#### Across CTD ####
out1 <- validate_associations_correlate_ctd(results=results,
group_var="ctd")
results <- load_example_results()[1:500000]
out1 <- validate_associations_correlate_ctd(results=results,
group_var="ctd")
results <- load_example_results()
out1 <- validate_associations_correlate_ctd(results=results,
group_var="ctd")
#### Within CTD: across developmental stages ####
results <- load_example_results()[,.SD[1:5000],by="ctd"]
out1 <- validate_associations_correlate_ctd(results=results,
group_var="ctd")
results <- load_example_results()[,.SD[1:10000],by="ctd"]
#### Across CTD ####
out1 <- validate_associations_correlate_ctd(results=results,
group_var="ctd")
#### Within CTD: across developmental stages ####
filters <- list(ctd=c("HumanCellLandscape"), stage=c("Fetus","Adult"))
out2 <- validate_associations_correlate_ctd(results=results,
filters=filters,
group_var="stage")
out2
devtools::check_man()
devtools::check_man()
library(MSTExplorer)
devtools::check_man()
library(MSTExplorer)
library(MSTExplorer)
kg=get_data("monarch_kg_cells.csv")
library(MSTExplorer)
kg=get_data("monarch_kg_cells.csv")
source("~/Desktop/Rare Disease Celltyping/MSTExplorer/R/get_data.R")
kg=get_data("monarch_kg_cells.csv")
kg
library(MSTExplorer)
library(MSTExplorer)
devtools::check_man()
devtools::check_man()
devtools::check_man()
library(MSTExplorer)
library(MSTExplorer)
library(MSTExplorer)
top_targets <- MSTExplorer::example_targets$top_targets
vn <- prioritise_targets_network(top_targets = top_targets)
top_targets[,estimate:=fold_change]
vn <- prioritise_targets_network(top_targets = top_targets)
top_targets
top_targets <- map_celltype(top_targets)
vn <- prioritise_targets_network(top_targets = top_targets)
vn
top_targets <- MSTExplorer::example_targets$top_targets[1:50]
top_targets[,estimate:=fold_change]
top_targets <- map_celltype(top_targets)
vn <- prioritise_targets_network(top_targets = top_targets)
vn
top_targets <- MSTExplorer::example_targets$top_targets[1:10]
top_targets[,estimate:=fold_change]
top_targets <- map_celltype(top_targets)
vn <- prioritise_targets_network(top_targets = top_targets)
vn
visNetwork::visNetworkEditor(vn)
visNetwork::visNetworkEditor(vn$plot)
devtools::check_man()
devtools::check_man()
devtools::check_man()
devtools::check_man()
library(MSTExplorer)
devtools::check_man()
library(MSTExplorer)
devtools::check_man()
library(MSTExplorer)
prioritise_targets_out <- MSTExplorer::prioritise_targets(
keep_deaths=NULL,
keep_onsets=NULL,
keep_specificity_quantiles = seq(30,40), ## NULL:70, 30-40:64
keep_mean_exp_quantiles = seq(30,40), ## NULL:65, 10:55
info_content_threshold=8, ## 8:55, 5:64
effect_threshold=NULL, ## 1:39
severity_score_gpt_threshold=NULL, ## 10:78, NULL:82
symptom_intersection_threshold=.25, ## .25:57
evidence_score_threshold=3,  ## 5:47, 4:47, 3:64
top_n = 10, ## 5:38, 20:42, 30:45, 40:52, 50:55
group_vars = "hpo_id")
ttdi <- KGExplorer::get_ttd()
#### Remove results that can't be linked to specific genes #####
dat_sub <- ttdi$merged[!is.na(TARGETID) &
!is.na(GENENAME2) &
GENENAME2!="",]
#### Filter by drug type ####
if(!is.null(drug_types)){
dat_sub <- dat_sub[
grepl(paste(drug_types,collapse = "|"),DRUGNAME,ignore.case = TRUE) |
grepl(paste(drug_types,collapse = "|"),DRUGTYPE,ignore.case = TRUE),]
}
devoptera::args2vars()
#### Remove results that can't be linked to specific genes #####
dat_sub <- ttdi$merged[!is.na(TARGETID) &
!is.na(GENENAME2) &
GENENAME2!="",]
#### Filter by drug type ####
if(!is.null(drug_types)){
dat_sub <- dat_sub[
grepl(paste(drug_types,collapse = "|"),DRUGNAME,ignore.case = TRUE) |
grepl(paste(drug_types,collapse = "|"),DRUGTYPE,ignore.case = TRUE),]
}
#### Filter by status ####
if(!is.null(keep_status)){
dat_sub <- dat_sub[HIGHEST_STATUS %in% keep_status,]
}
if(!is.null(remove_status)){
dat_sub <- dat_sub[!HIGHEST_STATUS %in% remove_status,]
}
dat_sub[,failed:=HIGHEST_STATUS %in% failed_status]
#### Filter to only those in top_targets ####
dat_sub2 <- (merge(
dat_sub[failed==FALSE],
top_targets,
allow.cartesian = allow.cartesian,
by.x = "GENENAME3",
by.y = "gene_symbol")[,c("GENENAME2","TARGETID","TARGNAME",
"INDICATI","DRUGID","DRUGNAME",
"HIGHEST_STATUS",
"disease_name","disease_id","hpo_name",
"CellType","ontLvl")] |>
unique())
top_targets <- prioritise_targets_out$top_targets
#### Filter by status ####
if(!is.null(keep_status)){
dat_sub <- dat_sub[HIGHEST_STATUS %in% keep_status,]
}
if(!is.null(remove_status)){
dat_sub <- dat_sub[!HIGHEST_STATUS %in% remove_status,]
}
dat_sub[,failed:=HIGHEST_STATUS %in% failed_status]
#### Filter to only those in top_targets ####
dat_sub2 <- (merge(
dat_sub[failed==FALSE],
top_targets,
allow.cartesian = allow.cartesian,
by.x = "GENENAME3",
by.y = "gene_symbol")[,c("GENENAME2","TARGETID","TARGNAME",
"INDICATI","DRUGID","DRUGNAME",
"HIGHEST_STATUS",
"disease_name","disease_id","hpo_name",
"CellType","ontLvl")] |>
unique())
#### Remove results that can't be linked to specific genes #####
dat_sub <- ttdi$merged[!is.na(TARGETID) &
!is.na(GENENAME2) &
GENENAME2!="",]
#### Filter by drug type ####
if(!is.null(drug_types)){
dat_sub <- dat_sub[
grepl(paste(drug_types,collapse = "|"),DRUGNAME,ignore.case = TRUE) |
grepl(paste(drug_types,collapse = "|"),DRUGTYPE,ignore.case = TRUE),]
}
#### Filter by status ####
if(!is.null(keep_status)){
dat_sub <- dat_sub[HIGHEST_STATUS %in% keep_status,]
}
if(!is.null(remove_status)){
dat_sub <- dat_sub[!HIGHEST_STATUS %in% remove_status,]
}
dat_sub[,failed:=HIGHEST_STATUS %in% failed_status]
#### Filter to only those in top_targets ####
dat_sub2 <- (merge(
dat_sub[failed==FALSE],
top_targets,
allow.cartesian = allow.cartesian,
by.x = "GENENAME3",
by.y = "gene_symbol")[,c("GENENAME2","TARGETID","TARGNAME",
"INDICATI","DRUGID","DRUGNAME",
"HIGHEST_STATUS",
"disease_name","disease_id","hpo_name",
"CellType","ontLvl")] |>
unique())
allow.cartesian
allow.cartesian=T
#### Filter to only those in top_targets ####
dat_sub2 <- (merge(
dat_sub[failed==FALSE],
top_targets,
allow.cartesian = allow.cartesian,
by.x = "GENENAME3",
by.y = "gene_symbol")[,c("GENENAME2","TARGETID","TARGNAME",
"INDICATI","DRUGID","DRUGNAME",
"HIGHEST_STATUS",
"disease_name","disease_id","hpo_name",
"CellType","ontLvl")] |>
unique())
#### Count proportion of drugs that our analyses captured ####
pct_captured <- length(unique(dat_sub2$DRUGID)) /
length(unique(dat_sub$DRUGID))*100
# length(unique(paste0(dat_sub2$DRUGID,dat_sub2$INDICATI,
#                      dat_sub2$GENENAME2)))
dat_sub[,prioritised:=(DRUGID %in% dat_sub2$DRUGID)]
#### Plot ####
plt <- plot_ttd(dat_sub = dat_sub,
failed_status = failed_status)
#### Show ####
if(isTRUE(show_plot)) methods::show(plt)
#### Hypergeometric test ####
stats::pyhypergeo::phypergeo(
#### Hypergeometric test ####
stats::phypergeo(
k = length(unique(dat_sub2$DRUGID)),
K = length(unique(dat_sub$DRUGID)),
n = length(unique(dat_sub$DRUGID)),
N = nrow(dat_sub)
)
#### Hypergeometric test ####
stats::phyper(
k = length(unique(dat_sub2$DRUGID)),
K = length(unique(dat_sub$DRUGID)),
n = length(unique(dat_sub$DRUGID)),
N = nrow(dat_sub)
)
?stats::phyper
dat_sub
#### Hypergeometric test ####
stats::phyper(
q = length(unique(dat_sub2$DRUGID)),
m = length(unique(dat_sub$DRUGID)),
n = length(unique(dat_sub$DRUGID)),
k = nrow(dat_sub)
)
#### Plot ####
plt <- plot_ttd(dat_sub = dat_sub,
failed_status = failed_status)
is(plt)
plt
#### Hypergeometric test ####
fail <- dat_sub[HIGHEST_STATUS %in% failed_status,drop=FALSE]
notfail <- dat_sub[!HIGHEST_STATUS %in% failed_status,drop=FALSE]
nrow(notfail)
phyper(nrow(notfail)-1, nrow(notfail), (nrow(notfail)+nrow(top_targets))-nrow(notfail), nrow(top_targets),lower.tail= FALSE)
notfail
overlap <- nrow(notfail[prioritised==TRUE])
group2 <- nrow(notfail)
total <- nrow(notfail)+nrow(top_targets)
group1 <- nrow(top_targets)
## Test for over-representation (enrichment)
# phyper(Overlap-1, group2, Total-group2, group1,lower.tail= FALSE)
notfail <- dat_sub[!HIGHEST_STATUS %in% failed_status,drop=FALSE]
overlap <- nrow(notfail[prioritised==TRUE])
group2 <- nrow(notfail)
total <- nrow(notfail)+nrow(top_targets)
group1 <- nrow(top_targets)
phyper(overlap-1,
group2,
total-group2,
group1,
lower.tail= FALSE)
overlap
overlap <- nrow(notfail[prioritised==TRUE])
group2 <- nrow(notfail)
total <- nrow(notfail)+nrow(notfail)
group1 <- nrow(top_targets)
total <- nrow(dat_sub)+nrow(top_targets)
group1 <- nrow(top_targets)
phyper(overlap-1,
group2,
total-group2,
group1,
lower.tail= FALSE)
## Test for under-representation (depletion)
phyper(overlap, group2, total-group2, group1, lower.tail= TRUE)
overlap <- nrow(notfail[prioritised==TRUE])
group2 <- nrow(notfail)
total <- nrow(notfail)+nrow(top_targets)
group1 <- nrow(top_targets)
stats::phyper(overlap-1,
group2,
total-group2,
group1,
lower.tail= FALSE)
## Test for under-representation (depletion)
overlap <- nrow(fail[prioritised==TRUE])
group2 <- nrow(fail)
total <- nrow(fail)+nrow(top_targets)
group1 <- nrow(top_targets)
stats::phyper(overlap,
group2,
total-group2,
group1,
lower.tail= TRUE)
total <- nrow(fail)#+nrow(top_targets)
group1 <- nrow(top_targets)
stats::phyper(overlap,
group2,
total-group2,
group1,
lower.tail= TRUE)
group2 <- nrow(fail)
total <- nrow(fail)+nrow(top_targets)
group1 <- nrow(top_targets)
stats::phyper(overlap,
group2,
total-group2,
group1,
lower.tail= TRUE)
p2g <- HPOExplorer::load_phenotype_to_genes()
unique(p2g$gene_symbol)
length(unique(p2g$gene_symbol))
## Test for over-representation (enrichment)
# phyper(Overlap-1, group2, Total-group2, group1,lower.tail= FALSE)
overlap <- nrow(notfail[prioritised==TRUE])
group2 <- nrow(notfail)
total <- length(unique(p2g$gene_symbol))
group1 <- nrow(top_targets)
nonfailed_enrichment <- stats::phyper(overlap-1,
group2,
total-group2,
group1,
lower.tail= FALSE)
nonfailed_enrichment
total
overlap
group2
total
str(notfail)
## Test for over-representation (enrichment)
# phyper(Overlap-1, group2, Total-group2, group1,lower.tail= FALSE)
overlap <- data.table::uniqueN(notfail[prioritised==TRUE]$GENENAME3)
group2 <- data.table::uniqueN(notfail$GENENAME3)
total <- length(unique(p2g$gene_symbol))
overlap
group2
total <- data.table::uniqueN(p2g$gene_symbol)
group1 <- data.table::uniqueN(top_targets$gene_symbol)
nonfailed_enrichment <- stats::phyper(overlap-1,
group2,
total-group2,
group1,
lower.tail= FALSE)
nonfailed_enrichment
group1
total <- data.table::uniqueN(c(p2g$gene_symbol,notfail$GENENAME3))
group1 <- data.table::uniqueN(top_targets$gene_symbol)
nonfailed_enrichment <- stats::phyper(overlap-1,
group2,
total-group2,
group1,
lower.tail= FALSE)
nonfailed_enrichment
c(p2g$gene_symbol,notfail$GENENAME3)
total <- data.table::uniqueN(c(p2g$gene_symbol,notfail$GENENAME3))
group1 <- data.table::uniqueN(top_targets$gene_symbol)
nonfailed_enrichment <- stats::phyper(overlap-1,
group2,
total-group2,
group1,
lower.tail= FALSE)
nonfailed_enrichment
#### Hypergeometric test ####
dat_sub[,failed:=HIGHEST_STATUS %in% failed_status]
fail <- dat_sub[failed==TRUE,drop=FALSE]
notfail <- dat_sub[failed==TRUE,drop=FALSE]
notfail
## Test for under-representation (depletion)
overlap <- data.table::uniqueN(fail[prioritised==TRUE]$GENENAME3)
group2 <- data.table::uniqueN(fail$GENENAME3)
total <- data.table::uniqueN(c(p2g$gene_symbol,fail$GENENAME3))
group1 <- data.table::uniqueN(top_targets$gene_symbol)
failed_depletion <- stats::phyper(overlap,
group2,
total-group2,
group1,
lower.tail= TRUE)
failed_depletion
nonfailed_enrichment
source("~/Desktop/Rare Disease Celltyping/MSTExplorer/R/ttd_hypergeo.R")
devtools::check_man()
library(MSTExplorer)
library(MSTExplorer)
devoptera::args2vars(reassign = T)
hpo_ids <- HPOExplorer::map_phenotypes(terms = phenotypes,
to = "id")
res <- data.table::copy(results)
phenotypes <- c("Generalized neonatal hypotonia",
"Scrotal hypospadias",
"Increased circulating progesterone")
# diseases_include <- "OMIM:176270"
genes_include <- c("MAGEL2","HERC2")
genes_exclude <- c("SNORD115-1")
res
#### Add diseases ####
res <- HPOExplorer::add_disease(phenos = res,
allow.cartesian = TRUE)
res
old_cols <- names(res)
res <- add_driver_genes(res,
phenotype_to_genes=phenotype_to_genes,
metric = "specificity")
#### Filter diseases ####
if(!is.null(diseases_include)){
res <- res[disease_id %in% diseases_include,]
}
if(!is.null(diseases_exclude)){
res <- res[!disease_id %in% diseases_exclude,]
}
#### Add cell types ####
res <- MSTExplorer::map_celltype(results = res)
old_cols <- names(res)
res <- add_driver_genes(res,
phenotype_to_genes=phenotype_to_genes,
metric = "specificity")
ont=KGExplorer::get_ontology("uberon",method = "github")
KGExplorer::filter_ontology(ont=ont, keep_descendants = "UBERON:0002038")
ont=ontologyIndex::get_OBO("https://github.com/obophenotype/uberon/releases/download/v2024-03-22/uberon-base.obo")
ont
ont$children[["UBERON:0002038"]]
ont$children
ont$children["UBERON:0002038"]
ont=ontologyIndex::get_OBO("https://github.com/obophenotype/uberon/releases/download/v2024-03-22/uberon-simple.obo")
ont$children["UBERON:0002038"]
ont=ontologyIndex::get_OBO("https://github.com/obophenotype/uberon/releases/download/v2024-03-22/uberon.obo")
ont=ontologyIndex::get_OBO("https://github.com/obophenotype/uberon/releases/download/v2024-03-22/uberon.obo", propagate_relationships = T)
ont
ont$children["UBERON:0002038"]
ont=ontologyIndex::get_OBO("https://github.com/obophenotype/uberon/releases/download/v2024-03-22/uberon.obo", merge_equivalent_terms = T)
ont=simona::import_ontology("http://purl.obolibrary.org/obo/uberon/releases/2024-03-22/uberon.owl")
ont=simona::import_ontology("http://purl.obolibrary.org/obo/uberon/releases/2024-03-22/uberon.owl")
ont=simona::import_ontology("http://purl.obolibrary.org/obo/uberon/releases/2024-03-22/uberon.owl")
ont@lt_children
which(ont@terms=="UBERON:0002038")
ont@lt_children[which(ont@terms=="UBERON:0002038")]
