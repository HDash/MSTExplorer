if("info_content" %in% names(sort_cols)){
results <- HPOExplorer::add_info_content(phenos = results,
hpo = hpo,
verbose = verbose)
}
#### start ####
rep_dt <- report(dt = results,
step = "start",
verbose = verbose)
#### Filter associations #####
#### q_threshold ####
if(!is.null(q_threshold)){
messager("Filtering @ q-value <=",q_threshold,v=verbose)
results <- results[q<=q_threshold,]
}
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "q_threshold",
verbose = verbose)
q_threshold
#### fold_threshold ####
if(!is.null(fold_threshold)){
messager("Filtering @ fold-change >=",fold_threshold,v=verbose)
results <- results[fold_change>=fold_threshold,]
}
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "fold_threshold",
verbose = verbose)
#### Filter symptoms ####
## Do these steps early bc it will drastically reduce data size
## and thus speed up all subsequent steps.
#### symptom_p_threshold ####
if(!is.null(symptom_p_threshold)){
results <- results[symptom.pval<symptom_p_threshold]
}
symptom_p_threshold
source("~/Desktop/ewce/MultiEWCE/R/load_example_results.R", echo=TRUE)
results = load_example_results()
#### Filter symptoms ####
## Do these steps early bc it will drastically reduce data size
## and thus speed up all subsequent steps.
#### symptom_p_threshold ####
if(!is.null(symptom_p_threshold)){
results <- results[symptom.pval<symptom_p_threshold]
}
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "symptom_p_threshold",
verbose = verbose)
#### symptom_intersection_size_threshold ####
if(!is.null(symptom_intersection_size_threshold)){
results <- results[intersection_size>=symptom_intersection_size_threshold]
}
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "symptom_intersection_size_threshold",
verbose = verbose)
#### Filter diseases ####
#### keep_deaths ####
results <- HPOExplorer::add_death(phenos = results,
keep_deaths = keep_deaths,
agg_by = "DatabaseID",
verbose = verbose)
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "keep_deaths",
verbose = verbose)
#### Filter diseases ####
#### keep_deaths ####
results <- HPOExplorer::add_death(phenos = results,
keep_deaths = keep_deaths,
agg_by = "DatabaseID",
verbose = verbose)
results
#### Filter diseases ####
#### keep_deaths ####
results <- HPOExplorer::add_death(phenos = results,
keep_deaths = keep_deaths,
agg_by = c("HPO_ID","DatabaseID"),
verbose = verbose)
norw(v)
nrow(results)
#### Filter diseases ####
#### keep_deaths ####
results <- HPOExplorer::add_death(phenos = results,
keep_deaths = keep_deaths,
agg_by = "DatabaseID",
allow.cartesian = TRUE,
verbose = verbose)
o <- devoptera::args2vars(prioritise_targets, reassign = TRUE)
t1 <- Sys.time()
messager("Prioritising gene targets.",v=verbose)
#### add_hpo_id  #####
results <- HPOExplorer::add_hpo_id(phenos = results,
phenotype_to_genes = phenotype_to_genes,
hpo = hpo,
verbose = verbose)
if("HPO_term_valid" %in% names(results)){
results <- results[HPO_term_valid==TRUE,]
}
#### add_hpo_definition  #####
results <- HPOExplorer::add_hpo_definition(phenos = results,
verbose = verbose)
#### add_info_content #####
if("info_content" %in% names(sort_cols)){
results <- HPOExplorer::add_info_content(phenos = results,
hpo = hpo,
verbose = verbose)
}
#### start ####
rep_dt <- report(dt = results,
step = "start",
verbose = verbose)
#### Filter associations #####
#### q_threshold ####
if(!is.null(q_threshold)){
messager("Filtering @ q-value <=",q_threshold,v=verbose)
results <- results[q<=q_threshold,]
}
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "q_threshold",
verbose = verbose)
#### fold_threshold ####
if(!is.null(fold_threshold)){
messager("Filtering @ fold-change >=",fold_threshold,v=verbose)
results <- results[fold_change>=fold_threshold,]
}
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "fold_threshold",
verbose = verbose)
#### Filter symptoms ####
## Do these steps early bc it will drastically reduce data size
## and thus speed up all subsequent steps.
#### symptom_p_threshold ####
if(!is.null(symptom_p_threshold)){
results <- results[symptom.pval<symptom_p_threshold]
}
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "symptom_p_threshold",
verbose = verbose)
#### symptom_intersection_size_threshold ####
if(!is.null(symptom_intersection_size_threshold)){
results <- results[intersection_size>=symptom_intersection_size_threshold]
}
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "symptom_intersection_size_threshold",
verbose = verbose)
#### Filter diseases ####
#### keep_deaths ####
results <- HPOExplorer::add_death(phenos = results,
keep_deaths = keep_deaths,
agg_by = "DatabaseID",
allow.cartesian = TRUE,
verbose = verbose)
o <- devoptera::args2vars(prioritise_targets, reassign = TRUE)
t1 <- Sys.time()
messager("Prioritising gene targets.",v=verbose)
#### add_hpo_id  #####
results <- HPOExplorer::add_hpo_id(phenos = results,
phenotype_to_genes = phenotype_to_genes,
hpo = hpo,
verbose = verbose)
if("HPO_term_valid" %in% names(results)){
results <- results[HPO_term_valid==TRUE,]
}
#### add_hpo_definition  #####
results <- HPOExplorer::add_hpo_definition(phenos = results,
verbose = verbose)
#### add_info_content #####
if("info_content" %in% names(sort_cols)){
results <- HPOExplorer::add_info_content(phenos = results,
hpo = hpo,
verbose = verbose)
}
#### start ####
rep_dt <- report(dt = results,
step = "start",
verbose = verbose)
#### Filter associations #####
#### q_threshold ####
if(!is.null(q_threshold)){
messager("Filtering @ q-value <=",q_threshold,v=verbose)
results <- results[q<=q_threshold,]
}
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "q_threshold",
verbose = verbose)
#### fold_threshold ####
if(!is.null(fold_threshold)){
messager("Filtering @ fold-change >=",fold_threshold,v=verbose)
results <- results[fold_change>=fold_threshold,]
}
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "fold_threshold",
verbose = verbose)
#### Filter symptoms ####
## Do these steps early bc it will drastically reduce data size
## and thus speed up all subsequent steps.
#### symptom_p_threshold ####
if(!is.null(symptom_p_threshold)){
results <- results[symptom.pval<symptom_p_threshold]
}
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "symptom_p_threshold",
verbose = verbose)
#### symptom_intersection_size_threshold ####
if(!is.null(symptom_intersection_size_threshold)){
results <- results[intersection_size>=symptom_intersection_size_threshold]
}
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "symptom_intersection_size_threshold",
verbose = verbose)
#### Filter diseases ####
#### keep_deaths ####
results <- HPOExplorer::add_death(phenos = results,
keep_deaths = keep_deaths,
agg_by = "DatabaseID",
allow.cartesian = TRUE,
verbose = verbose)
o <- devoptera::args2vars(prioritise_targets, reassign = TRUE)
t1 <- Sys.time()
messager("Prioritising gene targets.",v=verbose)
#### add_hpo_id  #####
results <- HPOExplorer::add_hpo_id(phenos = results,
phenotype_to_genes = phenotype_to_genes,
hpo = hpo,
verbose = verbose)
if("HPO_term_valid" %in% names(results)){
results <- results[HPO_term_valid==TRUE,]
}
#### add_hpo_definition  #####
results <- HPOExplorer::add_hpo_definition(phenos = results,
verbose = verbose)
#### add_info_content #####
if("info_content" %in% names(sort_cols)){
results <- HPOExplorer::add_info_content(phenos = results,
hpo = hpo,
verbose = verbose)
}
#### start ####
rep_dt <- report(dt = results,
step = "start",
verbose = verbose)
#### Filter associations #####
#### q_threshold ####
if(!is.null(q_threshold)){
messager("Filtering @ q-value <=",q_threshold,v=verbose)
results <- results[q<=q_threshold,]
}
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "q_threshold",
verbose = verbose)
#### fold_threshold ####
if(!is.null(fold_threshold)){
messager("Filtering @ fold-change >=",fold_threshold,v=verbose)
results <- results[fold_change>=fold_threshold,]
}
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "fold_threshold",
verbose = verbose)
#### Filter symptoms ####
## Do these steps early bc it will drastically reduce data size
## and thus speed up all subsequent steps.
#### symptom_p_threshold ####
if(!is.null(symptom_p_threshold)){
results <- results[symptom.pval<symptom_p_threshold]
}
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "symptom_p_threshold",
verbose = verbose)
#### symptom_intersection_size_threshold ####
if(!is.null(symptom_intersection_size_threshold)){
results <- results[intersection_size>=symptom_intersection_size_threshold]
}
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "symptom_intersection_size_threshold",
verbose = verbose)
#### Filter diseases ####
#### keep_deaths ####
results <- HPOExplorer::add_death(phenos = results,
keep_deaths = keep_deaths,
agg_by = "DatabaseID",
allow.cartesian = TRUE,
verbose = verbose)
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "keep_deaths",
verbose = verbose)
#### Filter phenotypes ####
#### remove_descendants ####
results <- HPOExplorer::add_ancestor(phenos = results,
hpo = hpo,
remove_descendants = remove_descendants,
verbose = verbose)
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "remove_descendants",
verbose = verbose)
#### keep_ont_levels ####
results <- HPOExplorer::add_ont_lvl(phenos = results,
absolute = TRUE,
keep_ont_levels = keep_ont_levels,
verbose = verbose)
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "keep_ont_levels",
verbose = verbose)
#### keep_onsets ####
results <- HPOExplorer::add_onset(phenos = results,
keep_onsets = keep_onsets,
agg_by=c("DatabaseID","HPO_ID"),
verbose = verbose)
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "keep_onsets",
verbose = verbose)
#### keep_tiers ####
results <- HPOExplorer::add_tier(phenos = results,
hpo = hpo,
keep_tiers = keep_tiers,
verbose = verbose)
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "keep_tiers",
verbose = verbose)
#### severity_threshold ####
results <- HPOExplorer::add_severity(phenos = results,
severity_threshold = severity_threshold,
verbose = verbose)
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "severity_threshold",
verbose = verbose)
#### pheno_ndiseases_threshold ####
results <- HPOExplorer::add_ndisease(
phenos = results,
pheno_ndiseases_threshold = pheno_ndiseases_threshold,
verbose = verbose)
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "pheno_ndiseases_threshold",
verbose = verbose)
#### pheno_frequency_threshold ####
results <- HPOExplorer::add_pheno_frequency(
phenos = results,
pheno_frequency_threshold = pheno_frequency_threshold,
verbose = verbose)
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "pheno_frequency_threshold",
verbose = verbose)
#### Filter celltypes ####
### Fix celltypes
results[,celltype_fixed:=EWCE::fix_celltype_names(CellType,
make_unique = FALSE)]
if(!is.null(keep_celltypes)){
all_celltypes <- unique(results$CellType)
results <- results[CellType %in% keep_celltypes,]
valid_celltypes <- unique(results$CellType)
messager(formatC(length(valid_celltypes),big.mark = ","),"/",
formatC(length(all_celltypes)),
"of cell types kept.",v=verbose)
}
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "keep_celltypes",
verbose = verbose)
#### Filter genes by size ####
messager("Filtering by gene size.",v=verbose)
results <- HPOExplorer::phenos_to_granges(phenos = results,
phenotype_to_genes = phenotype_to_genes,
hpo = hpo,
keep_seqnames = keep_seqnames,
split.field = NULL,
as_datatable = TRUE,
verbose = verbose)
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "keep_seqnames",
verbose = verbose)
#### gene_size ####
if(!is.null(gene_size)){
ngenes <- length(unique(results$Gene))
results <- results[width>gene_size$min & width<gene_size$max,]
messager(formatC(length(unique(results$Gene)),big.mark = ","),"/",
formatC(ngenes,big.mark = ","),"genes kept.",v=verbose)
}
library(MultiEWCE)
res <- prioritise_targets()
vn <- prioritise_targets_network(top_targets = res$top_res)
vn <- prioritise_targets_network(top_targets = res$top_targets)
res$top_targets$DiseaseName<-res$top_targets$Preferred.Label
vn <- prioritise_targets_network(top_targets = res$top_targets)
library(MultiEWCE)
res <- prioritise_targets()
res$top_targets[symptom.pval<.05]
unique(res$top_targets[symptom.pval<.05]$HPO_ID)
unique(res$top_targets[symptom.pval<.05]$DatabaseID)
unique(res$top_targets[Severity_score<2]$HPO_ID)
unique(res$top_targets[Severity_score<=2]$HPO_ID)
unique(res$top_targets[tier_merge<=2]$HPO_ID)
unique(res$top_targets[tier_merge<2]$HPO_ID)
res <- prioritise_targets(keep_tiers=c(1,2))
vn <- prioritise_targets_network(top_targets = res$top_targets)
keep_onsets
HPOExplorer::list_onsets(
exclude=c("Antenatal",
"Fetal",
"Congenital"),
include_na = TRUE
)
unique(res$top_targets[Onset_earliest<=2]$HPO_ID)
unique(res$top_targets[Onset_earliest %in%  HPOExplorer::list_onsets(
exclude=c("Antenatal",
"Fetal",
"Congenital"),
include_na = F
)]$HPO_ID)
res$top_targets[min(Severity_score)<2,by="HPO_ID"]
res$top_targets[min(Severity_score)<2,,by="HPO_ID"]
res$top_targets[min(Severity_score)<2,by="HPO_ID"]
res$top_targets[,min(Severity_score)<2,by="HPO_ID"]
res$top_targets[,min(Severity_score,na.rm = T)<2,by="HPO_ID"]
res$top_targets[,max(Severity_score,na.rm = T)<2,by="HPO_ID"]
results= res$top_targets
results[,max(Severity_score,na.rm = TRUE)<2,by="HPO_ID"]
results[,max(Severity_score,na.rm = TRUE) %in% seq_len(max(severity_threshold_global,na.rm = TRUE)),by="HPO_ID"]
severity_threshold_global
severity_threshold_global=c(2,NA)
results[,max(Severity_score,na.rm = TRUE) %in% seq_len(max(severity_threshold_global,na.rm = TRUE)),by="HPO_ID"]
keep_hpo_ids <- results[,max(Severity_score,na.rm = TRUE) %in% seq_len(max(severity_threshold_global,na.rm = TRUE)),by="HPO_ID"]
severity_threshold_global
keep_hpo_ids <- results[,max(Severity_score,na.rm = TRUE)<severity_threshold_global,by="HPO_ID"]
severity_threshold_global=2
keep_hpo_ids <- results[,max(Severity_score,na.rm = TRUE)<severity_threshold_global,by="HPO_ID"]
keep_hpo_ids
severity_threshold_global=1
results[,max(Severity_score,na.rm = TRUE)<severity_threshold_global,by="HPO_ID"]
keep_hpo_ids
keep_hpo_ids <- results[,keep:=max(Severity_score,na.rm = TRUE)<severity_threshold_global,
by="HPO_ID"][]
keep_hpo_ids
severity_threshold_max=2
results[,Severity_score_max:=max(Severity_score,na.rm = TRUE),
by="HPO_ID"][Severity_score<=severity_threshold_max]
results[,Severity_score_max:=max(Severity_score,na.rm = TRUE),
by="HPO_ID"][Severity_score_max<=severity_threshold_max]
max(character())
results[,Severity_score_max:=max(na.omit(Severity_score)),
by="HPO_ID"][Severity_score_max<=severity_threshold_max]
gsub(-Inf)
results[,Severity_score_max:=replace(max(Severity_score,na.rm = TRUE),-Inf,NA),
by="HPO_ID"][Severity_score_max<=severity_threshold_max]
results[,Severity_score_max:=gsub(-Inf,NA,max(Severity_score,na.rm = TRUE)),
by="HPO_ID"][Severity_score_max<=severity_threshold_max]
results <- results[,Severity_score_max:=gsub(
-Inf,NA,max(Severity_score,na.rm = TRUE)),
by="HPO_ID"][Severity_score_max<=severity_threshold_max]
results
res$top_targets=results
vn <- prioritise_targets_network(top_targets = res$top_targets)
devtools::document()
library(MultiEWCE)
res <- prioritise_targets(severity_threshold_max=2)
vn <- prioritise_targets_network(top_targets = res$top_targets)
res <- prioritise_targets()
devtools::document()
library(MultiEWCE)
res <- prioritise_targets()
vn <- prioritise_targets_network(top_targets = res$top_targets)
422/2183
monda=ontoProc::getMondoOnto()
monda
dat=readRDS(url("https://atlas.fredhutch.org/data/bbi/descartes/human_gtex/downloads/data_summarize_fetus_data/df_cell.RDS"))
dat
head(dat)
unique(dat$Main_cluster_umap_1)
head(dat)
dge=readRDS(url("https://atlas.fredhutch.org/data/bbi/descartes/human_gtex/downloads/data_summarize_fetus_data/DE_gene_77_main_cell_type.csv"))
dge=data.table::fread("https://atlas.fredhutch.org/data/bbi/descartes/human_gtex/downloads/data_summarize_fetus_data/DE_gene_77_main_cell_type.csv")
dge
ep=readRDS(url("https://atlas.fredhutch.org/data/bbi/descartes/human_gtex/downloads/FCA_RNA_supp_files/cells_by_type/df_cell_epithelial.RDS"))
ep
head(ep)
unique(ep$Epithelial_cell_name)
g =readRDS(url("https://atlas.fredhutch.org/data/bbi/descartes/human_gtex/downloads/cerebellum_classifier.RDS"))
devtools::install_github("cole-trapnell-lab/garnett")
BiocManager::install(c('DelayedArray', 'DelayedMatrixStats', 'org.Hs.eg.db', 'org.Mm.eg.db'))
devtools::install_github("cole-trapnell-lab/garnett")
BiocManager::install(c("monocle"))
devtools::install_github("cole-trapnell-lab/garnett")
g =readRDS(url("https://atlas.fredhutch.org/data/bbi/descartes/human_gtex/downloads/cerebellum_classifier.RDS"))
g
plot(g@classification_tree)
?MAGMA.Celltyping::get_ctd
gwas_sumstats_path <- MAGMA.Celltyping::get_example_gwas(
trait = "fluid_intelligence",
munged = FALSE
)
