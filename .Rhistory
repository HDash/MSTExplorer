#### Simulate diseases ####
for(disease in disease_names){
print(disease)
d1 <- d[LinkID==disease]
# known_genes <- sample(d1$Gene,3)
idx <- which(colnames(X)==disease)
for(i in idx){
n_symptoms <- sample(seq_len(100),1)
n_genes <- sample(seq_len(100),1)
all_symptoms <- unique(d1$HPO_ID)
symptoms <- if(is.null(n_symptoms)){
all_symptoms
} else {
sample(all_symptoms,
size = min(n_symptoms,
length(all_symptoms)),
replace = FALSE)
}
#### Sample symptoms ####
d2 <- d1[HPO_ID %in% symptoms]
#### Sample genes #####
all_genes <- d2$Gene
genes <- if(is.null(n_genes)){
all_genes
} else {
sample(all_genes,
size = min(n_genes,length(all_genes)),
replace = FALSE)
}
gene_counts <- table(genes)
#### Populate values ####
X[names(gene_counts),i][] <- unname(gene_counts);
#### Return metadata ####
meta_l[[i]] <- data.table::data.table(
disease=disease,
i=i,
n_symptoms=n_symptoms,
n_symptoms0=length(symptoms),
n_genes=n_genes,
n_genes0=length(gene_counts)
)
}
}
meta <- data.table::rbindlist(meta_l)
sum(Matrix::rowSums(X)>0)
sum(Matrix::colSums(X)>0)
obj <- scNLP::seurat_pipeline(counts = X, nfeatures = nrow(X))
obj$LinkID <- stringr::str_split(colnames(obj),"\\.",simplify = TRUE)[,1]
obj$DiseaseName <- annot[, head(.SD, 1), by="DatabaseID"][obj$LinkID]$DiseaseName
dplt <- Seurat::DimPlot(obj,
group.by = 'DiseaseName',
cols = pals::tol.rainbow(ncol(obj))|> `names<-`(obj$DiseaseName)) +
Seurat::NoLegend()
plotly::ggplotly(dplt)
source("~/Desktop/ewce/MultiEWCE/R/simulate_patients_run.R", echo=TRUE)
source("~/Desktop/ewce/MultiEWCE/R/simulate_patients_run.R", echo=TRUE)
source("~/Desktop/ewce/MultiEWCE/R/simulate_patients_run.R", echo=TRUE)
X_meta <- simulate_patients_run(d = d,
disease_names = unique(d$LinkID)[1:100],
gene_names = sort(unique(d$Gene)),
n_patients = 10,
n_symptoms_range = seq_len(100),
n_genes_range = seq_len(100),
replace_genes = FALSE){
X_meta <- simulate_patients_run(d = d,
disease_names = unique(d$LinkID)[1:100],
gene_names = sort(unique(d$Gene)),
n_patients = 10,
n_symptoms_range = seq_len(100),
n_genes_range = seq_len(100),
replace_genes = FALSE)
X <- X_meta$X; meta <- X_meta$meta
sum(Matrix::rowSums(X)>0)
sum(Matrix::colSums(X)>0)
obj <- scNLP::seurat_pipeline(counts = X, nfeatures = nrow(X))
obj$LinkID <- stringr::str_split(colnames(obj),"\\.",simplify = TRUE)[,1]
obj$DiseaseName <- annot[, head(.SD, 1), by="DatabaseID"][obj$LinkID]$DiseaseName
dplt <- Seurat::DimPlot(obj,
group.by = 'DiseaseName',
cols = pals::tol.rainbow(ncol(obj))|> `names<-`(obj$DiseaseName)) +
Seurat::NoLegend()
plotly::ggplotly(dplt)
source("~/Desktop/ewce/MultiEWCE/R/simulate_patients_run.R", echo=TRUE)
obj
seq.int(1,ncol(X),by = 5)
seq.int(1,ncol(X),by = 10)
seq.int(1,ncol(X),by = 9)
seq.int(0,ncol(X),by = 10)
seq.int(0,ncol(X),by = 10)
rep(FALSE,5)
ncol(X)/2
sample(seq_len(ncol(X)),ncol(X)/2)
i1 <- sample(seq_len(ncol(X)),ncol(X)/2)
i <- seq_len(ncol(X))
i1 <- sample(i,ncol(X)/2)
i2 <- i[!i%in%i1]
i2
i1
obj1 <- scNLP::seurat_pipeline(counts = X[,i1], nfeatures = nrow(X))
obj2 <- scNLP::seurat_pipeline(counts = X[,i2], nfeatures = nrow(X))
anchors <- Seurat::FindIntegrationAnchors(object.list = list(obj1=obj1,obj2=obj2))
anchors
?Seurat::TransferData(anchorset = anchors)
anchors <- Seurat::FindTransferAnchors(reference = obj1,
query = obj2)
predictions ,<- Seurat::TransferData(anchorset = anchors,
predictions <- Seurat::TransferData(anchorset = anchors,
refdata = obj1)
obj1$LinkID <- stringr::str_split(colnames(obj1),"\\.",simplify = TRUE)[,1]
obj1$DiseaseName <- annot[, head(.SD, 1), by="DatabaseID"][obj1$LinkID]$DiseaseName
obj2 <- scNLP::seurat_pipeline(counts = X[,i2], nfeatures = nrow(X))
obj$LinkID <- stringr::str_split(colnames(obj),"\\.",simplify = TRUE)[,1]
obj2$LinkID <- stringr::str_split(colnames(obj2),"\\.",simplify = TRUE)[,1]
obj2$DiseaseName <- annot[, head(.SD, 1), by="DatabaseID"][obj2$LinkID]$DiseaseName
anchors <- Seurat::FindTransferAnchors(reference = obj1,
query = obj2)
predictions <- Seurat::TransferData(anchorset = anchors,
refdata = obj1$LinkID)
pbmc.query <- Seurat::AddMetaData(object = obj2,
metadata = predictions)
pbmc.query
pbmc.query$prediction.score.max
obj2 <- Seurat::AddMetaData(object = obj2,
metadata = predictions)
obj2
obj2$LinkID==obj2$prediction.score.max
obj2$prediction.score.max
obj2
head(obj2@meta.data)
obj2$LinkID==obj2$predicted.id
obj2$LinkID==obj2$predicted.id/ncol(obj2)
sum(obj2$LinkID==obj2$predicted.id)/ncol(obj2)
unique(obj2$LinkID)
1/length(unique(obj2$LinkID))
accuracy <- sum(obj2$LinkID==obj2$predicted.id)/ncol(obj2)
?pROC::auc()
accuracy <- sum(obj2$LinkID==obj2$predicted.id)/ncol(obj2)
?Seurat::FindIntegrationAnchors()
source("~/Desktop/ewce/MultiEWCE/R/simulate_patients_run.R", echo=TRUE)
batch1=X_meta
batch1$seurat=obj1
source("~/Desktop/ewce/MultiEWCE/R/simulate_patients_run.R", echo=TRUE)
batch2 <- simulate_patients_run(d = d,
disease_names = unique(d$LinkID)[1:100],
gene_names = sort(unique(d$Gene)),
n_patients = 10,
n_symptoms_range = seq_len(100),
n_genes_range = seq_len(100),
replace_genes = FALSE,
annot = annot)
anchors <- Seurat::FindTransferAnchors(reference = batch1$seurat,
query = batch2$seurat)
predictions <- Seurat::TransferData(anchorset = anchors,
refdata = batch1$LinkID)
predictions <- Seurat::TransferData(anchorset = anchors,
refdata = batch1$seurat$LinkID)
obj2 <- Seurat::AddMetaData(object = batch1$seurat,
metadata = predictions)
accuracy <- sum(obj2$LinkID==obj2$predicted.id)/ncol(obj2)
accuracy
batch2 <- simulate_patients_run(d = d,
disease_names = unique(d$LinkID)[50:150],
gene_names = sort(unique(d$Gene)),
n_patients = 10,
n_symptoms_range = seq_len(100),
n_genes_range = seq_len(100),
replace_genes = FALSE,
annot = annot)
anchors <- Seurat::FindTransferAnchors(reference = batch1$seurat,
query = batch2$seurat)
predictions <- Seurat::TransferData(anchorset = anchors,
refdata = batch1$seurat$LinkID)
obj2 <- Seurat::AddMetaData(object = batch1$seurat,
metadata = predictions)
accuracy <- sum(obj2$LinkID==obj2$predicted.id)/ncol(obj2)
accuracy
obj2$LinkID
obj2$predicted.id
obj2$LinkID==obj2$predicted.id
toString(obj2$predicted.id)
accuracy <- sum(obj2$LinkID==replace(NA,0,obj2$predicted.id))/ncol(obj2)
accuracy
replace(NA,0,obj2$predicted.id)
gsub(NA,0,obj2$predicted.id)
batch2 <- simulate_patients_run(d = d,
disease_names = unique(d$LinkID)[1:50],
gene_names = sort(unique(d$Gene)),
n_patients = 10,
n_symptoms_range = seq_len(100),
n_genes_range = seq_len(100),
replace_genes = FALSE,
annot = annot)
anchors <- Seurat::FindTransferAnchors(reference = batch1$seurat,
query = batch2$seurat)
predictions <- Seurat::TransferData(anchorset = anchors,
refdata = batch1$seurat$LinkID)
obj2 <- Seurat::AddMetaData(object = batch1$seurat,
metadata = predictions)
accuracy <- sum(obj2$LinkID==obj2$predicted.id)/ncol(obj2)
accuracy
predictions
obj2
?FindTransferAnchors
anchors <- Seurat::FindTransferAnchors(reference = batch1$seurat,
query = batch2$seurat, reduction = "rpca")
predictions <- Seurat::TransferData(anchorset = anchors,
refdata = batch1$seurat$LinkID)
obj2 <- Seurat::AddMetaData(object = batch1$seurat,
metadata = predictions)
accuracy <- sum(obj2$LinkID==obj2$predicted.id)/ncol(obj2)
accuracy
obj2$LinkID
obj2$LinkID
obj2$predicted.id
obj2 <- Seurat::AddMetaData(object = batch2$seurat,
metadata = predictions)
accuracy <- sum(obj2$LinkID==obj2$predicted.id)/ncol(obj2)
accuracy
anchors <- Seurat::FindTransferAnchors(reference = batch1$seurat,
query = batch2$seurat)
predictions <- Seurat::TransferData(anchorset = anchors,
refdata = batch1$seurat$LinkID)
obj2 <- Seurat::AddMetaData(object = batch2$seurat,
metadata = predictions)
accuracy <- sum(obj2$LinkID==obj2$predicted.id)/ncol(obj2)
accuracy
batch1 <- simulate_patients_run(d = d,
disease_names = unique(d$LinkID)[1:500],
gene_names = sort(unique(d$Gene)),
n_patients = 10,
n_symptoms_range = seq_len(100),
n_genes_range = seq_len(100),
replace_genes = FALSE,
annot = annot)
?Seurat::Project()
?Seurat::ProjectDim()
anchors <- Seurat::FindTransferAnchors(reference = batch1$seurat,
query = batch2$seurat[,1])
anchors <- Seurat::FindTransferAnchors(reference = batch1$seurat,
query = batch2$seurat[,5])
?FindTransferAnchors
?Seurat::ProjectUMAP()
Seurat::ProjectUMAP(query = batch2$seurat[,1],
reference = batch1$seurat)
dplt <- Seurat::DimPlot(obj,
group.by = 'DiseaseName',
cols = pals::tol.rainbow(ncol(obj))|> `names<-`(obj$DiseaseName)) +
Seurat::NoLegend()
remotes::install_github('satijalab/seurat-wrappers')
SeuratWrappers::RunFastMNN(object.list = list(obj1, obj2))
new_cell_pca <- t(as.matrix(obj2@assays$RNA@data[,1])) %*% batch1$seurat[["pca"]][, 1:50]  # project the new sample onto the PCA subspace
t(as.matrix(obj2@assays$RNA@data[,1]))
batch1$seurat[["pca"]][, 1:50]
t(as.matrix(obj2@assays$RNA@data[,1]))
new_cell_pca <- t(as.matrix(obj2@assays$RNA@data[,1])) %*% batch2$seurat[["pca"]][, 1:50]  # project the new sample onto the PCA subspace
dim(t(as.matrix(obj2@assays$RNA@data[,1])))
dim( batch1$seurat[["pca"]][, 1:50] )
new_cell_pca <- t(as.matrix(obj2@assays$RNA@data[,1:2])) %*% batch1$seurat[["pca"]][, 1:50]  # project the new sample onto the PCA subspace
batch2$seurat[["pca"]][, 1:50]  # project the new sample onto the PCA subspace
dim( batch2$seurat[["pca"]][, 1:50]  )
genes <-  batch2$seurat[["pca"]][, 1:50]
genes <-  rownames(batch2$seurat[["pca"]][, 1:50]  )
new_cell_pca <- t(as.matrix(obj2@assays$RNA@data[genes,1])) %*% batch2$seurat[["pca"]][, 1:50]  # project the new sample onto the PCA subspace
new_cell_pca
obj1[["umap"]]
obj1[["umap"]][,1:2]
obj1[["umap"]]@feature.loadings.projected
obj1[["umap"]]@feature.loadings
batch2$seurat[["umap"]]
batch2$seurat[["umap"]][,1:2]
batch2$seurat[["umap"]]@feature.loadings
scNLP::seurat_pipeline
install.packages("umap")
library(umap)
# Generate some sample data
set.seed(123)
n <- 100
p <- 1000
x <- matrix(rnorm(n * p), ncol = p)
x[sample(n * p, 0.9 * n * p)] <- 0  # create a sparse matrix
# Compute UMAP embeddings on the data
umap_result <- umap(x)
new_x <- x[1, ]  # select the first row as the new sample
new_x_umap <- as.matrix(new_x) %*% umap_result$layout[, 1:2]
umap_result$layout
umap_result$data
umap_result$knn
new_x
as.matrix(new_x) %*% umap_result$layout[, 1:2]
dim(as.matrix(new_x))
dim(umap_result$layout[, 1:2] )
uwot::umap(obj1@assays$RNA@counts)
mod <_ uwot::umap(as.matrix(obj1@assays$RNA@counts))
mod <- uwot::umap(as.matrix(obj1@assays$RNA@counts))
mod
uwot::umap_transform(X = obj2@assays$RNA@counts[,1],model = mod)
obj2@assays$RNA@counts[,1]
uwot::umap_transform(X = obj2@assays$RNA@counts[,1:@],
uwot::umap_transform(X = obj2@assays$RNA@counts[,1:2],
model = mod)
?uwot::umap_transform
mod <- uwot::umap(as.matrix(batch1$seurat@assays$RNA@counts), ret_model = TRUE)
uwot::umap_transform(X = obj2@assays$RNA@counts[,1:2],
model = mod)
uwot::umap_transform(X = as.matrix(obj2@assays$RNA@counts[,1:2]),
model = mod)
dim(batch1$seurat@assays$RNA@counts)
uwot::umap_transform(X = as.matrix(obj2@assays$RNA@counts),
model = mod)
uwot::umap_transform(X = as.matrix(batch2$seurat@assays$RNA@counts),
model = mod)
dim(batch2$seurat@assays$RNA@counts)
batch2$seurat@assays$RNA@counts
dim(batch2$seurat@assays$RNA@counts)
rep(batch2$seurat@assays$RNA@counts,10)
do.call(cbind,rep(batch2$seurat@assays$RNA@counts,10))
rep(batch2$seurat@assays$RNA@counts,10)
new_dat <- lapply(1:10,batch2$seurat@assays$RNA@counts)
new_dat <- lapply(1:10,{batch2$seurat@assays$RNA@counts})
new_dat <- lapply(1:10,function(x){batch2$seurat@assays$RNA@counts})
new_dat <- lapply(1:10,function(x){batch2$seurat@assays$RNA@counts})
do.call(new_dat,cbind)
do.call(cbind,new_datd)
do.call(cbind,new_data)
do.call(cbind,new_dat)
new_dat <- do.call(cbind,
lapply(1:10,function(x){batch2$seurat@assays$RNA@counts})
)
dim(new_dat)
uwot::umap_transform(X = new_dat,
model = mod)
uwot::umap_transform(X = as.matrix(new_dat),
model = mod)
new_dat_projected <- uwot::umap_transform(X = as.matrix(new_dat),
model = mod)
new_dat
new_dat_projected
mod <- uwot::umap(t(as.matrix(batch1$seurat@assays$RNA@counts)),
ret_model = TRUE)
new_dat <- do.call(cbind,
lapply(1:10,function(x){batch2$seurat@assays$RNA@counts})
)
new_dat
new_dat_projected <- uwot::umap_transform(X = as.matrix(new_dat),
model = mod)
new_dat_projected <- uwot::umap_transform(X = t(batch2$seurat@assays$RNA@counts[,1]),
model = mod)
new_dat_projected
?Seurat::RunUMAP()
# hp <- phenomix::get_HPO()
d <- HPOExplorer::load_phenotype_to_genes()
annot <- HPOExplorer::load_phenotype_to_genes(3)
data.table::setkeyv(annot,"DatabaseID")
genes_per_disease <- d[,list(n=length(unique(Gene))),by="LinkID"]
phenos_per_disease <- d[,list(n=length(unique(HPO_ID))),by="LinkID"]
quantile(genes_per_disease$n,probs = seq(0,1,.01))
quantile(phenos_per_disease$n,probs = seq(0,1,.01))
batch1 <- simulate_patients_run(d = d,
disease_names = unique(d$LinkID)[1:500],
gene_names = sort(unique(d$Gene)),
n_patients = 10,
n_symptoms_range = seq_len(100),
n_genes_range = seq_len(100),
replace_genes = FALSE,
annot = annot)
source("~/Desktop/ewce/MultiEWCE/R/simulate_patients_run.R", echo=TRUE)
batch1 <- simulate_patients_run(d = d,
disease_names = unique(d$LinkID)[1:500],
gene_names = sort(unique(d$Gene)),
n_patients = 10,
n_symptoms_range = seq_len(100),
n_genes_range = seq_len(100),
replace_genes = FALSE,
annot = annot)
batch2 <- simulate_patients_run(d = d,
disease_names = unique(d$LinkID)[1:100],
gene_names = sort(unique(d$Gene)),
n_patients = 10,
n_symptoms_range = seq_len(100),
n_genes_range = seq_len(100),
replace_genes = FALSE,
annot = annot)
anchors <- Seurat::FindTransferAnchors(reference = batch1$seurat,
query = batch2$seurat)
predictions <- Seurat::TransferData(anchorset = anchors,
refdata = batch1$seurat$LinkID)
batch1$seurat$LinkID
anchors
predictions <- Seurat::TransferData(anchorset = anchors,
refdata = batch1$seurat$LinkID)
batch1$seurat$LinkID
predictions <- Seurat::TransferData(anchorset = anchors,
refdata = unname(batch1$seurat$LinkID))
predictions <- Seurat::TransferData(anchorset = anchors,
refdata = unlist(batch1$seurat$LinkID))
predictions <- Seurat::TransferData(anchorset = anchors,
reference = batch1$seurat, refdata = "LinkID")
#### Project new samples into precompute UMAP space ####
mod <- uwot::umap(t(as.matrix(batch1$seurat@assays$RNA@counts)),
ret_model = TRUE)
batch2$seurat[["umap"]]
batch2$seurat[["umap"]][1]
batch2$seurat[["umap"]][]
batch2$seurat[["umap"]][,1:2]
new_dat_projected <- uwot::umap_transform(X = t(batch2$seurat@assays$RNA@counts[,1]),
model = mod)
new_dat_projected
batch1 <- simulate_patients_run(d = d,
disease_names = unique(d$LinkID)[1:100],
gene_names = sort(unique(d$Gene)),
n_patients = 10,
n_symptoms_range = seq_len(100),
n_genes_range = seq_len(100),
replace_genes = FALSE,
annot = annot)
anchors <- Seurat::FindTransferAnchors(reference = batch1$seurat,
query = batch2$seurat)
predictions <- Seurat::TransferData(anchorset = anchors,
reference = batch1$seurat,
refdata = "LinkID")
batch1$seurat$LinkID
dim(batch1$seurat)
dim(batch2$seurat)
batch1$seurat
batch1$seurat@reductions$umap@misc$model
new_dat_projected <- uwot::umap_transform(X = t(batch2$seurat@assays$RNA@counts[,1]),
model = batch1$seurat@reductions$umap@misc$model)
mode
mod
names(mod)
names(batch1$seurat@reductions$umap@misc$model)
mod$nn_index
new_dat_projected <- uwot::umap_transform(X = t(batch2$seurat@assays$RNA@counts[,1]),
model = mod, nn_method = "dist")
? uwot::umap_transform
names(batch1$seurat@reductions$umap@misc$model)
#### Project new samples into precompute UMAP space ####
# mod <- uwot::umap(t(as.matrix(batch1$seurat@assays$RNA@counts)),
#                   ret_model = TRUE)
mod2 <- batch1$seurat@reductions$umap@misc$model
new_dat_projected <- uwot::umap_transform(X = t(batch2$seurat@assays$RNA@counts[,1]),
model = mod2)
mod2 <- mod$nn_index
#### Project new samples into precompute UMAP space ####
# mod <- uwot::umap(t(as.matrix(batch1$seurat@assays$RNA@counts)),
#                   ret_model = TRUE)
mod2 <- batch1$seurat@reductions$umap@misc$model
mod2$nn_index <- mod$nn_index
new_dat_projected <- uwot::umap_transform(X = t(batch2$seurat@assays$RNA@counts[,1]),
model = mod2)
dim( t(batch2$seurat@assays$RNA@counts[,1]))
new_dat_projected <- uwot::umap_transform(X = batch2$seurat@assays$RNA@counts[,1],
model = mod2)
new_dat_projected <- uwot::umap_transform(X = as.matrix(batch2$seurat@assays$RNA@counts[,1]),
model = mod2)
new_dat_projected <- uwot::umap_transform(X = t(as.matrix(batch2$seurat@assays$RNA@counts[,1])),
model = mod2)
accuracy
install.packages("‘hpoPlot’")
install.packages("hpoPlot")
?hpoPlot
?hpoPlot::get.hpo.graph()
data(hpo.terms)
phenotype.strings <- c(
A="HP:0001382,HP:0004272,HP:0007917,HP:0004912,HP:0001596",
B="HP:0001382,HP:0004272,HP:0002165,HP:0004800,HP:0004912",
C="HP:0004800,HP:0001382,HP:0004912,HP:0007917,HP:0008743",
D="HP:0001257,HP:0001382,HP:0007917,HP:0012623,HP:0002165",
E="HP:0007917,HP:0004800,HP:0004272,HP:0001596,HP:0002165"
)
hpo.phenotypes <- term.set.list.from.character(phenotype.strings)
library(hpoPlot)
data(hpo.terms)
phenotype.strings <- c(
A="HP:0001382,HP:0004272,HP:0007917,HP:0004912,HP:0001596",
B="HP:0001382,HP:0004272,HP:0002165,HP:0004800,HP:0004912",
C="HP:0004800,HP:0001382,HP:0004912,HP:0007917,HP:0008743",
D="HP:0001257,HP:0001382,HP:0007917,HP:0012623,HP:0002165",
E="HP:0007917,HP:0004800,HP:0004272,HP:0001596,HP:0002165"
)
hpo.phenotypes <- term.set.list.from.character(phenotype.strings)
hpo.phenotypes
get.hpo.graph(
hpo.terms=hpo.terms,
plotting.context=list(hpo.phenotypes=hpo.phenotypes)
)
g=get.hpo.graph(
hpo.terms=hpo.terms,
plotting.context=list(hpo.phenotypes=hpo.phenotypes)
)
plot(g)
hpoPlot::hpo.plot(hpo.terms)
?hpoPlot::hpo.plot(hpo.terms)
data(hpo.terms)
hpo.plot(
hpo.terms=hpo.terms,
terms=get.ancestors(hpo.terms,
c("HP:0001382","HP:0004272","HP:0007917","HP:0004912","HP:0001596"))
)
data(hpo.terms)
p=hpo.plot(
hpo.terms=hpo.terms,
terms=get.ancestors(hpo.terms,
c("HP:0001382","HP:0004272","HP:0007917","HP:0004912","HP:0001596"))
)
is(p)
p$mar
p
?hpoPlot::get.ontology()
get.case.term.matrix(list(Patient1=c("HP:0001873")))
batch1$X
X <- batch1$X
