#### Gene ortholog plot ####
orthology <- lapply(stats::setNames(species_list,species_list), function(s){
if(s=="Homo sapiens") return( dat[variable=="gene_symbol",
list(input_gene=value,
ortholog_gene=value)] )
orthogene::convert_orthologs(dat[variable=="gene_symbol"],
gene_input="value",
input_species="human",
output_species=s,
# non121_strategy="kbs",
gene_output="column", method="homologene")
})|> data.table::rbindlist(idcol="species")
orthology[,species:=factor(species,levels=species_list, ordered=TRUE)]
dt <- merge(dat[variable=="gene_symbol"] ,orthology, by.x="value", by.y="input_gene", all.x=TRUE)
gg <- ggplot2::ggplot(dt, ggplot2::aes(x=species, y=hpo_name,
label=ortholog_gene)) +
ggplot2::scale_x_discrete(labels=stringr::str_wrap(species_list,10), drop=FALSE) +
ggplot2::geom_tile(color="grey20", fill="white") +
ggplot2::geom_text(color="black", size=size) +
ggplot2::theme_minimal() +
ggplot2::facet_grid(severity_class~., scales = "free_y") +
ggplot2::theme(#axis.text.x=ggplot2::element_text(angle=45, hjust=1),
axis.text.y=ggplot2::element_blank(),
panel.grid.major.x = ggplot2::element_blank(),
panel.grid.minor.x = ggplot2::element_blank(),
panel.grid.major.y = ggplot2::element_blank(),
panel.grid.minor.y = ggplot2::element_blank(),
strip.text=ggplot2::element_blank()) +
ggplot2::labs(x=NULL,y=NULL, subtitle=subtitle[2]) +
ggplot2::scale_fill_viridis_c()
if(isFALSE(xtext)) {
gg <- gg + ggplot2::theme(axis.text.x=ggplot2::element_blank())
}
(ggtile | gg) + patchwork::plot_layout(widths=widths)
}
gg_labels <- tile_plot(dt1=plot_top_phenos_out$data$congenital,
dt2=top_targets, xtext=FALSE)/
tile_plot(dt1=plot_top_phenos_out$data$noncongenital,
dt2=top_targets, subtitle=c("",""))
traceback()
tile_plot <- function(dt1,
dt2,
subtitle=c("Top targets","Orthologous genes"),
label_cols=c("Disease"="disease_name",
"Cell type"="cl_name"),
x_pos=c(1,2),
labels=names(label_cols),
xtext=TRUE,
width=70,
widths=c(1,.8),
size=3){
if(!is.null(labels)) labels <- stats::setNames(labels,as.character(x_pos))
dat <- merge(dt1[,-c("hpo_id")],
dt2, by="hpo_name", sort=FALSE)|>
data.table::melt.data.table(
id.vars=c("hpo_id","hpo_name","severity_class","p"),
measure.vars=unique(c(label_cols,"gene_symbol")))
dat[,hpo_name:=factor(hpo_name,
levels=rev(levels(dt1$hpo_name)), ordered=TRUE)]
dat[startsWith(value,"GRANULOMATOUS"), value:=stringr::str_to_title(value)]
dat <- dat[,.SD[1], by=c("hpo_name","variable")]
dat[,x:=stats::setNames(x_pos, label_cols)[variable]]
dat[p==0,p:=.Machine$double.xmin]
ggtile <- ggplot2::ggplot(dat[variable %in% label_cols],
ggplot2::aes(
x=x, y=hpo_name,
fill=-log1p(p),
label=stringr::str_trunc(value,width=width),
hpo_id=hpo_id)) +
# ggplot2::geom_tile(show.legend=FALSE, color="white", linejoin="bevel") +
ggplot2::scale_y_discrete(drop=TRUE) +
# ggplot2::scale_fill_viridis_c(option="magma",begin=0.2, end=.8) +
# ggplot2::geom_text(color=ggplot2::alpha("white",1)) +
ggplot2::geom_text(hjust=0, size=size) +
# ggtext::geom_textbox(hjust=0, width=NULL, color="white", show.legend=FALSE, size=3) +
ggplot2::theme_classic() +
ggplot2::scale_x_continuous(labels=labels, breaks=x_pos,
limits=c(min(x_pos), max(x_pos)*1.2)) +
# ggplot2::scale_x_continuous(labels=c("",labels), breaks=c(0.5,x_pos), limits=c(0.5,max(x_pos))) +
ggplot2::facet_grid(severity_class~., scales = "free_y") +
ggplot2::labs(x=NULL, y=NULL, subtitle=subtitle[1]) +
ggplot2::theme(axis.text.y = ggplot2::element_blank(),
strip.text=ggplot2::element_blank(),
panel.grid.major.x = ggplot2::element_line(),
panel.grid.minor.y = ggplot2::element_line() )
if(isFALSE(xtext)) {
ggtile <- ggtile + ggplot2::theme(axis.text.x = ggplot2::element_blank())
}
#### Gene ortholog plot ####
orthology <- lapply(stats::setNames(species_list,species_list), function(s){
if(s=="Homo sapiens") return( dat[variable=="gene_symbol",
list(input_gene=value,
ortholog_gene=value)] )
orthogene::convert_orthologs(dat[variable=="gene_symbol"],
gene_input="value",
input_species="human",
output_species=s,
# non121_strategy="kbs",
gene_output="column",
method="homologene")
})|> data.table::rbindlist(idcol="species")
orthology[,species:=factor(species,levels=species_list, ordered=TRUE)]
dt <- merge(dat[variable=="gene_symbol"],
orthology,
by.x="value",
by.y="input_gene",
allow.cartesian=TRUE,
all.x=TRUE)
gg <- ggplot2::ggplot(dt, ggplot2::aes(x=species, y=hpo_name,
label=ortholog_gene)) +
ggplot2::scale_x_discrete(labels=stringr::str_wrap(species_list,10), drop=FALSE) +
ggplot2::geom_tile(color="grey20", fill="white") +
ggplot2::geom_text(color="black", size=size) +
ggplot2::theme_minimal() +
ggplot2::facet_grid(severity_class~., scales = "free_y") +
ggplot2::theme(#axis.text.x=ggplot2::element_text(angle=45, hjust=1),
axis.text.y=ggplot2::element_blank(),
panel.grid.major.x = ggplot2::element_blank(),
panel.grid.minor.x = ggplot2::element_blank(),
panel.grid.major.y = ggplot2::element_blank(),
panel.grid.minor.y = ggplot2::element_blank(),
strip.text=ggplot2::element_blank()) +
ggplot2::labs(x=NULL,y=NULL, subtitle=subtitle[2]) +
ggplot2::scale_fill_viridis_c()
if(isFALSE(xtext)) {
gg <- gg + ggplot2::theme(axis.text.x=ggplot2::element_blank())
}
(ggtile | gg) + patchwork::plot_layout(widths=widths)
}
gg_labels <- tile_plot(dt1=plot_top_phenos_out$data$congenital,
dt2=top_targets, xtext=FALSE)/
tile_plot(dt1=plot_top_phenos_out$data$noncongenital,
dt2=top_targets, subtitle=c("",""))
gg_top_phenos <- (plot_top_phenos_out$plot |gg_labels) +
patchwork::plot_layout(widths=c(1,4))
gg_top_phenos
tile_plot <- function(dt1,
dt2,
subtitle=c("Top targets","Orthologous genes"),
label_cols=c("Disease"="disease_name",
"Cell type"="cl_name"),
x_pos=c(1,2),
labels=names(label_cols),
xtext=TRUE,
width=70,
widths=c(1,.8),
size=3){
if(!is.null(labels)) labels <- stats::setNames(labels,as.character(x_pos))
dat <- merge(dt1[,-c("hpo_id")],
dt2, by="hpo_name", sort=FALSE)|>
data.table::melt.data.table(
id.vars=c("hpo_id","hpo_name","severity_class","p"),
measure.vars=unique(c(label_cols,"gene_symbol")))
dat[,hpo_name:=factor(hpo_name,
levels=rev(levels(dt1$hpo_name)), ordered=TRUE)]
dat[startsWith(value,"GRANULOMATOUS"), value:=stringr::str_to_title(value)]
dat <- dat[,.SD[1], by=c("hpo_name","variable")]
dat[,x:=stats::setNames(x_pos, label_cols)[variable]]
dat[p==0,p:=.Machine$double.xmin]
ggtile <- ggplot2::ggplot(dat[variable %in% label_cols],
ggplot2::aes(
x=x, y=hpo_name,
fill=-log1p(p),
label=stringr::str_trunc(value,width=width),
hpo_id=hpo_id)) +
# ggplot2::geom_tile(show.legend=FALSE, color="white", linejoin="bevel") +
ggplot2::scale_y_discrete(drop=TRUE) +
# ggplot2::scale_fill_viridis_c(option="magma",begin=0.2, end=.8) +
# ggplot2::geom_text(color=ggplot2::alpha("white",1)) +
ggplot2::geom_text(hjust=0, size=size) +
# ggtext::geom_textbox(hjust=0, width=NULL, color="white", show.legend=FALSE, size=3) +
ggplot2::theme_classic() +
ggplot2::scale_x_continuous(labels=labels, breaks=x_pos,
limits=c(min(x_pos), max(x_pos)*1.2)) +
# ggplot2::scale_x_continuous(labels=c("",labels), breaks=c(0.5,x_pos), limits=c(0.5,max(x_pos))) +
ggplot2::facet_grid(severity_class~., scales = "free_y") +
ggplot2::labs(x=NULL, y=NULL, subtitle=subtitle[1]) +
ggplot2::theme(axis.text.y = ggplot2::element_blank(),
strip.text=ggplot2::element_blank(),
panel.grid.major.x = ggplot2::element_line(),
panel.grid.minor.y = ggplot2::element_line() )
if(isFALSE(xtext)) {
ggtile <- ggtile + ggplot2::theme(axis.text.x = ggplot2::element_blank())
}
#### Gene ortholog plot ####
orthology <- lapply(stats::setNames(species_list,species_list), function(s){
if(s=="Homo sapiens") return( dat[variable=="gene_symbol",
list(input_gene=value,
ortholog_gene=value)] )
orthogene::convert_orthologs(dat[variable=="gene_symbol"],
gene_input="value",
input_species="human",
output_species=s,
# non121_strategy="kbs",
gene_output="column",
method="homologene")
})|> data.table::rbindlist(idcol="species")
orthology[,species:=factor(species,levels=species_list, ordered=TRUE)]
dt <- merge(dat[variable=="gene_symbol"],
orthology,
by.x="value",
by.y="input_gene",
allow.cartesian=TRUE,
all.x=TRUE)
gg <- ggplot2::ggplot(dt, ggplot2::aes(x=species, y=hpo_name,
label=ortholog_gene)) +
ggplot2::scale_x_discrete(labels=stringr::str_wrap(species_list,10), drop=FALSE) +
ggplot2::geom_tile(color="grey20", fill="white") +
ggplot2::geom_text(color="black", size=size, check_overlap = TRUE) +
ggplot2::theme_minimal() +
ggplot2::facet_grid(severity_class~., scales = "free_y") +
ggplot2::theme(#axis.text.x=ggplot2::element_text(angle=45, hjust=1),
axis.text.y=ggplot2::element_blank(),
panel.grid.major.x = ggplot2::element_blank(),
panel.grid.minor.x = ggplot2::element_blank(),
panel.grid.major.y = ggplot2::element_blank(),
panel.grid.minor.y = ggplot2::element_blank(),
strip.text=ggplot2::element_blank()) +
ggplot2::labs(x=NULL,y=NULL, subtitle=subtitle[2]) +
ggplot2::scale_fill_viridis_c()
if(isFALSE(xtext)) {
gg <- gg + ggplot2::theme(axis.text.x=ggplot2::element_blank())
}
(ggtile | gg) + patchwork::plot_layout(widths=widths)
}
gg_labels <- tile_plot(dt1=plot_top_phenos_out$data$congenital,
dt2=top_targets, xtext=FALSE)/
tile_plot(dt1=plot_top_phenos_out$data$noncongenital,
dt2=top_targets, subtitle=c("",""))
gg_top_phenos <- (plot_top_phenos_out$plot |gg_labels) +
patchwork::plot_layout(widths=c(1,4))
gg_top_phenos
tile_plot <- function(dt1,
dt2,
subtitle=c("Top targets","Orthologous genes"),
label_cols=c("Disease"="disease_name",
"Cell type"="cl_name"),
x_pos=c(1,2),
labels=names(label_cols),
xtext=TRUE,
width=70,
widths=c(1,.8),
size=3){
if(!is.null(labels)) labels <- stats::setNames(labels,as.character(x_pos))
dat <- merge(dt1[,-c("hpo_id")],
dt2, by="hpo_name", sort=FALSE)|>
data.table::melt.data.table(
id.vars=c("hpo_id","hpo_name","severity_class","p"),
measure.vars=unique(c(label_cols,"gene_symbol")))
dat[,hpo_name:=factor(hpo_name,
levels=rev(levels(dt1$hpo_name)), ordered=TRUE)]
dat[startsWith(value,"GRANULOMATOUS"), value:=stringr::str_to_title(value)]
dat <- dat[,.SD[1], by=c("hpo_name","variable")]
dat[,x:=stats::setNames(x_pos, label_cols)[variable]]
dat[p==0,p:=.Machine$double.xmin]
ggtile <- ggplot2::ggplot(dat[variable %in% label_cols],
ggplot2::aes(
x=x, y=hpo_name,
fill=-log1p(p),
label=stringr::str_trunc(value,width=width),
hpo_id=hpo_id)) +
# ggplot2::geom_tile(show.legend=FALSE, color="white", linejoin="bevel") +
ggplot2::scale_y_discrete(drop=TRUE) +
# ggplot2::scale_fill_viridis_c(option="magma",begin=0.2, end=.8) +
# ggplot2::geom_text(color=ggplot2::alpha("white",1)) +
ggplot2::geom_text(hjust=0, size=size) +
# ggtext::geom_textbox(hjust=0, width=NULL, color="white", show.legend=FALSE, size=3) +
ggplot2::theme_classic() +
ggplot2::scale_x_continuous(labels=labels, breaks=x_pos,
limits=c(min(x_pos), max(x_pos)*1.2)) +
# ggplot2::scale_x_continuous(labels=c("",labels), breaks=c(0.5,x_pos), limits=c(0.5,max(x_pos))) +
ggplot2::facet_grid(severity_class~., scales = "free_y") +
ggplot2::labs(x=NULL, y=NULL, subtitle=subtitle[1]) +
ggplot2::theme(axis.text.y = ggplot2::element_blank(),
strip.text=ggplot2::element_blank(),
panel.grid.major.x = ggplot2::element_line(),
panel.grid.minor.y = ggplot2::element_line() )
if(isFALSE(xtext)) {
ggtile <- ggtile + ggplot2::theme(axis.text.x = ggplot2::element_blank())
}
#### Gene ortholog plot ####
orthology <- lapply(stats::setNames(species_list,species_list), function(s){
if(s=="Homo sapiens") return( dat[variable=="gene_symbol",
list(input_gene=value,
ortholog_gene=value)] )
orthogene::convert_orthologs(dat[variable=="gene_symbol"],
gene_input="value",
input_species="human",
output_species=s,
# non121_strategy="kbs",
gene_output="column",
method="homologene")
})|> data.table::rbindlist(idcol="species")
orthology[,species:=factor(species,levels=species_list, ordered=TRUE)]
dt <- merge(dat[variable=="gene_symbol"],
orthology,
by.x="value",
by.y="input_gene",
allow.cartesian=TRUE,
all.x=TRUE)
gg <- ggplot2::ggplot(dt, ggplot2::aes(x=species, y=hpo_name,
label=ortholog_gene)) +
ggplot2::scale_x_discrete(labels=stringr::str_wrap(species_list,10), drop=FALSE) +
ggplot2::geom_tile(color="grey20", fill="white") +
ggplot2::geom_text(color="black", size=size, check_overlap = TRUE) +
ggplot2::theme_minimal() +
ggplot2::facet_grid(severity_class~., scales = "free_y") +
ggplot2::theme(#axis.text.x=ggplot2::element_text(angle=45, hjust=1),
axis.text.y=ggplot2::element_blank(),
panel.grid.major.x = ggplot2::element_blank(),
panel.grid.minor.x = ggplot2::element_blank(),
panel.grid.major.y = ggplot2::element_blank(),
panel.grid.minor.y = ggplot2::element_blank(),
strip.text=ggplot2::element_blank()) +
ggplot2::labs(x=NULL,y=NULL, subtitle=subtitle[2]) +
ggplot2::scale_fill_viridis_c()
if(isFALSE(xtext)) {
gg <- gg + ggplot2::theme(axis.text.x=ggplot2::element_blank())
}
ggtile <- (ggtile | gg) + patchwork::plot_layout(widths=widths)
return(list(
data=list(top_targets=dat,
orthologous_genes=dt),
plot=ggtile
))
}
tp1 <- tile_plot(dt1=plot_top_phenos_out$data$congenital,
dt2=top_targets,
width=width,
xtext=FALSE)
tp2 <- tile_plot(dt1=plot_top_phenos_out$data$noncongenital,
dt2=top_targets,
width=width,
subtitle=c("",""))
gg_labels <- tp1$plot/tp2$plot
gg_top_phenos <- (plot_top_phenos_out$plot | gg_labels) +
patchwork::plot_layout(widths=widths)
source("~/Desktop/Rare Disease Celltyping/MSTExplorer/R/prioritise_targets_grid.R")
top_targets <- MSTExplorer::example_targets$top_targets
out <- prioritise_targets_grid(top_targets = top_targets)
devtools::check_man()
devtools::check_man()
devtools::check_man()
devtools::check_man()
devoptera::args2vars()
top_targets <- MSTExplorer::example_targets$top_targets
res <- ttd_check(top_targets=top_targets)
ttdi
ttdi <- KGExplorer::get_ttd(force_new = force_new,
run_map_genes = run_map_genes)
ttdi$targets
devoptera::args2vars()
top_targets <- MSTExplorer::example_targets$top_targets[1:10]
top_targets[,estimate:=fold_change]
top_targets <- map_celltype(top_targets)
edge_color_var = "estimate"
edge_size_var = edge_color_var
add_logfc(top_targets)
if(any(c("cl_name","cl_id") %in% vertex_vars)){
map_celltype(top_targets)
}
if(isTRUE(run_prune_ancestors)){
hpo <- HPOExplorer::get_hpo()
top_targets <- KGExplorer::prune_ancestors(dat = top_targets,
id_col = "hpo_id",
ont = hpo)
}
#### Network ####
g <- targets_to_graph(top_targets = top_targets,
vertex_vars = c(group_var,vertex_vars),
group_var = group_var,
edge_color_var = edge_color_var,
edge_size_var = edge_size_var,
mediator_var = mediator_var,
verbose = verbose)
out <- KGExplorer::plot_graph_visnetwork(
g = g,
label_var = "name",
colour_var = colour_var,
save_path = save_path,
preferred_palettes = preferred_palettes,
layout = layout,
solver = solver,
physics = physics,
forceAtlas2Based = forceAtlas2Based,
scaling = scaling,
arrows = arrows,
smooth = smooth,
add_visExport = add_visExport,
degree = degree,
height = height,
width = width,
main = main,
submain = submain,
randomSeed = randomSeed,
show_plot = show_plot)
g
metadata_vars=c("hpo_id",
"hpo_name",
"definition",
"ontLvl",
"disease_name",
"disease_id",
"ancestor_name",
"CellType",
"q",
"effect"
# "tier_merge",
# "disease_characteristic",
# "gene_biotype"
# grep(paste("_mean$",
#            "_min$",
#            "_latest$",
#            "_names$",
#            sep = "|"),
#      names(top_targets),
#      value = TRUE)
) |> unique()
format="visnetwork"
messager("Creating network.",v=verbose)
#### Create vertices ####
vertex_vars <- unique(vertex_vars[vertex_vars %in% names(top_targets)])
shapes <- c("database","circle","box")
if(length(vertex_vars)>3){
shapes <- c(rep("database",length(vertex_vars)-3),shapes)
}
##### Remove Phenotypes that are also ancestor #####
## This avoids duplicate nodes
if("ancestor_name" %in% names(top_targets)){
top_targets <- top_targets[hpo_name!=ancestor_name,]
}
if("disease_name" %in% vertex_vars){
top_targets[,disease_name:=data.table::fcoalesce(disease_name,disease_id)]
}
#### Make vertex metadata ####
metadata_vars <- metadata_vars[metadata_vars %in% names(top_targets)]
top_targets
agg_fun=mean
!is.null(agg_fun)
top_targets
group_var
vertex_vars
top_targets[ list(edge_color_var, edge_size_var)=list(get(edge_color_var), get(edge_size_var)), by=vertex_vars]
top_targets[ c(edge_color_var, edge_size_var)=list(get(edge_color_var), get(edge_size_var)), by=vertex_vars]
top_targets[ list(get(edge_color_var), get(edge_size_var)), by=vertex_vars]
top_targets[, list(get(edge_color_var), get(edge_size_var)), by=vertex_vars]
top_targets[,c(edge_color_var, edge_size_var)=list(get(edge_color_var), get(edge_size_var)), by=vertex_vars]
top_targets[,c(edge_color_var, edge_size_var):=list(get(edge_color_var), get(edge_size_var)), by=vertex_vars]
top_targets
top_targets[list(get(edge_color_var)=get(edge_color_var), get(edge_size_var)), by=vertex_vars]
top_targets[,list(get(edge_color_var)=get(edge_color_var), get(edge_size_var)), by=vertex_vars]
top_targets[,list(edge_color_var=get(edge_color_var), get(edge_size_var)), by=vertex_vars]
top_targets[,list((edge_color_var)=get(edge_color_var), get(edge_size_var)), by=vertex_vars]
top_targets[,list(c(edge_color_var)=get(edge_color_var), get(edge_size_var)), by=vertex_vars]
top_targets[,c(edge_color_var,edge_size_var):=list(get(edge_color_var), get(edge_size_var)), by=vertex_vars]
top_targets
source("~/Desktop/Rare Disease Celltyping/MSTExplorer/R/targets_to_graph.R")
#### Network ####
g <- targets_to_graph(top_targets = top_targets,
vertex_vars = c(group_var,vertex_vars),
group_var = group_var,
edge_color_var = edge_color_var,
edge_size_var = edge_size_var,
mediator_var = mediator_var,
verbose = verbose)
g
out <- KGExplorer::plot_graph_visnetwork(
g = g,
label_var = "name",
colour_var = colour_var,
save_path = save_path,
preferred_palettes = preferred_palettes,
layout = layout,
solver = solver,
physics = physics,
forceAtlas2Based = forceAtlas2Based,
scaling = scaling,
arrows = arrows,
smooth = smooth,
add_visExport = add_visExport,
degree = degree,
height = height,
width = width,
main = main,
submain = submain,
randomSeed = randomSeed,
show_plot = show_plot)
out
devtools::check_man()
devtools::check_man()
?MSTExplorer::prioritise_targets
filters <- extract_filters()
MSTExplorer:::extract_filters()
f=MSTExplorer:::extract_filters()
f
f
View(f)
f[step=="symptom_intersection_threshold"]
f[step=="symptom_intersection_threshold"]$description
cat(f[step=="symptom_intersection_threshold"]$description)
devtools::check_man()
f=MSTExplorer:::extract_filters()
f
f
f$description
devtools::check_man()
f=MSTExplorer:::extract_filters()
f
f
f$description
devtools::check_man()
devtools::check_man()
