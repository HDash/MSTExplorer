#'
#' }
#' @returns If MergeResults == TRUE, it will return all results as a datframe. If
#' FALSE nothing will be returned, but the individual results will still be saved
#' in the results directory.
#' @export
gen_results <- function(ctd,
gene_data,
list_names,
background_genes,
list_name_column = "Phenotype",
gene_column = "Gene",
results_dir = "results",
overwrite_past_analysis = FALSE,
reps = 10,
annotLevel = 1,
genelistSpecies = "human",
sctSpecies = "human",
cores = 1,
MergeResults = TRUE) {
# remove gene lists that do not have enough valid genes (>= 4)
list_names <- get_valid_gene_lists(ctd,
list_names = list_names,
gene_data = gene_data,
list_name_column = list_name_column,
gene_column = gene_column)
# Create results directory and remove finished gene lists
if (!file.exists(results_dir)) {
dir.create(results_dir)
}
if (!overwrite_past_analysis) {
list_names <- get_unfinished_list_names(list_names,results_dir)
}
# Run analysis
ewce_para(list_names = list_names,
gene_data = gene_data,
list_name_column = "Phenotype",
gene_column = "Gene",
results_directory = results_dir,
ctd_file = ctd,
background_genes = background_genes,
bootstrap_reps = reps,
annotation_Level= annotLevel,
genes_Species = genelistSpecies,
ctd_Species = sctSpecies,
cores = cores)
# Combine results into a single dataframe
if (MergeResults) {
results_final <- merge_results(results_dir = results_dir,
list_name_column = list_name_column)
if (!file.exists("merged_results")) {
dir.create("merged_results")
}
saveRDS(results_final,paste0("merged_results/results_",stringr::str_replace_all(Sys.time(),":","-"),".rds"))
return(results_final)
} else {
results_final <- merge_results(results_dir = results_dir,
list_name_column = list_name_column)
return(results_final)
}
}
devtools::build_vignettes()
usethis::use_pkgdown()
pkgdown::build_site()
devtools::check()
install.packages("qpdf")
devtools::check()
devtools::check_win_release()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
devtools:check()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
devtools::document()
BiocCheck::BiocCheck()
roxygen2::roxygenise()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
roxygen::roxygenise()
roxygen2::roxygenise()
devtools::check()
roxygen2::roxygenise()
devtools::check()
library(ewceData)
ewceData::ctd
ewceData::ctd()
library(MultiEWCE)
gene_data <- HPOExplorer::load_phenotype_to_genes("phenotype_to_genes.txt")
View(gene_data)
ctd <- ewceData::ctd()
View(ctd)
ctd[[2]][["annot"]]
ctd[[1]][["median_exp"]]
rownames(ctd[[1]][["median_exp"]])
background_genes <- unique(rownames(ctd[[1]][["median_exp"]]))
gene_data <- gene_data[gene_data$Gene %in% background_genes, ]
View(gene_data)
gene_data <- HPOExplorer::load_phenotype_to_genes("phenotype_to_genes.txt")
View(gene_data)
background_genes <- toupper(unique(rownames(ctd[[1]][["median_exp"]])))
background_genes
gene_data <- gene_data[gene_data$Gene %in% background_genes, ]
gene_data <- HPOExplorer::load_phenotype_to_genes("phenotype_to_genes.txt")
gene_data <- HPOExplorer::load_phenotype_to_genes("phenotype_to_genes.txt")
print(head(gene_data))
list_names <- unique(gene_data$Phenotype)[1:10]
background_genes <- toupper(unique(rownames(ctd[[1]][["median_exp"]])))
gene_data <- gene_data[gene_data$Gene %in% background_genes, ]
list_name_column <- "Phenotype"
gene_column <- "Gene"
results_dir <- "results"
overwrite_past_analysis <- FALSE
MergeResults <- TRUE
reps <- 10
annotLevel <- 1
genelistSpecies <- "human"
sctSpecies <- "human"
cores <- 1
all_results <-MultiEWCE::gen_results(ctd,
gene_data,
list_names,
background_genes,
list_name_column,
gene_column,
results_dir,
overwrite_past_analysis,
reps,
annotLevel,
genelistSpecies,
sctSpecies,
cores,
MergeResults)
hgnc <- ewceData::all_hgnc()
?ewceData::mouse_to_human_homologs
library(MultiEWCE)
library(MultiEWCE)
# Introduction
The MultiEWCE package is an extension of the [EWCE](https://nathanskene.github.io/EWCE/articles/EWCE.html) package. It is designed to run expression weighted celltype enrichment (EWCE) on multiple gene lists in parallel. The results are then stored both as separate `.rds` files, one for each individual EWCE analysis, as well as a in a single dataframe containing all the results.
This package is useful in cases where you have a large number of related, but separate, gene lists. In this vignette we will use an example from the Human Phenotype Ontology (HPO). The HPO contains over 9000 clinically relevant phenotypes annotated with lists of genes that have been found to be associated with the particular phenotype.
# Installation
This tutorial will require the MultiEWCE package and a few additional packages related to the particular dataset we will be using. Install and load these with the following R code:
```{r install, message = FALSE, warning = FALSE}
if (!require("ewceData")) {
install.packages("ewceData")
}
# Loading Phenotype Associated Gene Lists from the HPO
The MultiEWCE package requires the gene data to be in a particular format. It must be a data.frame that includes one column of gene list names, and another column of genes. For example:
| Phenotype        | Gene   |
| ---------------- | ------ |
| "Abnormal heart" | gene X |
| "Abnormal heart" | gene Y |
| "Poor vision"    | gene Z |
| "Poor vision"    | gene Y |
| "Poor vision"    | gene W |
| "Short stature"  | gene V |
*etc...*
Now we will get a dataset like this from the HPO.
```{r get_HPO_data, message = FALSE, warning = FALSE}
gene_data <- HPOExplorer::load_phenotype_to_genes("phenotype_to_genes.txt")
In this example our **gene list names** column is called `Phenotype` and our column of genes is called `Gene`. However, different column names can be specified to the MultiEWCE package.
# Setting up input arguments for the gen_results function
```{r setup_args}
ctd <- ewceData::ctd()
list_names <- unique(gene_data$Phenotype)[1:10]
background_genes <- toupper(unique(rownames(ctd[[1]][["median_exp"]])))
gene_data <- gene_data[gene_data$Gene %in% background_genes, ]
list_name_column <- "Phenotype"
gene_column <- "Gene"
results_dir <- "results"
overwrite_past_analysis <- FALSE
MergeResults <- TRUE
reps <- 10
annotLevel <- 1
genelistSpecies <- "human"
sctSpecies <- "MGI"
cores <- 1
```
## ctd
The `ctd` (cell type data) file contains the single cell RNA sequence data that is required for EWCE. for further information about generating a `ctd` please see the [EWCE](https://nathanskene.github.io/EWCE/articles/EWCE.html) documentation. In this example we will use a CTD of human gene expression data, generated from the Descartes Human Cell Atlas. Replace this with your own CTD file.
## gene_data
Gene data is the dataframe containin gene list names and genes, in this case we have already loaded it and assigned it to the variable `gene_data`.
## list_names
This is a character vector containing all the gene list names. This can be obtained from your `gene_data` as follows. To save time in this example analysis we will only use the first 10 gene lists (`[1:10]`)
## background_genes
This is a character vector of genes to be used as the background genes. See EWCE package docs for more details on background genes.
## Column names
`list_name_column` is the name of the column in gene_data that contains the gene list names and `gene_column` contains the genes.
## Processing results arguments
The `results_dir` argument is the path to the directory where the individual EWCE results will be saved.
The `overwrite_past_analysis` argument can be set to `TRUE` or `FALSE` and states if you want to redo and overwrite analysis of gene lists that have already been saved to the `results_dir`. Setting this to `FALSE` is useful in cases where you stopped an analysis midway and would like to carry on from where you left off.
`MergeResults` is another `TRUE`/`FALSE` argument. If `TRUE`, `gen_results` will also return a single dataframe containing all of the results from all gene lists. A `.rds` file of these merged results will also be saved to your current working directory in a file called "`results_<datetime_of_analysis>.rds`"
## Number of cores
The `cores` argument is the number of cores you would like to run in parallel. This is dependent on what is available to you on your computer. In this case we will just run it on one core, no parallelism.
## EWCE::bootstrap_enrichment_test arguments
The `gen_results` function calls the EWCE `bootstrap_enrichment_test` function. Here we set the input parameters related to this.
`reps` is the number of bootstrap reps to run, for this tutorial we will only do 10 to save time, but typically you would want to do closer to 100,000.
`annotLevel` is the level of cell type specificity to use from the `ctd` file. `genelistSpecies` can be "human" or "mouse" and is the species of the genes in the gene lists.
`sctSpecies` is the species of the CTD data, also can be "human" or "mouse".
# Run analysis
Now we have set up all our desired inputs, we can run the analysis.
```{r run, warning = FALSE, message = FALSE}
ctd <- ewceData::ctd()
list_names <- unique(gene_data$Phenotype)[1:10]
background_genes <- toupper(unique(rownames(ctd[[1]][["median_exp"]])))
gene_data <- gene_data[gene_data$Gene %in% background_genes, ]
list_name_column <- "Phenotype"
gene_column <- "Gene"
results_dir <- "results"
overwrite_past_analysis <- FALSE
MergeResults <- TRUE
reps <- 10
annotLevel <- 1
genelistSpecies <- "human"
sctSpecies <- "mouse"
cores <- 1
all_results <-MultiEWCE::gen_results(ctd,
gene_data,
list_names,
background_genes,
list_name_column,
gene_column,
results_dir,
overwrite_past_analysis,
reps,
annotLevel,
genelistSpecies,
sctSpecies,
cores,
MergeResults)
View(gene_data)
background_genes
"AGPS" %in% background_genes
"ASXL3" %in% background_genes
length(unique(gene_data$Phenotype))
View(gene_data)
devtools
devtools::document()
gene_data <- HPOExplorer::load_phenotype_to_genes("phenotype_to_genes.txt")
list_names <- unique(gene_data$Phenotype)[1:10]
gene_data <- gene_data[gene_data$Gene %in% toupper(unique(rownames(ctd[[1]][["median_exp"]]))), ]
background_genes <- unique(gene_data$Phenotype)
list_name_column <- "Phenotype"
gene_column <- "Gene"
results_dir <- "results"
overwrite_past_analysis <- FALSE
MergeResults <- TRUE
reps <- 10
annotLevel <- 1
genelistSpecies <- "human"
sctSpecies <- "human"
cores <- 1
all_results <-MultiEWCE::gen_results(ctd,
gene_data,
list_names,
background_genes,
list_name_column,
gene_column,
results_dir,
overwrite_past_analysis,
reps,
annotLevel,
genelistSpecies,
sctSpecies,
cores,
MergeResults)
gene_data <- HPOExplorer::load_phenotype_to_genes("phenotype_to_genes.txt")
gene_data <- HPOExplorer::load_phenotype_to_genes("phenotype_to_genes.txt")
ctd <- ewceData::ctd()
ctd <- ewceData::ctd()
rownames(ctd[[1]][["median_exp"]]) <- toupper(rownames(ctd[[1]][["median_exp"]]))
list_names <- unique(gene_data$Phenotype)[1:10]
gene_data <- HPOExplorer::load_phenotype_to_genes("phenotype_to_genes.txt")
ctd <- ewceData::ctd()
ctd <- ewceData::ctd()
rownames(ctd[[1]][["median_exp"]]) <- toupper(rownames(ctd[[1]][["median_exp"]]))
rownames(ctd[[1]][["median_exp"]]) <- toupper(rownames(ctd[[1]][["median_exp"]]))
gene_data <- gene_data[gene_data$Gene %in% unique(rownames(ctd[[1]][["median_exp"]])), ]
list_names <- unique(gene_data$Phenotype)[1:10]
background_genes <- unique(gene_data$Phenotype)
list_name_column <- "Phenotype"
gene_column <- "Gene"
results_dir <- "results"
overwrite_past_analysis <- FALSE
MergeResults <- TRUE
reps <- 10
annotLevel <- 1
genelistSpecies <- "human"
sctSpecies <- "human"
cores <- 1
all_results <-MultiEWCE::gen_results(ctd,
gene_data,
list_names,
background_genes,
list_name_column,
gene_column,
results_dir,
overwrite_past_analysis,
reps,
annotLevel,
genelistSpecies,
sctSpecies,
cores,
MergeResults)
View(ctd)
rownames(ctd[[1]][["annot"]])
rownames(ctd[[1]][["mean_exp"]])
rownames(ctd[[1]][["mean_exp"]])
gene_data <- HPOExplorer::load_phenotype_to_genes("phenotype_to_genes.txt")
# Loading CTD file (had to change all rownames to uppercase as the genelists are all upper)
ctd <- ewceData::ctd()
# Loading CTD file (had to change all rownames to uppercase as the genelists are all upper)
ctd <- ewceData::ctd()
rownames(ctd[[1]][["median_exp"]]) <- toupper(rownames(ctd[[1]][["median_exp"]]))
rownames(ctd[[1]][["mean_exp"]]) <- toupper(rownames(ctd[[1]][["median_exp"]]))
rownames(ctd[[1]][["specificity"]]) <- toupper(rownames(ctd[[1]][["median_exp"]]))
rownames(ctd[[1]][["median_specificity"]]) <- toupper(rownames(ctd[[1]][["median_exp"]]))
rownames(ctd[[1]][["specificity_quantiles"]]) <- toupper(rownames(ctd[[1]][["median_exp"]]))
gene_data <- gene_data[gene_data$Gene %in% unique(rownames(ctd[[1]][["median_exp"]])), ]
list_names <- unique(gene_data$Phenotype)[1:10]
background_genes <- unique(gene_data$Phenotype)
list_name_column <- "Phenotype"
gene_column <- "Gene"
results_dir <- "results"
overwrite_past_analysis <- FALSE
MergeResults <- TRUE
reps <- 10
annotLevel <- 1
genelistSpecies <- "human"
sctSpecies <- "human"
cores <- 1
all_results <-MultiEWCE::gen_results(ctd,
gene_data,
list_names,
background_genes,
list_name_column,
gene_column,
results_dir,
overwrite_past_analysis,
reps,
annotLevel,
genelistSpecies,
sctSpecies,
cores,
MergeResults)
?EWCE::bootstrap_enrichment_test
EWCE::bootstrap_enrichment_test
rownames(ctd[[1]][["median_exp"]])
devtools::document()
roxygen2::roxygenise()
devtools::check()
devtools::check()
gene_data$Phenotype[1]
roxygen2::roxygenise()
BiocCheck::BiocCheck()
roxygen2::roxygenise()
devtools::check()
pkgdown::build_site()
?piggyback::pb_download
tempdir()
roxygen2::roxygenise()
pkgdown::build_site()
.Last.error.trace
pkgdown::build_site()
tempfile(())
tempfile()
pkgdown::build_site()
pkgdown::build_site()
#' Load example CTD (Descartes)
#'
#' This loads a example CTD for vignettes and testing purposes. It is Descartes
#' human cell atlas data at annotation level 1.
#'
#' @examples
#' CTD <- load_example_CTD(path = tempfile())
#'
#' @export
load_example_CTD <- function(path  = "CTD_Descartes_example.rds" {
#' Load example CTD (Descartes)
#'
#' This loads a example CTD for vignettes and testing purposes. It is Descartes
#' human cell atlas data at annotation level 1.
#'
#' @examples
#' CTD <- load_example_CTD(path = tempfile())
#'
#' @export
load_example_CTD <- function(path  = "CTD_Descartes_example.rds") {
if (! file.exists(path)) {
piggyback::pb_download(repo="neurogenomics/MultiEWCE",
tag = "v0.0.1",
dest = path)
return(readRDS(path))
} else {
return (readRDS(path))
}
}
test <- load_example_CTD()
?piggyback::pb_download
#' Load example CTD (Descartes)
#'
#' This loads a example CTD for vignettes and testing purposes. It is Descartes
#' human cell atlas data at annotation level 1.
#'
#' @examples
#' CTD <- load_example_CTD(path = tempfile())
#'
#' @export
load_example_CTD <- function(path  = tempdir()) {
if (! file.exists(path)) {
piggyback::pb_download(repo="neurogenomics/MultiEWCE",
tag = "v0.0.1", path = tempdir())
return(readRDS(path))
} else {
return (readRDS(path))
}
}
test <- load_example_CTD()
#' Load example CTD (Descartes)
#'
#' This loads a example CTD for vignettes and testing purposes. It is Descartes
#' human cell atlas data at annotation level 1.
#'
#' @examples
#' CTD <- load_example_CTD(path = tempfile())
#'
#' @export
load_example_CTD <- function() {
if (! file.exists("CTD_Descartes_example.rds")) {
piggyback::pb_download(repo="neurogenomics/MultiEWCE",
tag = "v0.0.1")
return(readRDS("CTD_Descarates_example.rds"))
} else {
return (readRDS("CTD_Descartes_example.rds"))
}
}
test<- load_example_CTD()
#' Load example CTD (Descartes)
#'
#' This loads a example CTD for vignettes and testing purposes. It is Descartes
#' human cell atlas data at annotation level 1.
#'
#' @examples
#' CTD <- load_example_CTD(path = tempfile())
#'
#' @export
load_example_CTD <- function(path = tempdir()) {
if (! file.exists((readRDS(paste0(path,"/","CTD_Descartes_example.rds"))))) {
piggyback::pb_download(repo="neurogenomics/MultiEWCE",
tag = "v0.0.1", dest = path)
return(readRDS(paste0(path,"/","CTD_Descartes_example.rds")))
} else {
return(readRDS(paste0(path,"/","CTD_Descartes_example.rds")))
}
}
test = load_example_CTD()
#' Load example CTD (Descartes)
#'
#' This loads a example CTD for vignettes and testing purposes. It is Descartes
#' human cell atlas data at annotation level 1.
#'
#' @examples
#' CTD <- load_example_CTD(path = tempfile())
#'
#' @export
load_example_CTD <- function() {
if (! file.exists("CTD_Descartes_example.rds")) {
piggyback::pb_download(repo="neurogenomics/MultiEWCE",
tag = "v0.0.1")
return(readRDS("CTD_Descartes_example.rds"))
} else {
return(readRDS("CTD_Descartes_example.rds"))
}
}
test = load_example_CTD()
pkgdown::build_site()
pkgdown::build_site()
library(MultiEWCE)
load_example_CTD <- function() {
if (! file.exists("CTD_Descartes_example.rds")) {
piggyback::pb_download(repo="neurogenomics/MultiEWCE",
tag = "v0.0.1")
return(readRDS("CTD_Descartes_example.rds"))
} else {
return (readRDS("CTD_Descartes_example.rds"))
}
}
test <- load_example_CTD()
pkgdown::build_site()
devtools::check()
devtools::check()
