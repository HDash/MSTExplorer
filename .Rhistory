list_names = list_names,
reps = 10)
list_names <- unique(gene_data$Phenotype)[seq_len(3)]
res_files <- ewce_para(ctd = ctd,
gene_data = gene_data,
list_names = list_names,
reps = 10)
unfinished <- get_unfinished_list_names(list_names = list_names)
devtools::document()
gene_data <- HPOExplorer::load_phenotype_to_genes()
gene_list <- get_gene_list(list_name="Focal non-motor seizure",
gene_data = gene_data)
gene_list
gene_data <- HPOExplorer::load_phenotype_to_genes()
list_names <- unique(gene_data$Phenotype)[seq_len(3)]
res_files <- ewce_para(ctd = ctd,
gene_data = gene_data,
list_names = list_names,
reps = 10)
unfinished <- get_unfinished_list_names(list_names = list_names)
save_dir = tempdir()
unfinished <- get_unfinished_list_names(list_names = list_names,
save_dir = save_dir)
devtools::document()
devtools::document()
devtools::document()
library(MultiEWCE)
library(MultiEWCE)
gene_data <- HPOExplorer::load_phenotype_to_genes()
print(head(gene_data))
# Loading CTD file
ctd <- load_example_CTD()
list_names <- unique(gene_data$Phenotype)[seq_len(5)]
reps <- 10 # in practice would use more reps
cores <- 1 # in practice would use more cores
save_dir <- tempdir()
save_dir_tmp <- file.path(save_dir,"results")
#### Aggregate results ####
n_signif <- all_results[q<=0.05 & !is.na(q), .(sig_enrichments = .N), by="Phenotype"]
all_results <- MultiEWCE::gen_results(ctd = ctd,
gene_data = gene_data,
list_names = list_names,
reps = reps,
cores = cores,
save_dir = save_dir,
save_dir_tmp = save_dir_tmp)
#### Aggregate results ####
n_signif <- all_results[q<=0.05 & !is.na(q), .(sig_enrichments = .N), by="Phenotype"]
#### Plot ####
plot1 <-  ggplot(n_signif, aes(x = stringr::str_wrap(Phenotype,width = 10),
y = sig_enrichments,
fill = sig_enrichments)) +
geom_col() +
labs(x="Phenotype",y="Enrichments (n)") +
theme_bw()
plot1
eye_contact_genes <- MultiEWCE::get_gene_list(list_name = "Poor eye contact",
gene_data = gene_data)
cat(paste("5 genes associated with poor eye contact:",paste(eye_contact_genes[1:5],collapse = " ")))
cat(paste("5 genes associated with poor eye contact:",paste(eye_contact_genes[seq_len(5)],collapse = ", ")))
unfinished <- MultiEWCE::get_unfinished_list_names(list_names = unique(gene_data$Phenotype)[seq_len(15)],
save_dir = save_dir)
cat(paste0("Gene lists not yet analysed:\n",paste(unfinished, collapse = ",\n")))
unfinished <- MultiEWCE::get_unfinished_list_names(list_names = gene_data$Phenotype,
save_dir = save_dir)
unfinished
unfinished <- MultiEWCE::get_unfinished_list_names(list_names = unique(gene_data$Phenotype),
save_dir = save_dir)
unfinished
all_phenotypes <- unique(gene_data$Phenotype)
unfinished <- MultiEWCE::get_unfinished_list_names(list_names = all_phenotypes,
save_dir = save_dir)
methods::show(paste0(formatC(length(unfinished),big.mark = ","),"/",length(all_phenotypes),
"gene lists not yet analysed"))
methods::show(paste(formatC(length(unfinished),big.mark = ","),"/",length(all_phenotypes),
"gene lists not yet analysed"))
methods::show(paste(length(unfinished),"/",length(all_phenotypes),
"gene lists not yet analysed"))
unfinished <- MultiEWCE::get_unfinished_list_names(list_names = all_phenotypes,
save_dir = save_dir_tmp)
methods::show(paste(length(unfinished),"/",length(all_phenotypes),
"gene lists not yet analysed"))
all_results <- MultiEWCE::gen_results(ctd = ctd,
gene_data = gene_data,
list_names = list_names,
reps = reps,
cores = cores,
save_dir = save_dir,
save_dir_tmp = save_dir_tmp)
list.files(save_dir_tmp)
list.files(save_dir)
devtools::document()
library(MultiEWCE)
library(MultiEWCE)
gene_data <- HPOExplorer::load_phenotype_to_genes()
print(head(gene_data))
# Loading CTD file
ctd <- load_example_CTD()
list_names <- unique(gene_data$Phenotype)[seq_len(5)]
reps <- 10 # in practice would use more reps
cores <- 1 # in practice would use more cores
save_dir <- tempdir()
save_dir_tmp <- file.path(save_dir,"results")
all_results <- MultiEWCE::gen_results(ctd = ctd,
gene_data = gene_data,
list_names = list_names,
reps = reps,
cores = cores,
save_dir = save_dir,
save_dir_tmp = save_dir_tmp)
library(ggplot2)
library(data.table)
#### Aggregate results ####
n_signif <- all_results[q<=0.05 & !is.na(q), .(sig_enrichments = .N), by="Phenotype"]
#### Plot ####
plot1 <-  ggplot(n_signif, aes(x = stringr::str_wrap(Phenotype,width = 10),
y = sig_enrichments,
fill = sig_enrichments)) +
geom_col() +
labs(x="Phenotype",y="Enrichments (n)") +
theme_bw()
methods::show(plot1)
all_results_2 <- MultiEWCE::merge_results(save_dir = save_dir_tmp)
eye_contact_genes <- MultiEWCE::get_gene_list(list_name = "Poor eye contact",
gene_data = gene_data)
cat(paste("5 genes associated with poor eye contact:",paste(eye_contact_genes[seq_len(5)],collapse = ", ")))
eye_contact_genes
all_phenotypes <- unique(gene_data$Phenotype)
unfinished <- MultiEWCE::get_unfinished_list_names(list_names = all_phenotypes,
save_dir = save_dir_tmp)
methods::show(paste(length(unfinished),"/",length(all_phenotypes),
"gene lists not yet analysed"))
source("~/Desktop/ewce/MultiEWCE/R/make_save_path.R", echo=TRUE)
devtools::document()
library(MultiEWCE)
library(MultiEWCE)
gene_data <- HPOExplorer::load_phenotype_to_genes()
print(head(gene_data))
# Loading CTD file
ctd <- load_example_CTD()
list_names <- unique(gene_data$Phenotype)[seq_len(5)]
reps <- 10 # in practice would use more reps
cores <- 1 # in practice would use more cores
save_dir <- tempdir()
save_dir_tmp <- file.path(save_dir,"results")
all_results <- MultiEWCE::gen_results(ctd = ctd,
gene_data = gene_data,
list_names = list_names,
reps = reps,
cores = cores,
save_dir = save_dir,
save_dir_tmp = save_dir_tmp)
library(ggplot2)
library(data.table)
#### Aggregate results ####
n_signif <- all_results[q<=0.05 & !is.na(q), .(sig_enrichments = .N), by="Phenotype"]
#### Plot ####
plot1 <-  ggplot(n_signif, aes(x = stringr::str_wrap(Phenotype,width = 10),
y = sig_enrichments,
fill = sig_enrichments)) +
geom_col() +
labs(x="Phenotype",y="Enrichments (n)") +
theme_bw()
methods::show(plot1)
all_results_2 <- MultiEWCE::merge_results(save_dir = save_dir_tmp)
eye_contact_genes <- MultiEWCE::get_gene_list(list_name = "Poor eye contact",
gene_data = gene_data)
cat(paste("5 genes associated with poor eye contact:",
paste(eye_contact_genes[seq_len(5)],collapse = ", ")))
all_phenotypes <- unique(gene_data$Phenotype)
unfinished <- MultiEWCE::get_unfinished_list_names(list_names = all_phenotypes,
save_dir = save_dir_tmp)
methods::show(paste(length(unfinished),"/",length(all_phenotypes),
"gene lists not yet analysed"))
devtools::check_man()
?EWCE::bootstrap_enrichment_test
devtools::document()
devtools::document()
library(MultiEWCE)
devtools::check_man()
devtools::document()
source("~/Desktop/ewce/MultiEWCE/R/ewce_para.R", echo=TRUE)
devtools::document()
library(MultiEWCE)
devtools::check_man()
usethis::use_test()
usethis::use_test()
gene_data <- HPOExplorer::load_phenotype_to_genes()
ctd <- MultiEWCE::load_example_CTD()
list_names <- unique(gene_data$Phenotype)[seq_len(3)]
#### Return results directly ####
res_files <- ewce_para(ctd = ctd,
gene_data = gene_data,
list_names = list_names,
reps = 10)
test_that("First batch of 5 results were generated", {
expect_equal(length(list.files(resultsdir)), 5)
expect_equal(length(unique(merge_results(resultsdir, list_name_column = "Phenotype")$Phenotype)), 5)
})
res_files
#### Return results directly ####
res_files <- ewce_para(ctd = ctd,
gene_data = gene_data,
list_names = list_names,
reps = 10,
save_dir_tmp = NULL)
res_files
r=res_files[[1]]
for(r in res_files){
testthat::expect_true(all(c("results","hit.cells","bootstrap_data") %in% names(r)))
}
#### Return paths to saved results ####
save_dir_tmp <- file.path(tempdir(),"results")
res_files2 <- ewce_para(ctd = ctd,
gene_data = gene_data,
list_names = list_names,
reps = 10,
save_dir_tmp = save_dir_tmp)
list.files(save_dir_tmp)
files <- list.files(save_dir_tmp, full.names = TRUE)
testthat::expect_equal(length(files), length(list_names))
testthat::expect_true(file.exists(f))
r$results
r$hit.cells
for (f in res_files2) {
testthat::expect_true(file.exists(f))
r2 <- readRDS(f)
testthat::expect_true(all(c("results","hit.cells","bootstrap_data") %in% names(r2)))
}
gene_data <- HPOExplorer::load_phenotype_to_genes()
ctd <- load_example_CTD()
list_names <- unique(gene_data$Phenotype)[seq_len(10)]
all_results <- gen_results(ctd = ctd,
gene_data = gene_data,
list_names = list_names,
reps = 10)
gene_data <- HPOExplorer::load_phenotype_to_genes()
ctd <- load_example_CTD()
list_names <- unique(gene_data$Phenotype)[seq_len(10)]
all_results <- gen_results(ctd = ctd,
gene_data = gene_data,
list_names = list_names,
reps = 10)
templateR:::source_all()
templateR:::args2vars(gen_results)
gene_data <- HPOExplorer::load_phenotype_to_genes()
ctd <- load_example_CTD()
list_names <- unique(gene_data$Phenotype)[seq_len(3)]
#### remove gene lists that do not have enough valid genes (>= 4) ####
list_names <- get_valid_gene_lists(ctd = ctd,
annotLevel = annotLevel,
list_names = list_names,
gene_data = gene_data,
list_name_column = list_name_column,
gene_column = gene_column)
#### Create results directory and remove finished gene lists ####
if (!file.exists(save_dir)) {
dir.create(save_dir, showWarnings = FALSE, recursive = TRUE)
}
if (!overwrite_past_analysis) {
list_names <- get_unfinished_list_names(list_names = list_names,
save_dir_tmp = save_dir_tmp)
}
list_names
list_names
list_name = l
lapply(list_names, function(l){
if (is_not_analysed(list_name = l,
save_dir_tmp = save_dir_tmp)) {
return(l)
} else {
return(NULL)
}
}) |> unlist()
save_dir_tmp
source("~/Desktop/ewce/MultiEWCE/R/get_unfinished_list_names.R", echo=TRUE)
list_names <- get_unfinished_list_names(list_names = list_names,
save_dir_tmp = save_dir_tmp)
list_names
#### Run analysis ####
res_files <- ewce_para(ctd = ctd,
list_names = list_names,
gene_data = gene_data,
list_name_column = list_name_column,
gene_column = gene_column,
bg = bg,
reps = reps,
annotLevel= annotLevel,
genelistSpecies = genelistSpecies,
sctSpecies = sctSpecies,
cores = cores,
save_dir_tmp = save_dir_tmp,
verbose = verbose)
bg = unique(gene_data[[gene_column]])
#### Run analysis ####
res_files <- ewce_para(ctd = ctd,
list_names = list_names,
gene_data = gene_data,
list_name_column = list_name_column,
gene_column = gene_column,
bg = bg,
reps = reps,
annotLevel= annotLevel,
genelistSpecies = genelistSpecies,
sctSpecies = sctSpecies,
cores = cores,
save_dir_tmp = save_dir_tmp,
verbose = verbose)
devtools::document()
library(MultiEWCE)
gene_data <- HPOExplorer::load_phenotype_to_genes()
ctd <- load_example_CTD()
list_names <- unique(gene_data$Phenotype)[seq_len(3)]
all_results <- gen_results(ctd = ctd,
gene_data = gene_data,
list_names = list_names,
reps = 10)
testthat::expect_type(all_results,"data.table")
is(all_results)
testthat::expect_true(methods::is(all_results,"data.table"))
list_names
all_results$Phenotype
testthat::expect_true(all(list_names %in% unique(all_results$Phenotype)))
all_results
all_results[q<=0.05,]
nrow(all_results[q<=0.05,])
testthat::expect_equal(nrow(all_results[q<=0.05,]),56)
#### Tests get_unfinished_list_names ####
unfinished <- get_unfinished_list_names(list_names = list_names,
save_dir_tmp = save_dir_tmp)
#### Return paths to saved results ####
save_dir_tmp <- file.path(tempdir(),"results")
res_files2 <- ewce_para(ctd = ctd,
gene_data = gene_data,
list_names = list_names,
reps = 10,
save_dir_tmp = save_dir_tmp)
#### Tests get_unfinished_list_names ####
unfinished <- get_unfinished_list_names(list_names = list_names,
save_dir_tmp = save_dir_tmp)
unfinished
#### Tests get_unfinished_list_names ####
unfinished <- get_unfinished_list_names(list_names = unique(gene_data$Phenotype),
save_dir_tmp = save_dir_tmp)
unfinished
length(unfinished)
#### Tests get_unfinished_list_names ####
all_phenotypes <- unique(gene_data$Phenotype)
all_phenotypes
testthat::expect_equal(length(unfinished), length(all_phenotypes-list_names))
list_names
testthat::expect_equal(length(unfinished), length(all_phenotypes)-length(list_names))
usethis::use_test()
full_results <- EWCE::example_bootstrap_results()
plt <- MultiEWCE::ewce_plot(total_res = full_results$results)
plt
testthat::expect_true(methods::is(plt$plain,"gg"))
usethis::use_test()
gene_data <- HPOExplorer::load_phenotype_to_genes()
gene_list <- get_gene_list(list_name="Focal non-motor seizure",
gene_data = gene_data)
length(gene_list)
testthat::expect_length(gene_list,69)
res_files2
#### Merge results ####
all_results1 <- merge_results(res_files=res_files)
gene_data <- HPOExplorer::load_phenotype_to_genes()
ctd <- MultiEWCE::load_example_CTD()
list_names <- unique(gene_data$Phenotype)[seq_len(3)]
#### Return results directly ####
res_files <- ewce_para(ctd = ctd,
gene_data = gene_data,
list_names = list_names,
reps = 10,
save_dir_tmp = NULL)
#### Merge results ####
all_results1 <- merge_results(res_files=res_files)
all_results1
all_results2 <- merge_results(res_files=res_files2)
all_results2
testthat::expect_equal(all_results1, all_results2)
#### Return paths to saved results ####
save_dir_tmp <- file.path(tempdir(),"results")
res_files2 <- ewce_para(ctd = ctd,
gene_data = gene_data,
list_names = list_names,
reps = 10,
save_dir_tmp = save_dir_tmp)
files <- list.files(save_dir_tmp, full.names = TRUE)
testthat::expect_equal(length(files), length(list_names))
for (f in res_files2) {
testthat::expect_true(file.exists(f))
r2 <- readRDS(f)
testthat::expect_true(all(c("results","hit.cells","bootstrap_data") %in% names(r2)))
}
#### Tests get_unfinished_list_names ####
all_phenotypes <- unique(gene_data$Phenotype)
unfinished <- get_unfinished_list_names(list_names = all_phenotypes,
save_dir_tmp = save_dir_tmp)
testthat::expect_equal(length(unfinished),
length(all_phenotypes)-length(list_names))
#### Merge results ####
all_results1 <- merge_results(res_files=res_files)
all_results2 <- merge_results(res_files=res_files2)
testthat::expect_equal(all_results1, all_results2)
all_results1
all_results2
data.table::setkey(all_results1,"Celltype")
data.table::setkey(all_results1,"CellType")
data.table::setkey(all_results2,"CellType")
testthat::expect_equal(all_results1, all_results2)
nrow(all_results1)
nrow(all_results2)
source("~/Desktop/ewce/MultiEWCE/tests/testthat/test-ewce_para.R")
sort(unique(all_results1$Phenotype))
testthat::expect_equal(sort(unique(all_results1$Phenotype)),
sort(unique(all_results2$Phenotype)))
testthat::expect_equal(sort(unique(all_results1$CellType)),
sort(unique(all_results2$CellType)))
data.table::setkey(all_results1,"CellType")
data.table::setkey(all_results2,"CellType")
all_results1
all_results2
devtools::document()
library(MultiEWCE)
gene_data <- HPOExplorer::load_phenotype_to_genes()
ctd <- MultiEWCE::load_example_CTD()
list_names <- unique(gene_data$Phenotype)[seq_len(3)]
#### Return results directly ####
res_files <- ewce_para(ctd = ctd,
gene_data = gene_data,
list_names = list_names,
reps = 10,
save_dir_tmp = NULL)
for(r in res_files){
testthat::expect_true(all(c("results","hit.cells","bootstrap_data") %in% names(r)))
}
#### Return paths to saved results ####
save_dir_tmp <- file.path(tempdir(),"results")
res_files2 <- ewce_para(ctd = ctd,
gene_data = gene_data,
list_names = list_names,
reps = 10,
save_dir_tmp = save_dir_tmp)
files <- list.files(save_dir_tmp, full.names = TRUE)
testthat::expect_equal(length(files), length(list_names))
for (f in res_files2) {
testthat::expect_true(file.exists(f))
r2 <- readRDS(f)
testthat::expect_true(all(c("results","hit.cells","bootstrap_data") %in% names(r2)))
}
#### Tests get_unfinished_list_names ####
all_phenotypes <- unique(gene_data$Phenotype)
unfinished <- get_unfinished_list_names(list_names = all_phenotypes,
save_dir_tmp = save_dir_tmp)
testthat::expect_equal(length(unfinished),
length(all_phenotypes)-length(list_names))
#### Merge results ####
## Confirm both methods are identical
all_results1 <- merge_results(res_files=res_files)
all_results2 <- merge_results(res_files=res_files2)
data.table::setkey(all_results1,"CellType")
data.table::setkey(all_results2,"CellType")
testthat::expect_equal(nrow(all_results1),
nrow(all_results2))
testthat::expect_equal(sort(unique(all_results1$Phenotype)),
sort(unique(all_results2$Phenotype)))
testthat::expect_equal(sort(unique(all_results1$CellType)),
sort(unique(all_results2$CellType)))
all.equal(all_results1,all_results2)
testthat::expect_equal(all_results1,all_results2)
## Confirm both methods have the correct phenotyoes
testthat::expect_true(all(list_names %in% all_results1$Phenotype))
testthat::expect_true(all(list_names %in% all_results2$Phenotype))
testthat::expect_true(all(list_names %in% unique(all_results2$Phenotype)))
devtools::document()
library(MultiEWCE)
rworkflows::use_readme()
pkg <- read.dcf("DESCRIPTION", fields = "Package")[1]
title <- read.dcf("DESCRIPTION", fields = "Title")[1]
description <- read.dcf("DESCRIPTION", fields = "Description")[1]
URL <- read.dcf('DESCRIPTION', fields = 'URL')[1]
owner <- tolower(strsplit(URL,"/")[[1]][4])
pkg
description
URL
owner
tolower(strsplit(URL,"/")[[1]]
tolower(strsplit(URL,"/")[[1]])
repo <- tolower(strsplit(URL,"/")[[1]][5])
repo
gene_data <- HPOExplorer::load_phenotype_to_genes()
ctd <- MultiEWCE::load_example_ctd()
list_names <- unique(gene_data$Phenotype)[seq_len(3)]
res_files <- ewce_para(ctd = ctd,
gene_data = gene_data,
list_names = list_names,
reps = 10)
usethis::use_test()
gene_data <- HPOExplorer::load_phenotype_to_genes()
ctd <- load_example_ctd()
list_names <- unique(gene_data$Phenotype)[seq_len(3)]
all_results <- gen_results(ctd = ctd,
gene_data = gene_data,
list_names = list_names,
reps = 10)
testthat::expect_true(methods::is(all_results,"data.table"))
testthat::expect_true(all(list_names %in% unique(all_results$Phenotype)))
testthat::expect_equal(nrow(all_results[q<=0.05,]),56)
source("~/Desktop/ewce/MultiEWCE/tests/testthat/test-gen_results.R", echo=TRUE)
testthat::expect_equal(nrow(all_results[q<=0.05,]),57)
devtools::document()
