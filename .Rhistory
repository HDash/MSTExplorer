unique(vertex_vars))
##### Remove Phenotypes that are also ancestor #####
if("ancestor_name" %in% names(top_targets)){
top_targets <- top_targets[Phenotype!=ancestor_name,]
}
#### Make vertex metadata ####
vertices <- (
data.table::melt.data.table(
top_targets[,c(vertex_vars,group_var),with=FALSE],
id.vars = group_var,
measure.vars = vertex_vars,
variable.name = "node_type",
value.name = "node") |>
rev() |> unique()
)[,shape:=shape_dict[node_type]][,color:=color_dict[node_type]] |>
data.table::setkeyv(cols = "node")
#### ancestor_name is only relevant metadata for Phenotype nodes ####
vertices[node_type!="Phenotype",]$ancestor_name <- NA
vertices <- unique(vertices)
#### Merge graphs ####
if(!is.null(mediator_var)){
subgraphs <- lapply(vertex_vars[vertex_vars!=mediator_var], function(v){
vv <- c(v,mediator_var)
dt <- unique(
top_targets[,c(vv,c(edge_color_var,edge_size_var)),
with=FALSE][,fold_change:=mean(fold_change), by=vv]
)
igraph::graph_from_data_frame(dt)
})
} else{
subgraphs <- lapply(seq_len(length(vertex_vars)-1), function(i){
vv <- vertex_vars[c(i,i+1)]
dt <- unique(
top_targets[,c(vv,c(edge_color_var,edge_size_var)),
with=FALSE][,fold_change:=mean(fold_change), by=vv]
)
igraph::graph_from_data_frame(dt)
})
}
g <- do.call(igraph::union, subgraphs)
paste0("edge",seq_len(length(igraph::E(g))))
#### Name edges ####
igraph::edge_attr(g,"id") <- paste0("edge",seq_len(length(igraph::E(g))))
#### Name edges ####
# igraph::edge_attr(g,"id") <- paste0("edge",seq_len(length(igraph::E(g))))
#### Add nodes metadata ####
for(x in names(vertices)){
igraph::vertex_attr(g,x) <- as.character(
vertices[names(igraph::V(g))][[x]]
)
}
as.character(
vertices[names(igraph::V(g))][[x]]
)
x
if(group_var %in% names(vertices)){
igraph::vertex_attr(g,"group") <- vertices[names(igraph::V(g))][[group_var]]
}
#### Add hoverdata ####
igraph::vertex_attr(g,"title") <- lapply(seq_len(length(g)), function(i){
nms <- igraph::vertex_attr_names(g)
nms <- nms[!nms %in% c('shape','color','value','name')]
lapply(nms, function(nm){
value <- igraph::vertex_attr(g,nm)[i]
if(!is.na(value)) {
paste0("<strong>",nm,"</strong>: ",value)
} else {
""
}
}) |>
paste(collapse = "<br>") |>
gsub(pattern="<br><br>",replacement="<br>")
}) |> unlist()
#          seed_nodes <- vertices[get(group_var)==group,]$node
#          # g2 <- igraph::induced_subgraph(graph = g, vids = group_nodes)
#          adj_nodes <- igraph::adjacent_vertices(graph = g,
#                                                 v = seed_nodes,
#                                                 mode = "all")
#          igraph::edge_attr(g)$id
#          group_nodes <- unique(c(seed_nodes,
#                                  unname(unlist(lapply(adj_nodes, names)))))
#
#        })
igraph::vertex_attr(g,"name") <- stringr::str_wrap(
vertices[names(igraph::V(g))][["node"]],
width = 10)
#### Add edge color ####
# edge_color <- igraph::edge_attr(g)[grep(edge_color_var,igraph::edge_attr_names(g), value = TRUE)] |>
#   data.table::as.data.table() |>
#   data.table::fcoalesce()
# edge_color_dict <- stats::setNames(
#   pals::alphabet(length(unique(vertices[[group_var]]))),
#   unique(vertices[[group_var]]))
# igraph::edge_attr(g,"color") <- edge_color_dict[edge_color]
#### Add edge size ####
edge_size <- igraph::edge_attr(g)[grep(edge_size_var,igraph::edge_attr_names(g), value = TRUE)] |>
data.table::as.data.table() |>
data.table::fcoalesce()
edge_size
igraph::edge_attr(g,"width")
g <- do.call(igraph::graph.union, subgraphs)
igraph::graph.union(subgraphs)
g <- do.call(igraph::graph.union, subgraphs)
g
subgraphs
g <- igraph::graph.union(subgraphs,byname = TRUE)
g
g <- igraph::graph.union(subgraphs,byname = FALSE)
g
?graph.union
g <- igraph::graph.union(subgraphs,byname = TRUE)
g
subgraphs <- lapply(vertex_vars[vertex_vars!=mediator_var], function(v){
vv <- c(v,mediator_var)
dt <- unique(
top_targets[,vv,with=FALSE]
)
igraph::graph_from_data_frame(dt)
})
g <- igraph::graph.union(subgraphs,byname = TRUE)
g
vertex_vars
g <- do.call(igraph::graph.union, subgraphs)
g
g <- union(subgraphs,byname = TRUE)
g <- igraph::graph.union(subgraphs,byname = TRUE)
g
top_targets[,c(vv,c(edge_color_var,edge_size_var))
#### Name edges ####
# igraph::edge_attr(g,"id") <- paste0("edge",seq_len(length(igraph::E(g))))
#### Add nodes metadata ####
for(x in names(vertices)){
top_targets[,c(edge_color_var,edge_size_var))
c(edge_color_var,edge_size_var)
top_targets[,c(edge_color_var,edge_size_var)]
top_targets[,list(edge_color_var,edge_size_var)]
top_targets[,.(c(edge_color_var,edge_size_var))]
top_targets[,c(edge_color_var,edge_size_var), with=FALSE]
vertex_vars
top_targets[,c(vertex_vars,edge_color_var,edge_size_var), with=FALSE]
#### Name edges ####
# igraph::edge_attr(g,"id") <- paste0("edge",seq_len(length(igraph::E(g))))
#### Add nodes metadata ####
for(x in names(vertices)){
igraph::vertex_attr(g,x) <- as.character(
vertices[names(igraph::V(g))][[x]]
)
}
if(group_var %in% names(vertices)){
igraph::vertex_attr(g,"group") <- vertices[names(igraph::V(g))][[group_var]]
}
#### Add hoverdata ####
igraph::vertex_attr(g,"title") <- lapply(seq_len(length(g)), function(i){
nms <- igraph::vertex_attr_names(g)
nms <- nms[!nms %in% c('shape','color','value','name')]
lapply(nms, function(nm){
value <- igraph::vertex_attr(g,nm)[i]
if(!is.na(value)) {
paste0("<strong>",nm,"</strong>: ",value)
} else {
""
}
}) |>
paste(collapse = "<br>") |>
gsub(pattern="<br><br>",replacement="<br>")
}) |> unlist()
#          seed_nodes <- vertices[get(group_var)==group,]$node
#          # g2 <- igraph::induced_subgraph(graph = g, vids = group_nodes)
#          adj_nodes <- igraph::adjacent_vertices(graph = g,
#                                                 v = seed_nodes,
#                                                 mode = "all")
#          igraph::edge_attr(g)$id
#          group_nodes <- unique(c(seed_nodes,
#                                  unname(unlist(lapply(adj_nodes, names)))))
#
#        })
igraph::vertex_attr(g,"name") <- stringr::str_wrap(
vertices[names(igraph::V(g))][["node"]],
width = 10)
#### Add edge color ####
# edge_color <- igraph::edge_attr(g)[grep(edge_color_var,igraph::edge_attr_names(g), value = TRUE)] |>
#   data.table::as.data.table() |>
#   data.table::fcoalesce()
# edge_color_dict <- stats::setNames(
#   pals::alphabet(length(unique(vertices[[group_var]]))),
#   unique(vertices[[group_var]]))
# igraph::edge_attr(g,"color") <- edge_color_dict[edge_color]
#### Add edge size ####
edge_size <- igraph::edge_attr(g)[grep(edge_size_var,igraph::edge_attr_names(g), value = TRUE)] |>
data.table::as.data.table() |>
data.table::fcoalesce()
edge_size
#   data.table::as.data.table() |>
#   data.table::fcoalesce()
# edge_color_dict <- stats::setNames(
#   pals::alphabet(length(unique(vertices[[group_var]]))),
#   unique(vertices[[group_var]]))
# igraph::edge_attr(g,"color") <- edge_color_dict[edge_color]
#### Add edge size ####
# edge_size <- igraph::edge_attr(g)[grep(edge_size_var,igraph::edge_attr_names(g), value = TRUE)] |>
#   data.table::as.data.table() |>
#   data.table::fcoalesce()
top_targets[,c(vertex_vars,edge_color_var,edge_size_var), with=FALSE]
#   data.table::as.data.table() |>
#   data.table::fcoalesce()
# edge_color_dict <- stats::setNames(
#   pals::alphabet(length(unique(vertices[[group_var]]))),
#   unique(vertices[[group_var]]))
# igraph::edge_attr(g,"color") <- edge_color_dict[edge_color]
#### Add edge size ####
# edge_size <- igraph::edge_attr(g)[grep(edge_size_var,igraph::edge_attr_names(g), value = TRUE)] |>
#   data.table::as.data.table() |>
#   data.table::fcoalesce()
cols <- c(edge_color_var,edge_size_var)
top_targets[,c(vertex_vars,edge_color_var,edge_size_var), with=FALSE][,,(cols):=lapply(.SD,mean),.SDcols]
top_targets[,c(vertex_vars,edge_color_var,edge_size_var), with=FALSE][,(cols):=lapply(.SD,mean),.SDcols=cols]
top_targets[,c(vertex_vars,edge_color_var,edge_size_var), with=FALSE]
top_targets[,c(vertex_vars,edge_color_var,edge_size_var), with=FALSE][,(cols):=lapply(.SD,mean),.SDcols=cols,by="Phenotype"]
top_targets[,c(vertex_vars,edge_color_var,edge_size_var), with=FALSE][,(cols):=lapply(.SD,mean),.SDcols=cols,by="Phenotype"]
top_targets[,(cols):=lapply(.SD,mean),.SDcols=cols,by="Phenotype"]
cols
top_targets[,c(vertex_vars,edge_color_var,edge_size_var), with=FALSE][,(cols):=lapply(.SD,mean),.SDcols=cols,by=c("Phenotype")]
cols
edge_color_var
#   data.table::as.data.table() |>
#   data.table::fcoalesce()
# edge_color_dict <- stats::setNames(
#   pals::alphabet(length(unique(vertices[[group_var]]))),
#   unique(vertices[[group_var]]))
# igraph::edge_attr(g,"color") <- edge_color_dict[edge_color]
#### Add edge size ####
# edge_size <- igraph::edge_attr(g)[grep(edge_size_var,igraph::edge_attr_names(g), value = TRUE)] |>
#   data.table::as.data.table() |>
#   data.table::fcoalesce()
cols <- c(edge_size_var)
top_targets[,c(vertex_vars,edge_color_var,edge_size_var), with=FALSE][,(cols):=lapply(.SD,mean),.SDcols=cols,by=c("Phenotype")]
top_targets
vertices
g
group_var
vertex_vars
edge_size
vertices
source("~/Desktop/ewce/MultiEWCE/R/targets_to_graph.R", echo=TRUE)
g2 <- ggnetwork::ggnetwork(g)
g2
g2$node_type
gp <- ggplot2::ggplot(g2,
ggplot2::aes(x=x, y=y,
xend = xend, yend = yend,
shape = node_type,
fill = node_type,
label = name)) +
ggnetwork::geom_edges(ggplot2::aes(color = group),
curvature = 0.1,
linewidth=0.4, alpha=0.25,
color = "grey50") +
ggplot2::scale_fill_viridis_d(option = "magma",begin = .4) +
ggnetwork::geom_nodes(size=10) +
# ggnetwork::geom_nodelabel(size=2, alpha=.8) +
ggnetwork::geom_nodetext(size=2, alpha=.8) +
ggnetwork::theme_blank()
methods::show(gp)
plotly::ggplotly(gp)
shape_dict
gp <- ggplot2::ggplot(g2,
ggplot2::aes(x=x, y=y,
xend = xend, yend = yend,
shape = node_type,
fill = node_type,
label = name)) +
ggnetwork::geom_edges(ggplot2::aes(color = group),
curvature = 0.1,
linewidth=0.4, alpha=0.25,
color = "grey50") +
ggplot2::scale_fill_viridis_d(option = "magma",begin = .4) +
ggplot2::scale_shape_manual(values = shape_dict)
gp <- ggplot2::ggplot(g2,
ggplot2::aes(x=x, y=y,
xend = xend, yend = yend,
shape = node_type,
fill = node_type,
label = name)) +
ggnetwork::geom_edges(ggplot2::aes(color = group),
curvature = 0.1,
linewidth=0.4, alpha=0.25,
color = "grey50") +
ggplot2::scale_fill_viridis_d(option = "magma",begin = .4) +
ggplot2::scale_shape_manual(values = shape_dict) +
ggnetwork::geom_nodes(size=10) +
# ggnetwork::geom_nodelabel(size=2, alpha=.8) +
ggnetwork::geom_nodetext(size=2, alpha=.8) +
ggnetwork::theme_blank()
methods::show(gp)
shape_dict
g2$shape
gp <- ggplot2::ggplot(g2,
ggplot2::aes(x=x, y=y,
xend = xend, yend = yend,
shape = node_type,
fill = node_type,
label = name)) +
ggnetwork::geom_edges(ggplot2::aes(color = group),
curvature = 0.1,
linewidth=0.4, alpha=0.25,
color = "grey50") +
ggplot2::scale_fill_viridis_d(option = "magma",begin = .4) +
# ggplot2::scale_shape_manual(values = shape_dict) +
ggnetwork::geom_nodes(size=10) +
# ggnetwork::geom_nodelabel(size=2, alpha=.8) +
ggnetwork::geom_nodetext(size=2, alpha=.8) +
ggnetwork::theme_blank()
methods::show(gp)
plotly::ggplotly(gp)
gp <- ggplot2::ggplot(g2,
ggplot2::aes(x=x, y=y,
xend = xend, yend = yend,
shape = node_type,
fill = node_type,
label = name)) +
ggnetwork::geom_edges(ggplot2::aes(color = group),
curvature = 0.1,
alpha=0.25,
color = "grey50") +
ggplot2::scale_fill_viridis_d(option = "magma",begin = .4) +
# ggplot2::scale_shape_manual(values = shape_dict) +
ggnetwork::geom_nodes(size=10) +
# ggnetwork::geom_nodelabel(size=2, alpha=.8) +
ggnetwork::geom_nodetext(size=2, alpha=.8) +
ggnetwork::theme_blank()
methods::show(gp)
plotly::ggplotly(gp)
install.packages("RCy3")
BiocManager::install("RCy3")
BiocManager::install("RCy3")
library(RCy3)
RCy3::createNetworkFromIgraph(g)
?RCy3::createNetworkFromIgraph(g)
RCy3::createNetworkFromIgraph(g)
igraph::V(g)
data.frame(igraph::V(g))
hapes <- c("database","circle","box")
if("ancestor_name" %in% vertex_vars && length(vertex_vars)==4){
shapes <- c("database",shapes)
}
shape_dict <- stats::setNames(
shapes,
unique(vertex_vars))
v
hapes <- c("database","circle","box")
if("ancestor_name" %in% vertex_vars && length(vertex_vars)==4){
shapes <- c("database",shapes)
}
shape_dict <- stats::setNames(
shapes,
unique(vertex_vars))
library(igraph)
ig <- makeSimpleIgraph()
createNetworkFromIgraph(ig)
cytoscapePing ()
cytoscapePing ()
cytoscapeVersionInfo ()
RCy3::createNetworkFromIgraph(g)
res$top_targets
RCy3::importNetworkFromFile(res$top_targets)
BiocManager::install("RCytoscape")
BiocManager::install("NetPathMiner")
library(NetPathMiner)
NetPathMiner::plotCytoscapeGML(g)
NetPathMiner::plotCytoscapeGML(g, file = tempfile())
NetPathMiner::plotNetwork(g)
igraph::vertex.attributes(g,"shape")=NULL
igraph::remove.vertex.attribute(g,"shape")
g=igraph::remove.vertex.attribute(g,"shape")
NetPathMiner::plotNetwork(g)
NetPathMiner::plotCytoscapeGML(g)
NetPathMiner::plotCytoscapeGML(g, tempfile())
NetPathMiner::makeReactionNetwork(g)
NetPathMiner::makeGeneNetwork(g)
network::plot.network(g)
networkD3::igraph_to_networkD3(g)
networkD3::renderchordNetwork(networkD3::igraph_to_networkD3(g))
networkD3::chordNetwork(networkD3::igraph_to_networkD3(g))
networkD3::forceNetwork(networkD3::igraph_to_networkD3(g))
networkD3::sankeyNetwork(networkD3::igraph_to_networkD3(g))
networkD3::simpleNetwork(networkD3::igraph_to_networkD3(g))
networkD3::igraph_to_networkD3(g)
is(networkD3::igraph_to_networkD3(g))
g2=networkD3::igraph_to_networkD3(g)
networkD3::forceNetwork(Links = g2$links, Nodes = g2$nodes)
networkD3::forceNetwork(Links = g2$links, Nodes = g2$nodes, NodeID = g2$nodes$name)
gene_data <- HPOExplorer::load_phenotype_to_genes()
ctd <- MultiEWCE::load_example_ctd()
list_names <- unique(gene_data$Phenotype)[seq_len(3)]
#### Return results directly ####
res_files <- ewce_para(ctd = ctd,
gene_data = gene_data,
list_names = list_names,
reps = 10,
save_dir_tmp = NULL)
res_files
for(r in res_files){
testthat::expect_true(all(c("results","hit.cells","bootstrap_data") %in% names(r)))
}
gene_data <- HPOExplorer::load_phenotype_to_genes()
ctd <- MultiEWCE::load_example_ctd()
list_names <- unique(gene_data$Phenotype)[seq_len(3)]
#### Return results directly ####
res_files <- ewce_para(ctd = ctd,
gene_data = gene_data,
list_names = list_names,
reps = 10,
save_dir_tmp = NULL)
for(r in res_files){
testthat::expect_true(all(c("results","hit.cells","bootstrap_data") %in% names(r)))
}
#### Return paths to saved results ####
save_dir_tmp <- file.path(tempdir(),"results")
res_files2 <- ewce_para(ctd = ctd,
gene_data = gene_data,
list_names = list_names,
reps = 10,
save_dir_tmp = save_dir_tmp)
files <- list.files(save_dir_tmp, full.names = TRUE)
testthat::expect_lte(length(files), length(list_names))
for (f in res_files2) {
testthat::expect_true(file.exists(f))
r2 <- readRDS(f)
testthat::expect_true(all(c("results","hit.cells","bootstrap_data") %in% names(r2)))
}
#### Tests get_unfinished_list_names ####
all_phenotypes <- unique(gene_data$Phenotype)
unfinished <- get_unfinished_list_names(list_names = all_phenotypes,
save_dir_tmp = save_dir_tmp)
testthat::expect_equal(length(unfinished),
length(all_phenotypes)-length(list_names))
testthat::expect_lte(length(files), length(list_names))
length(files)
length(list_names)
#### Tests get_unfinished_list_names ####
all_phenotypes <- unique(gene_data$Phenotype)
unfinished <- get_unfinished_list_names(list_names = all_phenotypes,
save_dir_tmp = save_dir_tmp)
testthat::expect_equal(length(unfinished),
length(all_phenotypes)-length(list_names))
#### Tests get_unfinished_list_names ####
all_phenotypes <- unique(gene_data$Phenotype)
unfinished <- get_unfinished_list_names(list_names = all_phenotypes,
save_dir_tmp = save_dir_tmp)
testthat::expect_lte(length(unfinished),
length(all_phenotypes)-length(list_names))
#### Merge results ####
all_results1 <- merge_results(res_files=res_files)
all_results2 <- merge_results(res_files=res_files2)
## Confirm both methods have the correct phenotyoes
testthat::expect_true(all(list_names %in% unique(all_results1$Phenotype)))
## Confirm both methods have the correct phenotyoes
testthat::expect_gte(sum(list_names %in% unique(all_results1$Phenotype)),
length(list_names)-1)
testthat::expect_gte(sum(list_names %in% unique(all_results2$Phenotype)),
length(list_names)-1)
## Confirm both methods are identical
data.table::setkey(all_results1,"CellType")
## Confirm both methods are identical
data.table::setkey(all_results1,"CellType")
data.table::setkey(all_results2,"CellType")
testthat::expect_equal(nrow(all_results1),
nrow(all_results2))
testthat::expect_equal(sort(unique(all_results1$Phenotype)),
sort(unique(all_results2$Phenotype)))
testthat::expect_equal(sort(unique(all_results1$CellType)),
sort(unique(all_results2$CellType)))
gene_data <- HPOExplorer::load_phenotype_to_genes()
ctd <- load_example_ctd()
list_names <- unique(gene_data$Phenotype)[seq_len(3)]
all_results <- gen_results(ctd = ctd,
gene_data = gene_data,
list_names = list_names,
reps = 10)
gene_data <- HPOExplorer::load_phenotype_to_genes()
ctd <- load_example_ctd()
list_names <- unique(gene_data$Phenotype)[seq_len(3)]
all_results <- gen_results(ctd = ctd,
gene_data = gene_data,
list_names = list_names,
reps = 10)
testthat::expect_true(methods::is(all_results,"data.table"))
testthat::expect_gte(sum(list_names %in% unique(all_results$Phenotype)),
length(list_names)-1)
testthat::expect_gte(nrow(all_results[q<=0.05,]),10)
test_that("gen_results works", {
set.seed(2023)
gene_data <- HPOExplorer::load_phenotype_to_genes()
ctd <- load_example_ctd()
list_names <- unique(gene_data$Phenotype)[seq_len(3)]
all_results <- gen_results(ctd = ctd,
gene_data = gene_data,
list_names = list_names,
reps = 10)
testthat::expect_true(methods::is(all_results,"data.table"))
testthat::expect_gte(sum(list_names %in% unique(all_results$Phenotype)),
length(list_names)-1)
testthat::expect_gte(nrow(all_results[q<=0.05,]),10)
})
res1 <- load_example_results("Descartes_All_Results_extras.rds")
testthat::expect_true(nrow(res1), 475321)
nrow(res1)
res1 <- load_example_results("Descartes_All_Results_extras.rds")
testthat::expect_equal(nrow(res1), 475321)
res2 <- load_example_results("tabulamuris_merged.rds")
testthat::expect_equal(nrow(res2), 213028)
devtools::document()
