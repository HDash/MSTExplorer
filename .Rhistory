top_targets[,c(vv,edge_var), with=FALSE][,fold_change:=mean(fold_change),
by=vv]
)
igraph::graph_from_data_frame(dt)
})
g <- do.call(igraph::union, subgraphs)
g
plot(g)
#### Add nodes metadata ####
for(x in names(vertices)){
igraph::vertex_attr(g,x) <- as.character(
vertices[names(igraph::V(g))][[x]]
)
}
names(igraph::V(g))
vertices[names(igraph::V(g))][[x]]
length(vertices[names(igraph::V(g))][[x]])
g
vertices[names(igraph::V(g)),][[x]]
length(vertices[names(igraph::V(g)),][[x]])
g
names(igraph::V(g))
nrow(vertices)
unique(vertices)
vertices[names(igraph::V(g)),by="node"][[x]]
igraph::vertex_attr(g,x) <- as.character(
vertices[names(igraph::V(g)),,by="node"][[x]]
)
vertices[names(igraph::V(g)),,by="node"]
vertices[names(igraph::V(g)),,by=c("node")]
vertices[names(igraph::V(g)),,by=.("node")
vertices[names(igraph::V(g)),,by=.("node")]
vertices[names(igraph::V(g)),,by=.("node")]
top_targets[Phenotype!=ancestor_name]
##### Remove Phenotypes that are also ancestor #####
if("ancestor_name" %in% names(top_targets)){
top_targets <- top_targets[Phenotype!=ancestor_name,]
}
##### Remove Phenotypes that are also ancestor #####
if("ancestor_name" %in% names(top_targets)){
top_targets <- top_targets[Phenotype!=ancestor_name,]
}
#### Make vertex metadata ####
vertices <- (
data.table::melt.data.table(
top_targets[,unique(c(vertex_vars,group_var)),with=FALSE],
measure.vars = vertex_vars,
variable.name = "node_type",
value.name = "node") |>
rev() |> unique()
)[,shape:=shape_dict[node_type]][,color:=color_dict[node_type]] |>
data.table::setkeyv(cols = "node")
#### Merge graphs ####
subgraphs <- lapply(seq_len(length(vertex_vars)-1), function(i){
vv <- vertex_vars[c(i,i+1)]
dt <- unique(
top_targets[,c(vv,edge_var), with=FALSE][,fold_change:=mean(fold_change),
by=vv]
)
igraph::graph_from_data_frame(dt)
})
g <- do.call(igraph::union, subgraphs)
#### Add nodes metadata ####
for(x in names(vertices)){
igraph::vertex_attr(g,x) <- as.character(
vertices[names(igraph::V(g))][[x]]
)
}
if(group_var %in% names(vertices)){
igraph::vertex_attr(g,"group") <- vertices[names(igraph::V(g))][[group_var]]
}
igraph::vertex_attr(g,"name") <- stringr::str_wrap(
vertices[names(igraph::V(g))][["node"]],
width = 10)
#### Add edge metadata ####
edge_data <- igraph::edge_attr(g) |>
data.table::as.data.table() |>
data.table::fcoalesce()
for(e in grep(edge_var,igraph::edge_attr_names(g), value = TRUE)){
g <- igraph::remove.edge.attribute(g, e)
}
for(e in c(edge_var,"width","color")){
igraph::edge_attr(g,e) <- edge_data
}
# igraph::vertex.attributes(g)
# igraph::edge.attributes(g)
# visNetwork::visNetwork(g)
return(g)
visNetwork::visNetwork(g)
vertices
vertices[names(igraph::V(g))][[x]]
vertices
unique(vertices$node_type)
shapes
shape_dict
shape_dict <- stats::setNames(
shapes,
unique(vertex_vars))
color_dict <- stats::setNames(
pals::ocean.thermal(length(unique(vertex_vars))+2)[-1],
unique(vertex_vars))
color_dict
unique(vertex_vars)
pals::ocean.thermal(length(unique(vertex_vars))+2)[-1]
##### Remove Phenotypes that are also ancestor #####
if("ancestor_name" %in% names(top_targets)){
top_targets <- top_targets[Phenotype!=ancestor_name,]
}
top_targets
unique(c(vertex_vars,group_var))
vertex_vars
#### Make vertex metadata ####
vertices <- (
data.table::melt.data.table(
top_targets[,vertex_vars,with=FALSE],
measure.vars = vertex_vars,
variable.name = "node_type",
value.name = "node") |>
rev() |> unique()
)[,shape:=shape_dict[node_type]][,color:=color_dict[node_type]] |>
data.table::setkeyv(cols = "node")
vertices
vertices
seq_len(length(vertex_vars)-1)
vertex_vars
#### Merge graphs ####
subgraphs <- lapply(seq_len(length(vertex_vars)-1), function(i){
vv <- vertex_vars[c(i,i+1)]
dt <- unique(
top_targets[,c(vv,edge_var), with=FALSE][,fold_change:=mean(fold_change),
by=vv]
)
igraph::graph_from_data_frame(dt)
})
g <- do.call(igraph::union, subgraphs)
g
names(vertices)
vertices[names(igraph::V(g))][[x]]
#### Add nodes metadata ####
for(x in names(vertices)){
igraph::vertex_attr(g,x) <- as.character(
vertices[names(igraph::V(g))][[x]]
)
}
vertices[names(igraph::V(g))][[group_var]]
vertices[names(igraph::V(g))][[group_var]]
vertices
group_var %in% names(vertices)
if(group_var %in% names(vertices)){
igraph::vertex_attr(g,"group") <- vertices[names(igraph::V(g))][[group_var]]
}
stringr::str_wrap(
vertices[names(igraph::V(g))][["node"]],
width = 10)
igraph::vertex_attr(g,"name") <- stringr::str_wrap(
vertices[names(igraph::V(g))][["node"]],
width = 10)
#### Add edge metadata ####
edge_data <- igraph::edge_attr(g) |>
data.table::as.data.table() |>
data.table::fcoalesce()
for(e in grep(edge_var,igraph::edge_attr_names(g), value = TRUE)){
g <- igraph::remove.edge.attribute(g, e)
}
edge_data
for(e in grep(edge_var,igraph::edge_attr_names(g), value = TRUE)){
g <- igraph::remove.edge.attribute(g, e)
}
for(e in c(edge_var,"width","color")){
igraph::edge_attr(g,e) <- edge_data
}
g
plot(g)
visNetwork::visIgraph(g)
source("~/Desktop/ewce/MultiEWCE/R/targets_to_graph.R", echo=TRUE)
#### Network ####
g <- targets_to_graph(top_targets = top_targets,
vertex_vars = c(group_var,vertex_vars),
group_var = group_var,
edge_var = edge_var,
verbose = verbose)
#### Plot ####
messager("Creating plot.",v=verbose)
visnet <- visNetwork::visIgraph(g, randomSeed = randomSeed) |>
visNetwork::visIgraphLayout(layout = layout) |>
visNetwork::visNodes(font = list(color="#F0FFFF",
strokeWidth=2,
strokeColor="rgba(0,0,0,0.8)"
),
shadow = list("enabled"=TRUE),
opacity = 0.9) |>
visNetwork::visEdges(shadow = list("enabled"=FALSE),
color = list(opacity = 0.9)) |>
visNetwork::visLegend() |>
# visNetwork::visGroups(groupname = unique(igraph::vertex_attr(g,"group"))[[1]],
#                       color="brown")
# visNetwork::visClusteringByGroup(groups = igraph::vertex_attr(g,"group"))
visNetwork::visExport(type = "pdf")
visnet
devtools::document()
library(MultiEWCE)
all_targets <- prioritise_targets(keep_tiers = NULL)
vn2 <- prioritise_targets_network(top_targets = all_targets)
testthat::expect_true(methods::is(vn2$plot,"visNetwork"))
testthat::expect_true(methods::is(vn2$graph,"igraph"))
templateR:::source_all()
templateR:::args2vars(prioritise_targets_network)
#### Network ####
g <- targets_to_graph(top_targets = top_targets,
vertex_vars = c(group_var,vertex_vars),
group_var = group_var,
edge_var = edge_var,
verbose = verbose)
top_targets <- prioritise_targets()
vn <- prioritise_targets_network(top_targets = top_targets)
?visEdges
visnet <- visNetwork::visIgraph(g, randomSeed = randomSeed) |>
visNetwork::visIgraphLayout(layout = layout) |>
visNetwork::visNodes(font = list(color="#F0FFFF",
strokeWidth=2,
strokeColor="rgba(0,0,0,0.8)"
),
shadow = list("enabled"=TRUE),
opacity = 0.9) |>
visNetwork::visEdges(shadow = list("enabled"=FALSE),
smooth = list("enabled"=TRUE,
type="cubicBezier")
color = list(opacity = 0.9)) |>
visnet <- visNetwork::visIgraph(g, randomSeed = randomSeed) |>
visNetwork::visIgraphLayout(layout = layout) |>
visNetwork::visNodes(font = list(color="#F0FFFF",
strokeWidth=2,
strokeColor="rgba(0,0,0,0.8)"
),
shadow = list("enabled"=TRUE),
opacity = 0.9) |>
visNetwork::visEdges(shadow = list("enabled"=FALSE),
smooth = list("enabled"=TRUE,
type="cubicBezier"),
color = list(opacity = 0.9)) |>
visNetwork::visLegend() |>
# visNetwork::visGroups(groupname = unique(igraph::vertex_attr(g,"group"))[[1]],
#                       color="brown")
# visNetwork::visClusteringByGroup(groups = igraph::vertex_attr(g,"group"))
visNetwork::visExport(type = "pdf")
#### Network ####
g <- targets_to_graph(top_targets = top_targets,
vertex_vars = c(group_var,vertex_vars),
group_var = group_var,
edge_var = edge_var,
verbose = verbose)
#### Plot ####
messager("Creating plot.",v=verbose)
visnet <- visNetwork::visIgraph(g, randomSeed = randomSeed) |>
visNetwork::visIgraphLayout(layout = layout) |>
visNetwork::visNodes(font = list(color="#F0FFFF",
strokeWidth=2,
strokeColor="rgba(0,0,0,0.8)"
),
shadow = list("enabled"=TRUE),
opacity = 0.9) |>
visNetwork::visEdges(shadow = list("enabled"=FALSE),
smooth = list("enabled"=TRUE,
type="cubicBezier"),
color = list(opacity = 0.9)) |>
visNetwork::visLegend() |>
# visNetwork::visGroups(groupname = unique(igraph::vertex_attr(g,"group"))[[1]],
#                       color="brown")
# visNetwork::visClusteringByGroup(groups = igraph::vertex_attr(g,"group"))
visNetwork::visExport(type = "pdf")
visnet
visnet <- visNetwork::visIgraph(g, randomSeed = randomSeed) |>
visNetwork::visIgraphLayout(layout = layout) |>
visNetwork::visNodes(font = list(color="#F0FFFF",
strokeWidth=2,
strokeColor="rgba(0,0,0,0.8)"
),
shadow = list("enabled"=TRUE),
opacity = 0.9) |>
visNetwork::visEdges(shadow = list("enabled"=FALSE),
smooth = list("enabled"=TRUE,
type="cubicBezier",
roundness=1),
color = list(opacity = 0.9)) |>
visNetwork::visLegend() |>
# visNetwork::visGroups(groupname = unique(igraph::vertex_attr(g,"group"))[[1]],
#                       color="brown")
# visNetwork::visClusteringByGroup(groups = igraph::vertex_attr(g,"group"))
visNetwork::visExport(type = "pdf")
visnet
visnet <- visNetwork::visIgraph(g, randomSeed = randomSeed) |>
visNetwork::visIgraphLayout(layout = layout) |>
visNetwork::visNodes(font = list(color="#F0FFFF",
strokeWidth=2,
strokeColor="rgba(0,0,0,0.8)"
),
shadow = list("enabled"=TRUE),
opacity = 0.9) |>
visNetwork::visEdges(shadow = list("enabled"=FALSE),
smooth = list("enabled"=TRUE,
type="continuous",
roundness=.5),
color = list(opacity = 0.9)) |>
visNetwork::visLegend() |>
# visNetwork::visGroups(groupname = unique(igraph::vertex_attr(g,"group"))[[1]],
#                       color="brown")
# visNetwork::visClusteringByGroup(groups = igraph::vertex_attr(g,"group"))
visNetwork::visExport(type = "pdf")
visnet
visnet <- visNetwork::visIgraph(g, randomSeed = randomSeed) |>
visNetwork::visIgraphLayout(layout = layout) |>
visNetwork::visNodes(font = list(color="#F0FFFF",
strokeWidth=2,
strokeColor="rgba(0,0,0,0.8)"
),
shadow = list("enabled"=TRUE),
opacity = 0.9) |>
visNetwork::visEdges(shadow = list("enabled"=FALSE),
smooth = list("enabled"=TRUE,
type="continuous",
roundness=.8),
color = list(opacity = 0.9)) |>
visNetwork::visLegend() |>
# visNetwork::visGroups(groupname = unique(igraph::vertex_attr(g,"group"))[[1]],
#                       color="brown")
# visNetwork::visClusteringByGroup(groups = igraph::vertex_attr(g,"group"))
visNetwork::visExport(type = "pdf")
visnet
visnet <- visNetwork::visIgraph(g, randomSeed = randomSeed) |>
visNetwork::visIgraphLayout(layout = layout) |>
visNetwork::visNodes(font = list(color="#F0FFFF",
strokeWidth=2,
strokeColor="rgba(0,0,0,0.8)"
),
shadow = list("enabled"=TRUE),
opacity = 0.9) |>
visNetwork::visEdges(shadow = list("enabled"=FALSE),
smooth = list("enabled"=TRUE,
type="continuous",
roundness=1),
color = list(opacity = 0.9)) |>
visNetwork::visLegend() |>
# visNetwork::visGroups(groupname = unique(igraph::vertex_attr(g,"group"))[[1]],
#                       color="brown")
# visNetwork::visClusteringByGroup(groups = igraph::vertex_attr(g,"group"))
visNetwork::visExport(type = "pdf")
visnet
visnet <- visNetwork::visIgraph(g, randomSeed = randomSeed) |>
visNetwork::visIgraphLayout(layout = layout) |>
visNetwork::visNodes(font = list(color="#F0FFFF",
strokeWidth=2,
strokeColor="rgba(0,0,0,0.8)"
),
shadow = list("enabled"=TRUE),
opacity = 0.9) |>
visNetwork::visEdges(shadow = list("enabled"=FALSE),
smooth = list("enabled"=TRUE,
type="continuous",
roundness=1),
color = list(opacity = 0.2)) |>
visNetwork::visLegend() |>
# visNetwork::visGroups(groupname = unique(igraph::vertex_attr(g,"group"))[[1]],
#                       color="brown")
# visNetwork::visClusteringByGroup(groups = igraph::vertex_attr(g,"group"))
visNetwork::visExport(type = "pdf")
visnet <- visNetwork::visIgraph(g, randomSeed = randomSeed) |>
visNetwork::visIgraphLayout(layout = layout) |>
visNetwork::visNodes(font = list(color="#F0FFFF",
strokeWidth=2,
strokeColor="rgba(0,0,0,0.8)"
),
shadow = list("enabled"=TRUE),
opacity = 0.9) |>
visNetwork::visEdges(shadow = list("enabled"=FALSE),
smooth = list("enabled"=TRUE,
type="continuous",
roundness=.2),
color = list(opacity = 0.9)) |>
visNetwork::visLegend() |>
# visNetwork::visGroups(groupname = unique(igraph::vertex_attr(g,"group"))[[1]],
#                       color="brown")
# visNetwork::visClusteringByGroup(groups = igraph::vertex_attr(g,"group"))
visNetwork::visExport(type = "pdf")
visnet
visnet <- visNetwork::visIgraph(g, randomSeed = randomSeed) |>
visNetwork::visIgraphLayout(layout = layout) |>
visNetwork::visNodes(font = list(color="#F0FFFF",
strokeWidth=2,
strokeColor="rgba(0,0,0,0.8)"
),
shadow = list("enabled"=TRUE),
opacity = 0.9) |>
visNetwork::visEdges(shadow = list("enabled"=FALSE),
smooth = list("enabled"=TRUE,
type="curvedCW",
roundness=.5),
color = list(opacity = 0.9)) |>
visNetwork::visLegend() |>
# visNetwork::visGroups(groupname = unique(igraph::vertex_attr(g,"group"))[[1]],
#                       color="brown")
# visNetwork::visClusteringByGroup(groups = igraph::vertex_attr(g,"group"))
visNetwork::visExport(type = "pdf")
visnet
visnet <- visNetwork::visIgraph(g, randomSeed = randomSeed) |>
visNetwork::visIgraphLayout(layout = layout) |>
visNetwork::visNodes(font = list(color="#F0FFFF",
strokeWidth=2,
strokeColor="rgba(0,0,0,0.8)"
),
shadow = list("enabled"=TRUE),
opacity = 0.9) |>
visNetwork::visEdges(shadow = list("enabled"=FALSE),
smooth = list("enabled"=TRUE,
type="dynamic",
roundness=.5),
color = list(opacity = 0.9)) |>
visNetwork::visLegend() |>
# visNetwork::visGroups(groupname = unique(igraph::vertex_attr(g,"group"))[[1]],
#                       color="brown")
# visNetwork::visClusteringByGroup(groups = igraph::vertex_attr(g,"group"))
visNetwork::visExport(type = "pdf")
if(!is.null(save_path)) {
dir.create(dirname(save_path), showWarnings = FALSE, recursive = TRUE)
messager("Saving plot ==>",save_path,v=verbose)
visNetwork::visSave(visnet,file = save_path)
# {
#   grDevices::pdf(file = "~/Downloads/network2.pdf")
#   methods::show(visnet)
#   grDevices::dev.off()
# }
}
visnet
visnet <- visNetwork::visIgraph(g, randomSeed = randomSeed) |>
visNetwork::visIgraphLayout(layout = layout) |>
visNetwork::visNodes(font = list(color="#F0FFFF",
strokeWidth=2,
strokeColor="rgba(0,0,0,0.8)"
),
shadow = list("enabled"=TRUE),
opacity = 0.9) |>
visNetwork::visEdges(shadow = list("enabled"=FALSE),
smooth = list("enabled"=TRUE,
type="dynamic",
roundness=.8),
color = list(opacity = 0.9)) |>
visNetwork::visLegend() |>
# visNetwork::visGroups(groupname = unique(igraph::vertex_attr(g,"group"))[[1]],
#                       color="brown")
# visNetwork::visClusteringByGroup(groups = igraph::vertex_attr(g,"group"))
visNetwork::visExport(type = "pdf")
visnet
visnet <- visNetwork::visIgraph(g, randomSeed = randomSeed) |>
visNetwork::visIgraphLayout(layout = layout) |>
visNetwork::visNodes(font = list(color="#F0FFFF",
strokeWidth=2,
strokeColor="rgba(0,0,0,0.8)"
),
shadow = list("enabled"=TRUE),
opacity = 0.9) |>
visNetwork::visEdges(shadow = list("enabled"=FALSE),
smooth = list("enabled"=TRUE,
type="diagonalCross",
roundness=.5),
color = list(opacity = 0.9)) |>
visNetwork::visLegend() |>
# visNetwork::visGroups(groupname = unique(igraph::vertex_attr(g,"group"))[[1]],
#                       color="brown")
# visNetwork::visClusteringByGroup(groups = igraph::vertex_attr(g,"group"))
visNetwork::visExport(type = "pdf")
visnet
visnet <- visNetwork::visIgraph(g, randomSeed = randomSeed) |>
visNetwork::visIgraphLayout(layout = layout) |>
visNetwork::visNodes(font = list(color="#F0FFFF",
strokeWidth=2,
strokeColor="rgba(0,0,0,0.8)"
),
shadow = list("enabled"=TRUE),
opacity = 0.9) |>
visNetwork::visEdges(shadow = list("enabled"=FALSE),
smooth = list("enabled"=TRUE,
type="straightCross",
roundness=.5),
color = list(opacity = 0.9)) |>
visNetwork::visLegend() |>
# visNetwork::visGroups(groupname = unique(igraph::vertex_attr(g,"group"))[[1]],
#                       color="brown")
# visNetwork::visClusteringByGroup(groups = igraph::vertex_attr(g,"group"))
visNetwork::visExport(type = "pdf")
visnet
visnet <- visNetwork::visIgraph(g, randomSeed = randomSeed) |>
visNetwork::visIgraphLayout(layout = layout) |>
visNetwork::visNodes(font = list(color="#F0FFFF",
strokeWidth=2,
strokeColor="rgba(0,0,0,0.8)"
),
shadow = list("enabled"=TRUE),
opacity = 0.9) |>
visNetwork::visEdges(shadow = list("enabled"=FALSE),
smooth = list("enabled"=TRUE,
type="straightCross",
roundness=.5),
color = list(opacity = 0.9)) |>
visNetwork::visLegend() |>
# visNetwork::visGroups(groupname = unique(igraph::vertex_attr(g,"group"))[[1]],
#                       color="brown")
# visNetwork::visClusteringByGroup(groups = igraph::vertex_attr(g,"group"))
visNetwork::visExport(type = "pdf") |>
visNetwork::visOptions(height=700, width = 1300)
visnet
visNetwork::visSave(visnet,file = save_path)
browseURL(save_path)
?MultiEWCE::prioritise_targets()
