sctSpecies = "human",
cores = 1,
MergeResults = TRUE) {
# remove gene lists that do not have enough valid genes (>= 4)
list_names <- get_valid_gene_lists(ctd,
list_names = list_names,
gene_data = gene_data,
list_name_column = list_name_column,
gene_column = gene_column)
# Create results directory and remove finished gene lists
if (!file.exists(results_dir)) {
dir.create(results_dir)
}
if (!overwrite_past_analysis) {
list_names <- get_unfinished_list_names(list_names,results_dir)
}
# Run analysis
ewce_para(list_names = list_names,
gene_data = phenotype_to_genes,
list_name_column = "Phenotype",
gene_column = "Gene",
results_directory = results_dir,
ctd_file = ctd,
background_genes = background,
bootstrap_reps = reps,
annotation_Level= annotLevel,
genes_Species = genelistSpecies,
ctd_Species = sctSpecies,
cores = cores)
# Combine results into a single dataframe
if (MergeResults) {
results_final <- merge_results(results_dir = results_dir,
list_name_column = list_name_column)
saveRDS(results_final,paste0("results_",Sys.time(),"_",Sys.Date()))
return(results_final)
}
}
# TEST IT
test_results <-  gen_results(ctd = ctd,
gene_data = phenotype_to_genes,
list_names = Phenotypes,
background_genes = background,
list_name_column = "Phenotype",
gene_column = "Gene",
results_dir = "results/",
overwrite_past_analysis = FALSE,
reps = 10,
annotLevel = 1,
genelistSpecies = "human",
sctSpecies = "human",
cores = 1,
MergeResults = TRUE)
#' Is not analysed?
#'
#' Takes a gene list name and checks the output results directory to see if that
#' gene list has been analysed yet. The ewce_para function outputs the results
#' for each gene list in to the results directory with name format list_name.rds
#' @param list_name The name of a gene list e.g. "Phenotypic abnormality"
#' @param results_dir The path to results directory (with "/" at the end)
#' @return True or false <bool>
#' @export
is_not_analysed <- function(list_name,results_dir) {
file_path <- paste0(results_dir,list_name,".rds")
if (file.exists(file_path)){
return (FALSE)
} else {
return (TRUE)
}
}
# TEST IT
test_results <-  gen_results(ctd = ctd,
gene_data = phenotype_to_genes,
list_names = Phenotypes,
background_genes = background,
list_name_column = "Phenotype",
gene_column = "Gene",
results_dir = "results/",
overwrite_past_analysis = FALSE,
reps = 10,
annotLevel = 1,
genelistSpecies = "human",
sctSpecies = "human",
cores = 1,
MergeResults = TRUE)
#' @param ctd_file The cell type data object for EWCE analysis (see EWCE docs)
#' @param background_genes The background geneset for EWCE analysis (see EWCE docs)
#' @param bootstrap_reps The number of bootstrap reps <int> (e.g. 100000)
#' @param annotation_Level The level of desired cell resolution from the CTD
#' @param genes_Species The species of gene lists <string> "human" or "mouse"
#' @param ctd_Species "human" or "mouse" <string>
#' @param cores The number of cores to run in parallel (e.g. 8) <int>
#' @return True if analysis was sucessful,
#' saves results at "<results_directory>/<list_name>.rds"
#' @export
ewce_para <- function( list_names,
gene_data,
list_name_column = "Phenotype",
gene_column = "Gene",
results_directory,
ctd_file,
background_genes,
bootstrap_reps,
annotation_Level,
genes_Species,
ctd_Species,
cores) {
parallel::mclapply(list_names,FUN=function(p,
gene_associations= gene_data,
lst_nm_col = list_name_column,
gn_col = gene_column,
results_dir = results_directory,
ctd = ctd_file,
background = background_genes,
reps=bootstrap_reps,
annotLevel = annotation_Level,
genelistSpecies = genes_Species,
sctSpecies = ctd_Species){
print(p)
genes = get_gene_list(p,gene_associations,lst_nm_col, gn_col)
try({
results = EWCE::bootstrap_enrichment_test(sct_data = ctd,
hits = genes,
bg = background,
reps = reps,
annotLevel = annotLevel,
genelistSpecies=genelistSpecies,
sctSpecies=sctSpecies)
saveRDS(results, paste0(results_dir,"/",p, ".rds"))
return(TRUE)})
},mc.cores=cores)
}
#' Is not analysed?
#'
#' Takes a gene list name and checks the output results directory to see if that
#' gene list has been analysed yet. The ewce_para function outputs the results
#' for each gene list in to the results directory with name format list_name.rds
#' @param list_name The name of a gene list e.g. "Phenotypic abnormality"
#' @param results_dir The path to results directory
#' @return True or false <bool>
#' @export
is_not_analysed <- function(list_name,results_dir) {
file_path <- paste0(results_dir,"/",list_name,".rds")
if (file.exists(file_path)){
return (FALSE)
} else {
return (TRUE)
}
}
#'
#' @param list_names A char vector of gene list names
#' @param results_dir The directory containing analysed results.
#' @return A character vector of list_names that still need to be analysed.
#' @examples \dontrun{
#' list_names <- unique(data$phenotypes)
#' results_dir <- "output/"
#' get_unfinished_list_names(list_names,results_dir)
#' }
#' @export
get_unfinished_list_names <- function (list_names, results_dir) {
list_names_2 = c()
for (l in list_names) {
if (is_not_analysed(l,results_dir)) {
list_names_2 <- append(list_names_2,l)
}
}
return(list_names_2)
}
#' merge results
#'
#' merges individual .rds files from the results output directory into one
#' dataframe.
#' @param results_dir The filepath to results .rds files
#' @param list_name_column The column name for gene list_names (e.g. phenotypes)
#' @return dataframe
#' @export
merge_results <- function(results_dir = "results", list_name_column = "phenotype") {
results_merged <- data.frame()
for (f in list.files(results_dir)) {
cur = readRDS(paste0(results_dir,"/",f))$results
descr <-strsplit(f,".rds")
cur[,list_name_column] <- descr
results_merged <- rbind(results_merged,cur)
}
return(results_merged)
}
#' @examples \dontrun{
#' remove_invalid_gene_lists(ctd,
#'                           list_names,
#'                           gene_data,
#'                           list_names_column = "Phenotype",
#'                           gene_column = "Gene")
#' }
#' @returns A character vector of list_names that are associated with a valid
#' number of genes
#' @export
get_valid_gene_lists <- function(ctd,
list_names,
gene_data,
list_name_column = "Phenotype",
gene_column = "Gene"){
ctd_genes = rownames(ctd[[1]]$specificity_quantiles)
validLists = c()
for (p in list_names) {
if (sum(unique(get_gene_list(p,gene_data,list_name_column, gene_column)) %in% ctd_genes) >= 4) {
validLists = append(validLists, p)
}
}
return(validLists)
}
#' @param ctd_file The cell type data object for EWCE analysis (see EWCE docs)
#' @param background_genes The background geneset for EWCE analysis (see EWCE docs)
#' @param bootstrap_reps The number of bootstrap reps <int> (e.g. 100000)
#' @param annotation_Level The level of desired cell resolution from the CTD
#' @param genes_Species The species of gene lists <string> "human" or "mouse"
#' @param ctd_Species "human" or "mouse" <string>
#' @param cores The number of cores to run in parallel (e.g. 8) <int>
#' @return True if analysis was sucessful,
#' saves results at "<results_directory>/<list_name>.rds"
#' @export
ewce_para <- function( list_names,
gene_data,
list_name_column = "Phenotype",
gene_column = "Gene",
results_directory,
ctd_file,
background_genes,
bootstrap_reps,
annotation_Level,
genes_Species,
ctd_Species,
cores) {
parallel::mclapply(list_names,FUN=function(p,
gene_associations= gene_data,
lst_nm_col = list_name_column,
gn_col = gene_column,
results_dir = results_directory,
ctd = ctd_file,
background = background_genes,
reps=bootstrap_reps,
annotLevel = annotation_Level,
genelistSpecies = genes_Species,
sctSpecies = ctd_Species){
print(p)
genes = get_gene_list(p,gene_associations,lst_nm_col, gn_col)
try({
results = EWCE::bootstrap_enrichment_test(sct_data = ctd,
hits = genes,
bg = background,
reps = reps,
annotLevel = annotLevel,
genelistSpecies=genelistSpecies,
sctSpecies=sctSpecies)
saveRDS(results, paste0(results_dir,"/",p, ".rds"))
return(TRUE)})
},mc.cores=cores)
}
#' }
#' @param list_name The name of the gene list of interest <string>
#' @param gene_data The data frame of gene list names and associated
#' genes <data.frame>
#' @param list_name_column The name of the column in gene_data that contains
#' gene list names <string>
#' @param gene_column The name of the column in gene_data that contains
#' the genes <string>
#' @returns A charcter vector of genes associated with the selected list_name
#' @export
get_gene_list <- function(list_name,
gene_data,
list_name_column = "Phenotype",
gene_column = "Gene"){
return(paste(gene_data[,gene_column][gene_data[,list_name_column] == list_name]))
}
# TEST IT
test_results <-  gen_results(ctd = ctd,
gene_data = phenotype_to_genes,
list_names = Phenotypes,
background_genes = background,
list_name_column = "Phenotype",
gene_column = "Gene",
results_dir = "results_2",
overwrite_past_analysis = FALSE,
reps = 10,
annotLevel = 1,
genelistSpecies = "human",
sctSpecies = "human",
cores = 1,
MergeResults = TRUE)
Sys.time()
Sys.Date()
stringr::str_replace(Sys.time(),":","-")
stringr::str_replace_all(Sys.time(),":","-")
gen_results <- function(ctd,
gene_data,
list_names,
background_genes,
list_name_column = "Phenotype",
gene_column = "Gene",
results_dir = "results",
overwrite_past_analysis = FALSE,
reps = 10,
annotLevel = 1,
genelistSpecies = "human",
sctSpecies = "human",
cores = 1,
MergeResults = TRUE) {
# remove gene lists that do not have enough valid genes (>= 4)
list_names <- get_valid_gene_lists(ctd,
list_names = list_names,
gene_data = gene_data,
list_name_column = list_name_column,
gene_column = gene_column)
# Create results directory and remove finished gene lists
if (!file.exists(results_dir)) {
dir.create(results_dir)
}
if (!overwrite_past_analysis) {
list_names <- get_unfinished_list_names(list_names,results_dir)
}
# Run analysis
ewce_para(list_names = list_names,
gene_data = phenotype_to_genes,
list_name_column = "Phenotype",
gene_column = "Gene",
results_directory = results_dir,
ctd_file = ctd,
background_genes = background,
bootstrap_reps = reps,
annotation_Level= annotLevel,
genes_Species = genelistSpecies,
ctd_Species = sctSpecies,
cores = cores)
# Combine results into a single dataframe
if (MergeResults) {
results_final <- merge_results(results_dir = results_dir,
list_name_column = list_name_column)
saveRDS(results_final,paste0("results_",stringr::str_replace_all(Sys.time(),":","-")))
return(results_final)
}
}
# TEST IT
test_results <-  gen_results(ctd = ctd,
gene_data = phenotype_to_genes,
list_names = Phenotypes,
background_genes = background,
list_name_column = "Phenotype",
gene_column = "Gene",
results_dir = "results_2",
overwrite_past_analysis = FALSE,
reps = 10,
annotLevel = 1,
genelistSpecies = "human",
sctSpecies = "human",
cores = 1,
MergeResults = TRUE)
gen_results <- function(ctd,
gene_data,
list_names,
background_genes,
list_name_column = "Phenotype",
gene_column = "Gene",
results_dir = "results",
overwrite_past_analysis = FALSE,
reps = 10,
annotLevel = 1,
genelistSpecies = "human",
sctSpecies = "human",
cores = 1,
MergeResults = TRUE) {
# remove gene lists that do not have enough valid genes (>= 4)
list_names <- get_valid_gene_lists(ctd,
list_names = list_names,
gene_data = gene_data,
list_name_column = list_name_column,
gene_column = gene_column)
# Create results directory and remove finished gene lists
if (!file.exists(results_dir)) {
dir.create(results_dir)
}
if (!overwrite_past_analysis) {
list_names <- get_unfinished_list_names(list_names,results_dir)
}
# Run analysis
ewce_para(list_names = list_names,
gene_data = phenotype_to_genes,
list_name_column = "Phenotype",
gene_column = "Gene",
results_directory = results_dir,
ctd_file = ctd,
background_genes = background,
bootstrap_reps = reps,
annotation_Level= annotLevel,
genes_Species = genelistSpecies,
ctd_Species = sctSpecies,
cores = cores)
# Combine results into a single dataframe
if (MergeResults) {
results_final <- merge_results(results_dir = results_dir,
list_name_column = list_name_column)
saveRDS(results_final,paste0("results_",stringr::str_replace_all(Sys.time(),":","-"),".rds"))
return(results_final)
}
}
# TEST IT
test_results <-  gen_results(ctd = ctd,
gene_data = phenotype_to_genes,
list_names = Phenotypes,
background_genes = background,
list_name_column = "Phenotype",
gene_column = "Gene",
results_dir = "results_2",
overwrite_past_analysis = FALSE,
reps = 10,
annotLevel = 1,
genelistSpecies = "human",
sctSpecies = "human",
cores = 1,
MergeResults = TRUE)
?p.adjust
devtools::check()
roxygen2::roxygenise()
devtools::check()
roxygen2::roxygenise()
devtools::check()
devtools::document()
roxygen2::roxygenise()
devtools::check()
roxygen2::roxygenise()
devtools::check()
devtools::check()
browseVignettes("MultiEWCE")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
roxygen2::roxygenise()
devtools::build_vignettes()
roxygen2::roxygenise()
devtools::check()
devtools::build_vignettes()
devtools::check()
devtools::check()
usethis::use_testthat()
geneData <- data.frame(
"list_name" = c("a","a","a","a","b","b","b","c","c","c","b","b","c","c","c","d","d"),
"Gene" = c("x","y","z","x","x","x","y","y","z","x","x","y","y","z","x","x","y")
)
geneData$Gene[geneData$list_name == a]
geneData$Gene[geneData$list_name == "a"]
geneData <- data.frame(
"list_name" = c("a","a","a","a","b","b","b","c","c","c","b","b","c","c","c","d","d"),
"Gene" = c("x","y","z","x","x","x","y","y","z","x","x","y","y","z","x","x","y"),
"other_col" = seq(1,17)
)
devtools::load()
devtools::load_all()
devtools::test()
devtools::test()
get_gene_list("A", geneData, "list_name", "Gene")
devtools::test()
get_gene_list("a",geneData,"wrong_column","Gene")
colnames(geneData)
if (!"list_name" %in% colnames(geneData) & !"Gene" %in% colnames(geneData)) {stop("Column does not exist")}
if (!"list_name" %in% colnames(geneData) & !"Gene" %in% colnames(geneData)) {stop("Column does not exist")}
if (!"listname" %in% colnames(geneData) & !"Gene" %in% colnames(geneData)) {stop("Column does not exist")}
if (!"listname" %in% colnames(geneData) & !"Gene" %in% colnames(geneData)) {stop("Column does not exist")}
devtools::load_all()
get_gene_list("a", geneData, "asdf", "Gene")
devtools::load_all()
get_gene_list("a", geneData, "asdf", "Gene")
devtools::test()
devtools::test()
devtools::test()
?expect_equal
?options
devtools::test()
devtools::check()
roxygen2::roxygenise()
devtools::test()
devtools::test()
?rep
test = rep(c("a","b","b","c","c","c","d","d","d","d"))
test = rep(c("a","b","b","c","c","c","d","d","d","d"), 100)
geneData <- data.frame(
"list_name" = rep(c("list1","list2","list3","list4","list5"),200)
"Gene" = rep(c("a","b","b","c","c","c","d","d","d","d"), 100)
)
geneData <- data.frame(
"list_name" = rep(c("list1","list2","list3","list4","list5"),200),
"Gene" = rep(c("a","b","b","c","c","c","d","d","d","d"), 100)
)
?ewce_para
library(HPOExplorer)
phenotype_to_genes = load_phenotype_to_genes("phenotype_to_genes.txt")
devtools::test()
?expect_type
devtools::test()
devtools::test()
devtools::test()
phenotype_to_genes = load_phenotype_to_genes("tests/testdata/phenotype_to_genes.txt")
class(phenotype_to_genes)
devtools::test()
devtools::test()
get_cwd()
getwd()
devtools::test()
devtools::test()
devtools::test()
load("data/CTD_DescartesHuman.rda")
load("data/CTD_DescartesHuman.rda")
load("tests/testthat/data/CTD_DescartesHuman.rda")
devtools::test()
devtools::test()
