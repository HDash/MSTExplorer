library(MultiEWCE)
res <- prioritise_targets()
res <- prioritise_targets(keep_tiers=NULL)
res$top_targets
sort(unique(res$top_targets$Phenotype))
hpo_death
table(hpo_death$AgeOfDeath_name)
sort(table(hpo_death$AgeOfDeath_name))
sort(table(hpo_death$AgeOfDeath_name), decreasing = F)
sort(table(hpo_death$AgeOfDeath_name), decreasing = T)
sort(table(hpo_death$AgeOfDeath_name), decreasing = T)/length(hpo$id)*100
res$report
res <- prioritise_targets()
rep_dt=res$report
results <- load_example_results()
gp <- report_plot(rep_dt=rep_dt, results=results)
gp
data.table::fwrite(res$top_targets, "~/Downloads/filt_mod_top_targets.csv")
res <- prioritise_targets(keep_tiers=1)
rep_dt=res$report
gp <- report_plot(rep_dt=rep_dt, results=results)
res$top_targets$Phenotype
unique(res$top_targets$Phenotype)
templateR:::args2vars(report_plot)
messager("report_plot:: Preparing data.",v=verbose)
tier_dt <- lapply(stats::setNames(rep_dt$ids,
rep_dt$step), function(x){
if(length(x)==0) return(NULL)
tcounts <- table(useNA = "always",
HPOExplorer::add_tier(phenos = data.table::data.table(HPO_ID=x),
verbose = FALSE
)$tier_merge)
names(tcounts) <- paste("Tier",names(tcounts))
data.table::as.data.table(as.list(tcounts))
}) |> data.table::rbindlist(fill=TRUE, use.names = TRUE, idcol = "step")
tier_cols <- names(tier_dt)[-1]
data.table::setnafill(tier_dt,fill=0, type = "const", cols = tier_cols)
tier_dt <- data.table::merge.data.table(rep_dt[,c("step")],
tier_dt,
all.x = TRUE, sort = FALSE)
data.table::setnafill(tier_dt, type = "locf",cols = seq(2,ncol(tier_dt)))
#### Remove cols ####
rep_dt <- rep_dt[,-remove_cols, with=FALSE]
#### Fill missing values ####
total_diseases <- length(unique(annot[HPO_ID %in% results$HPO_ID,]$DiseaseName))
total_genes <- length(unique(phenotype_to_genes$Gene))
rep_dt[step=="start",]$Diseases <- total_diseases
rep_dt[step=="start",]$Genes <- total_genes
data.table::setnafill(rep_dt, type = "locf",cols = seq(2,ncol(rep_dt)))
##### Make plot data: tiers
dt1 <- tier_dt |>
data.table::melt.data.table(id.vars="step",
variable.name = "Tier",
value.name = "Tier_count")
dt1[,Tier:=gsub("Tier NA",NA,Tier)]
dt1$step <- factor(dt1$step,
levels = unique(dt1$step),
labels = paste0(seq_len(length(unique(dt1$step))),". ",
unique(dt1$step)),
ordered = TRUE)
#### Make plot: tiers ####
gp1 <- ggplot2::ggplot(dt1,
ggplot2::aes(x=step,y=Tier_count,
fill=Tier)) +
ggplot2::geom_bar(stat = "identity",
alpha=1,
position = "fill") +
ggplot2::theme_minimal() +
ggplot2::scale_fill_viridis_d(na.value = "grey90",
option = "mako") +
ggplot2::scale_y_continuous(labels = scales::percent) +
ggplot2::labs(y="% phenotypes", x=NULL) +
ggplot2::theme(axis.text.x = ggplot2::element_blank())
#### Plot ####
#### Add step levels/descriptions ####
filters <- extract_filters()
#### Make plot data ####
dt2 <- data.table::merge.data.table(x = rep_dt,
y = filters,
by="step",
all.x = TRUE,
sort = FALSE) |>
data.table::melt(id.vars=names(filters))
dt2$step <- factor(dt2$step,
levels = unique(dt2$step),
labels = paste0(seq_len(length(unique(dt2$step))),". ",
unique(dt2$step)),
ordered = TRUE)
messager("report_plot:: Preparing plot.",v=verbose)
gp2 <- ggplot2::ggplot(dt2, ggplot2::aes(x=step,
y=value,
fill=level,
label=value)) +
ggplot2::geom_bar(stat = "identity",
alpha=1,
color="grey80") +
ggplot2::facet_grid(facets = "variable~.",
scales = "free") +
ggplot2::geom_label(fill="black",
color="white",
alpha=.8,
vjust = 0) +
ggplot2::scale_fill_viridis_d(na.value = "grey90",
option = "viridis") +
ggplot2::scale_y_continuous(expand=ggplot2::expansion(mult = c(0,.2))) +
ggplot2::theme_minimal() +
ggplot2::labs(x="Step", y="Counts", fill="Level") +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = -45, hjust = 0),
strip.background = ggplot2::element_rect(fill = "transparent"))
#### Combine plots ####
gp <- patchwork::wrap_plots(gp1, gp2, ncol = 1, heights = c(.3,1)) +
patchwork::plot_annotation(tag_levels = LETTERS)
gp
results = load_example_results()
templateR:::args2vars(prioritise_targets)
messager("Prioritising gene targets.",v=verbose)
#### add_hpo_id  #####
results <- HPOExplorer::add_hpo_id(phenos = results,
phenotype_to_genes = phenotype_to_genes,
hpo = hpo,
verbose = verbose)
if("HPO_term_valid" %in% names(results)){
results <- results[HPO_term_valid==TRUE,]
}
#### add_hpo_definition  #####
results <- HPOExplorer::add_hpo_definition(phenos = results,
verbose = verbose)
#### add_info_content #####
if("info_content" %in% names(sort_cols)){
results <- HPOExplorer::add_info_content(phenos = results,
hpo = hpo,
verbose = verbose)
}
#### start ####
rep_dt <- report(dt = results,
step = "start",
verbose = verbose)
#### remove_descendants ####
results <- HPOExplorer::add_ancestor(phenos = results,
hpo = hpo,
verbose = verbose)
if(!is.null(remove_descendants)){
messager("Removing remove descendants of:",
paste(shQuote(remove_descendants),collapse = "\n -"),v=verbose)
rmd <- HPOExplorer::harmonise_phenotypes(phenotypes = remove_descendants,
hpo = hpo,
as_hpo_ids = TRUE,
keep_order = FALSE,
verbose = verbose)
results <- results[!ancestor %in% rmd,]
}
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "remove_descendants",
verbose = verbose)
source("~/Desktop/ewce/MultiEWCE/R/prioritise_targets.R", echo=TRUE)
res <- prioritise_targets()
seq(1,40)
source("~/Desktop/ewce/MultiEWCE/R/prioritise_targets.R", echo=TRUE)
devtools::check_man()
library(MultiEWCE)
res <- prioritise_targets()
res <- prioritise_targets(keep_tiers = NULL, severity_threshold = 1)
res <- prioritise_targets(keep_tiers = NULL, severity_threshold = 2)
res <- prioritise_targets(keep_tiers = NULL, severity_threshold = 1)
sort(unique(res$top_targets$Phenotype))
res <- prioritise_targets(keep_tiers = NULL, severity_threshold = 1.5)
res <- prioritise_targets(keep_tiers = NULL, severity_threshold = 2)
sort(unique(res$top_targets$Phenotype))
library(MultiEWCE)
hpo_modifiers
hpo_modifiers$Severity_score_mean
summary(hpo_modifiers$Severity_score_mean)
results = load_example_results()
results=HPOExplorer::add_modifier(results)
length(unique(results[is.na(Severity_score_mean),]$Phenotype))
length(unique(results[is.na(Severity_score_mean),]$Phenotype))/length(unique(results$Phenotype))
length(unique(results[is.na(Severity_score_mean),]$Phenotype))/length(unique(results$Phenotype))*100
res <- prioritise_targets(keep_tiers = NULL, severity_threshold = 2)
res$report
rep_dt=res$report
gp <- report_plot(rep_dt=rep_dt, results=results)
results <- load_example_results()
gp <- report_plot(rep_dt=rep_dt, results=results)
data.table::fwrite(hpo_modifiers, "~/Downloads/hpo_modifiers.csv")
sort(unique(res$top_targets$Phenotype))
library(MultiEWCE)
res <- prioritise_targets(keep_tiers = NULL, severity_threshold = 2)
results <- load_example_results()
sort(unique(res$top_targets$Phenotype))
HPOExplorer::list_deaths(
exclude=c("Miscarriage",
"Stillbirth",
"Prenatal death"),
include_na = FALSE
)
HPOExplorer::hpo_modifiers
seq(1,Inf)
seq(1,100)
devtools::document()
library(MultiEWCE)
res <- prioritise_targets()
res$top_targets
res <- prioritise_targets(keep_tiers = c(1,2))
library(MultiEWCE)
res <- prioritise_targets()
library(MultiEWCE)
res <- prioritise_targets(keep_tiers = c(1,2))
res <- prioritise_targets(keep_tiers = NULL, severity_threshold = 2.5)
res <- prioritise_targets(keep_tiers = NULL, severity_threshold = 2)
unique(res$top_targets$Phenotype)
res$top_targets$ontLvl
hist(res$top_targets$ontLvl)
res$top_targets$DiseaseNames
templateR:::args2vars(prioritise_targets_network)
top_targets <- MultiEWCE::example_targets$top_targets
group_var = "disease"
top_targets
top_targets$disease_characteristic
unique(top_targets$disease_characteristic)
unique(top_targets$DiseaseNames)
unique(top_targets$disease_characteristic)
templateR:::args2vars(targets_to_graph)
messager("Creating network.",v=verbose)
#### Add diseases ####
annot <- HPOExplorer::load_phenotype_to_genes("phenotype.hpoa")
annot
#### Add diseases ####
annot <- HPOExplorer::load_phenotype_to_genes()
annot
? HPOExplorer::load_phenotype_to_genes()
#### Add diseases ####
annot <- HPOExplorer::load_phenotype_to_genes("genes_to_phenotype.txt")
annot
#### Add diseases ####
annot1 <- HPOExplorer::load_phenotype_to_genes()
annot <- HPOExplorer::load_phenotype_to_genes("genes_to_phenotype.txt")
intersect(annot1$Phenotype, annot$Phenotype)
intersect(unique(annot1$Phenotype), unique(annot$Phenotype))
inter <- intersect(unique(annot1$Phenotype), unique(annot$Phenotype))
length(inter)/length(unique(annot1$Phenotype))
length(inter)/length(unique(annot$Phenotype))*100
length(inter)/length(unique(annot1$Phenotype))*100
length(inter)/length(unique(annot$Phenotype))*100
annot
annot <- HPOExplorer::load_phenotype_to_genes("phenotype.hpoa")
annot
grep("^HP",annot$`#DatabaseID`, value=T)
data.table::merge.data.table(top_targets, annot[,c("HPO_ID","DiseaseName","Evidence")])
top_targets <- data.table::merge.data.table(
x = top_targets,
y = annot[,c("HPO_ID","DiseaseName","Evidence")])
top_targets
group_var = "DiseaseName"
vertex_vars = c("ancestor_name",
"Phenotype",
"CellType",
"Gene")
vertex_vars = c("ancestor_name",
"Phenotype",
"CellType",
"Gene")
vertex_vars = c(group_var,vertex_vars)
length(vertex_vars)
?visNetwork::visIgraph()
top_targets
?visNetwork::visNetwork()
!"DiseaseName" %in% names(top_targets)
#### Create vertices ####
vertex_vars <- unique(vertex_vars)
shapes <- c("database","circle","box")
if("ancestor_name" %in% vertex_vars && length(vertex_vars)==4){
shapes <- c("database",shapes)
}
if("DiseaseName" %in% vertex_vars && length(vertex_vars)==5){
shapes <- c("database",shapes)
}
##### Remove Phenotypes that are also ancestor #####
## This avoids duplicate nodes
if("ancestor_name" %in% names(top_targets)){
top_targets <- top_targets[Phenotype!=ancestor_name,]
}
#### Make vertex metadata ####
vertices <- (
data.table::melt.data.table(
top_targets[,c(vertex_vars,group_var,metadata_vars),with=FALSE],
id.vars = c(group_var,metadata_vars),
measure.vars = vertex_vars,
variable.name = "node_type",
value.name = "node") |>
rev() |> unique()
)
#### Add node shapes ####
shape_dict <- stats::setNames(
shapes,
unique(vertex_vars))
vertex_vars
"DiseaseName" %in% vertex_vars
length(vertex_vars)==5
#### Create vertices ####
vertex_vars <- unique(vertex_vars)
shapes <- c("database","circle","box")
if("ancestor_name" %in% vertex_vars && length(vertex_vars)>4){
shapes <- c("database",shapes)
}
if("DiseaseName" %in% vertex_vars && length(vertex_vars)==5){
shapes <- c("database",shapes)
}
##### Remove Phenotypes that are also ancestor #####
## This avoids duplicate nodes
if("ancestor_name" %in% names(top_targets)){
top_targets <- top_targets[Phenotype!=ancestor_name,]
}
#### Make vertex metadata ####
vertices <- (
data.table::melt.data.table(
top_targets[,c(vertex_vars,group_var,metadata_vars),with=FALSE],
id.vars = c(group_var,metadata_vars),
measure.vars = vertex_vars,
variable.name = "node_type",
value.name = "node") |>
rev() |> unique()
)
#### Add node shapes ####
shape_dict <- stats::setNames(
shapes,
unique(vertex_vars))
vertices[,shape:=shape_dict[node_type]]
#### Add node colors ####
if(!is.null(node_palette)){
color_dict <- stats::setNames(
node_palette(length(unique(vertex_vars))+2)[-1],
unique(vertex_vars))
vertices[,color:=color_dict[node_type]] |>
data.table::setkeyv(cols = "node")
}
vertices <- vertices[,utils::head(.SD, 1),by = c("node")]
#### ancestor_name is only relevant metadata for Phenotype nodes ####
vertices[node_type!="Phenotype",]$ancestor_name <- NA
#### Merge graphs ####
if(is.character(mediator_var)){
subgraphs <- lapply(vertex_vars[vertex_vars!=mediator_var], function(v){
vv <- c(v,mediator_var)
dt <- unique(
top_targets[,vv,with=FALSE]
)
igraph::graph_from_data_frame(dt)
})
} else if(is.list(mediator_var)){
ilist <- if(length(mediator_var)==0){
if(length(vertex_vars)==4){
list(c(1,2),c(2,3),c(3,4),c(2,4))
} else if(length(vertex_vars)==5){
list(c(1,2),c(2,3),c(3,4),c(4,5),c(3,5))
} else if(length(vertex_vars)==6){
list(c(1,2),c(2,3),c(3,4),c(4,5),c(5,6),c(4,6))
}
} else {
mediator_var
}
if(length(unique(unlist(ilist)))>length(vertex_vars)){
stp <- paste("When mediator_var is a list, mediator_var must be",
"equal to or less than the length of vertex_vars.")
stop(stp)
}
subgraphs <- lapply(ilist, function(il){
vv <- vertex_vars[il]
cols <- edge_size_var
dt <- unique(
top_targets[,c(vv,c(edge_color_var,edge_size_var)),
with=FALSE][,(cols):=lapply(.SD,mean),.SDcols=cols,by=vv]
)
igraph::graph_from_data_frame(dt)
})
} else {
subgraphs <- lapply(seq_len(length(vertex_vars)-1), function(i){
vv <- vertex_vars[c(i,i+1)]
dt <- unique(
top_targets[,c(vv,c(edge_color_var,edge_size_var)),
with=FALSE][,fold_change:=mean(fold_change), by=vv]
)
igraph::graph_from_data_frame(dt)
})
}
#### Merge subgraphs ####
g <- igraph::graph.union(subgraphs)
subgraphs <- lapply(ilist, function(il){
vv <- vertex_vars[il]
cols <- edge_size_var
dt <- unique(
top_targets[,c(vv,c(edge_color_var,edge_size_var)),
with=FALSE][,(cols):=lapply(.SD,mean),.SDcols=cols,by=vv]
)
igraph::graph_from_data_frame(dt)
})
#### Merge graphs ####
if(is.character(mediator_var)){
subgraphs <- lapply(vertex_vars[vertex_vars!=mediator_var], function(v){
vv <- c(v,mediator_var)
dt <- unique(
top_targets[,vv,with=FALSE]
)
igraph::graph_from_data_frame(dt)
})
} else if(is.list(mediator_var)){
ilist <- if(length(mediator_var)==0){
if(length(vertex_vars)==4){
list(c(1,2),c(2,3),c(3,4),c(2,4))
} else if(length(vertex_vars)==5){
list(c(1,2),c(2,3),c(3,4),c(4,5),c(3,5))
} else if(length(vertex_vars)==6){
list(c(1,2),c(2,3),c(3,4),c(4,5),c(5,6),c(4,6))
}
} else {
mediator_var
}
if(length(unique(unlist(ilist)))>length(vertex_vars)){
stp <- paste("When mediator_var is a list, mediator_var must be",
"equal to or less than the length of vertex_vars.")
stop(stp)
}
subgraphs <- lapply(ilist, function(il){
vv <- vertex_vars[il]
cols <- edge_size_var
dt <- unique(
top_targets[,c(vv,c(edge_color_var,edge_size_var)),
with=FALSE][,(cols):=lapply(.SD,mean),.SDcols=cols,by=vv]
)
igraph::graph_from_data_frame(dt)
})
} else {
subgraphs <- lapply(seq_len(length(vertex_vars)-1), function(i){
vv <- vertex_vars[c(i,i+1)]
dt <- unique(
top_targets[,c(vv,c(edge_color_var,edge_size_var)),
with=FALSE][,fold_change:=mean(fold_change), by=vv]
)
igraph::graph_from_data_frame(dt)
})
}
#### Merge subgraphs ####
g <- igraph::graph.union(subgraphs)
#### Name edges ####
# igraph::edge_attr(g,"id") <- paste0("edge",seq_len(length(igraph::E(g))))
#### Add nodes metadata ####
for(x in names(vertices)){
igraph::vertex_attr(g,x) <- as.character(
vertices[names(igraph::V(g))][[x]]
)
}
#### Add hoverdata ####
igraph::vertex_attr(g,"title") <- lapply(seq_len(length(g)), function(i){
nms <- igraph::vertex_attr_names(g)
nms <- nms[!nms %in% c('shape','color','value','name')]
lapply(nms, function(nm){
value <- igraph::vertex_attr(g,nm)[i]
if(!is.na(value)) {
paste0("<strong>",nm,"</strong>: ",value)
} else {
""
}
}) |>
paste(collapse = "<br>") |>
gsub(pattern="<br><br>",replacement="<br>")
}) |> unlist()
g
plt <- plot_visnetwork(g = g,
save_path = save_path,
layout = layout,
solver = solver,
physics = physics,
forceAtlas2Based = forceAtlas2Based,
scaling = scaling,
smooth = smooth,
add_visExport = add_visExport,
degree = degree,
height = height,
width = width,
main = main,
submain = submain,
randomSeed = randomSeed,
verbose = verbose)
library(dplyr)
plt <- plot_visnetwork(g = g,
save_path = save_path,
layout = layout,
solver = solver,
physics = physics,
forceAtlas2Based = forceAtlas2Based,
scaling = scaling,
smooth = smooth,
add_visExport = add_visExport,
degree = degree,
height = height,
width = width,
main = main,
submain = submain,
randomSeed = randomSeed,
verbose = verbose)
top_targets <- MultiEWCE::example_targets$top_targets
annot <- HPOExplorer::load_phenotype_to_genes("phenotype.hpoa")
top_targets
top_targets <- data.table::merge.data.table(
x = top_targets,
y = annot[,c("HPO_ID","DiseaseName","Evidence")],
all = FALSE)
top_targets
mediator_var
g
vertex_vars
annot1
annot2
