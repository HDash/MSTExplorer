saveRDS(results, paste0(results_dir,p, ".rds"))
return(TRUE)})
},mc.cores=cores)
}
#MultiEWCE::
ewce_para(list_names = Phenotypes,
#gene_lists = GeneLists,
gene_data = phenotype_to_genes,
results_directory = results_dir,
ctd_file = ctd,
background_genes = background,
bootstrap_reps = reps,
annotation_Level= annotLevel,
genes_Species = genelistSpecies,
ctd_Species = sctSpecies,
cores = cores)
ewce_para <- function( list_names,
gene_data,
list_name_column = "Phenotype",
gene_column = "Gene",
results_directory,
ctd_file,
background_genes,
bootstrap_reps,
annotation_Level,
genes_Species,
ctd_Species,
cores) {
parallel::mclapply(list_names,FUN=function(p,
gene_associations= gene_data,
list_name_column,
gene_column,
results_dir = results_directory,
ctd = ctd_file,
background = background_genes,
reps=bootstrap_reps,
annotLevel = annotation_Level,
genelistSpecies = genes_Species,
sctSpecies = ctd_Species){
print(p)
genes = get_gene_list(p,gene_associations,list_name_column,gene_column)
print(length(genes))
print(length(genes[genes %in% background]))
print(genes[1:3])
print(background[1:10])
#genes = gene_associations[[p]]
try({
results = EWCE::bootstrap_enrichment_test(sct_data = ctd,
hits = genes,
bg = background,
reps = reps,
annotLevel = annotLevel,
genelistSpecies=genelistSpecies,
sctSpecies=sctSpecies)
saveRDS(results, paste0(results_dir,p, ".rds"))
return(TRUE)})
},mc.cores=cores)
}
#MultiEWCE::
ewce_para(list_names = Phenotypes,
#gene_lists = GeneLists,
gene_data = phenotype_to_genes,
results_directory = results_dir,
ctd_file = ctd,
background_genes = background,
bootstrap_reps = reps,
annotation_Level= annotLevel,
genes_Species = genelistSpecies,
ctd_Species = sctSpecies,
cores = cores)
#' }
#' @param list_name The name of the gene list of interest <string>
#' @param gene_data The data frame of gene list names and associated
#' genes <data.frame>
#' @param list_name_column The name of the column in gene_data that contains
#' gene list names <string>
#' @param gene_column The name of the column in gene_data that contains
#' the genes <string>
#' @returns A charcter vector of genes associated with the selected list_name
#' @export
get_gene_list <- function(list_name,
gene_data,
list_name_column = "Phenotype",
gene_column = "Gene"){
return(gene_data[,gene_column][gene_data[,list_name_column] == list_name])
}
#' @examples \dontrun{
#' remove_invalid_gene_lists(ctd,
#'                           list_names,
#'                           gene_data,
#'                           list_names_column = "Phenotype",
#'                           gene_column = "Gene")
#' }
#' @returns A character vector of list_names that are associated with a valid
#' number of genes
#' @export
get_valid_gene_lists <- function(ctd,
list_names,
gene_data,
list_name_column = "Phenotype",
gene_column = "Gene"){
ctd_genes = rownames(ctd[[1]]$specificity_quantiles)
validLists = c()
for (p in list_names) {
if (sum(unique(get_gene_list(p,gene_data,list_name_column, gene_column)) %in% ctd_genes) >= 4) {
validLists = append(validLists, p)
}
}
return(validLists)
}
ewce_para <- function( list_names,
gene_data,
list_name_column = "Phenotype",
gene_column = "Gene",
results_directory,
ctd_file,
background_genes,
bootstrap_reps,
annotation_Level,
genes_Species,
ctd_Species,
cores) {
parallel::mclapply(list_names,FUN=function(p,
gene_associations= gene_data,
list_name_column,
gene_column,
results_dir = results_directory,
ctd = ctd_file,
background = background_genes,
reps=bootstrap_reps,
annotLevel = annotation_Level,
genelistSpecies = genes_Species,
sctSpecies = ctd_Species){
print(p)
genes = get_gene_list(p,gene_associations,list_name_column, gene_column)
print(length(genes))
print(length(genes[genes %in% background]))
print(genes[1:3])
print(background[1:10])
#genes = gene_associations[[p]]
try({
results = EWCE::bootstrap_enrichment_test(sct_data = ctd,
hits = genes,
bg = background,
reps = reps,
annotLevel = annotLevel,
genelistSpecies=genelistSpecies,
sctSpecies=sctSpecies)
saveRDS(results, paste0(results_dir,p, ".rds"))
return(TRUE)})
},mc.cores=cores)
}
#MultiEWCE::
ewce_para(list_names = Phenotypes,
#gene_lists = GeneLists,
gene_data = phenotype_to_genes,
results_directory = results_dir,
ctd_file = ctd,
background_genes = background,
bootstrap_reps = reps,
annotation_Level= annotLevel,
genes_Species = genelistSpecies,
ctd_Species = sctSpecies,
cores = cores)
@export
#' }
#' @param list_name The name of the gene list of interest <string>
#' @param gene_data The data frame of gene list names and associated
#' genes <data.frame>
#' @param list_name_column The name of the column in gene_data that contains
#' gene list names <string>
#' @param gene_column The name of the column in gene_data that contains
#' the genes <string>
#' @returns A charcter vector of genes associated with the selected list_name
#' @export
get_gene_list <- function(list_name,
gene_data,
list_name_column = "Phenotype",
gene_column = "Gene"){
return(paste(gene_data[,gene_column][gene_data[,list_name_column] == list_name]))
}
ewce_para <- function( list_names,
gene_data,
list_name_column = "Phenotype",
gene_column = "Gene",
results_directory,
ctd_file,
background_genes,
bootstrap_reps,
annotation_Level,
genes_Species,
ctd_Species,
cores) {
parallel::mclapply(list_names,FUN=function(p,
gene_associations= gene_data,
list_name_column,
gene_column,
results_dir = results_directory,
ctd = ctd_file,
background = background_genes,
reps=bootstrap_reps,
annotLevel = annotation_Level,
genelistSpecies = genes_Species,
sctSpecies = ctd_Species){
print(p)
genes = get_gene_list(p,gene_associations,list_name_column, gene_column)
print(length(genes))
print(length(genes[genes %in% background]))
print(genes[1:3])
print(background[1:10])
#genes = gene_associations[[p]]
try({
results = EWCE::bootstrap_enrichment_test(sct_data = ctd,
hits = genes,
bg = background,
reps = reps,
annotLevel = annotLevel,
genelistSpecies=genelistSpecies,
sctSpecies=sctSpecies)
saveRDS(results, paste0(results_dir,p, ".rds"))
return(TRUE)})
},mc.cores=cores)
}
#MultiEWCE::
ewce_para(list_names = Phenotypes,
#gene_lists = GeneLists,
gene_data = phenotype_to_genes,
results_directory = results_dir,
ctd_file = ctd,
background_genes = background,
bootstrap_reps = reps,
annotation_Level= annotLevel,
genes_Species = genelistSpecies,
ctd_Species = sctSpecies,
cores = cores)
ewce_para <- function( list_names,
gene_data,
list_name_column = "Phenotype",
gene_column = "Gene",
results_directory,
ctd_file,
background_genes,
bootstrap_reps,
annotation_Level,
genes_Species,
ctd_Species,
cores) {
parallel::mclapply(list_names,FUN=function(p,
gene_associations= gene_data,
list_name_column,
gene_column,
results_dir = results_directory,
ctd = ctd_file,
background = background_genes,
reps=bootstrap_reps,
annotLevel = annotation_Level,
genelistSpecies = genes_Species,
sctSpecies = ctd_Species){
print(p)
genes = get_gene_list(p,gene_associations,list_name_column, gene_column)
print(length(genes))
print(length(genes[genes %in% background]))
print("hits:")
print(genes[1:3])
print("background:")
print(background[1:10])
#genes = gene_associations[[p]]
try({
results = EWCE::bootstrap_enrichment_test(sct_data = ctd,
hits = genes,
bg = background,
reps = reps,
annotLevel = annotLevel,
genelistSpecies=genelistSpecies,
sctSpecies=sctSpecies)
saveRDS(results, paste0(results_dir,p, ".rds"))
return(TRUE)})
},mc.cores=cores)
}
#MultiEWCE::
ewce_para(list_names = Phenotypes,
#gene_lists = GeneLists,
gene_data = phenotype_to_genes,
results_directory = results_dir,
ctd_file = ctd,
background_genes = background,
bootstrap_reps = reps,
annotation_Level= annotLevel,
genes_Species = genelistSpecies,
ctd_Species = sctSpecies,
cores = cores)
get_gene_list("Functional abnormality of the bladder" , phenotype_to_genes, "Phenotype","Gene")
ewce_para <- function( list_names,
gene_data,
list_name_column = "Phenotype",
gene_column = "Gene",
results_directory,
ctd_file,
background_genes,
bootstrap_reps,
annotation_Level,
genes_Species,
ctd_Species,
cores) {
parallel::mclapply(list_names,FUN=function(p,
gene_associations= gene_data,
list_name_column,
gene_column,
results_dir = results_directory,
ctd = ctd_file,
background = background_genes,
reps=bootstrap_reps,
annotLevel = annotation_Level,
genelistSpecies = genes_Species,
sctSpecies = ctd_Species){
print(p)
genes = get_gene_list(p,gene_associations,list_name_column, gene_column)
print(length(genes))
print(length(genes[genes %in% background]))
print("hits:")
print(genes[1:3])
print("background:")
print(background[1:10])
#genes = gene_associations[[p]]
try({
results = EWCE::bootstrap_enrichment_test(sct_data = ctd,
hits = genes,
bg = background,
reps = reps,
annotLevel = annotLevel,
genelistSpecies=genelistSpecies,
sctSpecies=sctSpecies)
saveRDS(results, paste0(results_dir,p, ".rds"))
return(TRUE)})
},mc.cores=cores)
}
#' @examples \dontrun{
#' remove_invalid_gene_lists(ctd,
#'                           list_names,
#'                           gene_data,
#'                           list_names_column = "Phenotype",
#'                           gene_column = "Gene")
#' }
#' @returns A character vector of list_names that are associated with a valid
#' number of genes
#' @export
get_valid_gene_lists <- function(ctd,
list_names,
gene_data,
list_name_column = "Phenotype",
gene_column = "Gene"){
ctd_genes = rownames(ctd[[1]]$specificity_quantiles)
validLists = c()
for (p in list_names) {
if (sum(unique(get_gene_list(p,gene_data,list_name_column, gene_column)) %in% ctd_genes) >= 4) {
validLists = append(validLists, p)
}
}
return(validLists)
}
#' }
#' @param list_name The name of the gene list of interest <string>
#' @param gene_data The data frame of gene list names and associated
#' genes <data.frame>
#' @param list_name_column The name of the column in gene_data that contains
#' gene list names <string>
#' @param gene_column The name of the column in gene_data that contains
#' the genes <string>
#' @returns A charcter vector of genes associated with the selected list_name
#' @export
get_gene_list <- function(list_name,
gene_data,
list_name_column = "Phenotype",
gene_column = "Gene"){
return(paste(gene_data[,gene_column][gene_data[,list_name_column] == list_name]))
}
#MultiEWCE::
ewce_para(list_names = Phenotypes,
#gene_lists = GeneLists,
gene_data = phenotype_to_genes,
list_name_column = "Phenotype",
gene_column = "Gene",
results_directory = results_dir,
ctd_file = ctd,
background_genes = background,
bootstrap_reps = reps,
annotation_Level= annotLevel,
genes_Species = genelistSpecies,
ctd_Species = sctSpecies,
cores = cores)
ewce_para <- function( list_names,
gene_data,
list_name_column = "Phenotype",
gene_column = "Gene",
results_directory,
ctd_file,
background_genes,
bootstrap_reps,
annotation_Level,
genes_Species,
ctd_Species,
cores) {
parallel::mclapply(list_names,FUN=function(p,
gene_associations= gene_data,
list_name_column,
gene_column,
results_dir = results_directory,
ctd = ctd_file,
background = background_genes,
reps=bootstrap_reps,
annotLevel = annotation_Level,
genelistSpecies = genes_Species,
sctSpecies = ctd_Species){
print(p)
get_gene_list <- function(list_name,
gene_data,
list_name_column = "Phenotype",
gene_column = "Gene"){
return(paste(gene_data[,gene_column][gene_data[,list_name_column] == list_name]))
}
genes = get_gene_list(p,gene_associations,list_name_column, gene_column)
print(length(genes))
print(length(genes[genes %in% background]))
print("hits:")
print(genes[1:3])
print("background:")
print(background[1:10])
#genes = gene_associations[[p]]
try({
results = EWCE::bootstrap_enrichment_test(sct_data = ctd,
hits = genes,
bg = background,
reps = reps,
annotLevel = annotLevel,
genelistSpecies=genelistSpecies,
sctSpecies=sctSpecies)
saveRDS(results, paste0(results_dir,p, ".rds"))
return(TRUE)})
},mc.cores=cores)
}
#MultiEWCE::
ewce_para(list_names = Phenotypes,
#gene_lists = GeneLists,
gene_data = phenotype_to_genes,
list_name_column = "Phenotype",
gene_column = "Gene",
results_directory = results_dir,
ctd_file = ctd,
background_genes = background,
bootstrap_reps = reps,
annotation_Level= annotLevel,
genes_Species = genelistSpecies,
ctd_Species = sctSpecies,
cores = cores)
ewce_para <- function( list_names,
gene_data,
list_name_column = "Phenotype",
gene_column = "Gene",
results_directory,
ctd_file,
background_genes,
bootstrap_reps,
annotation_Level,
genes_Species,
ctd_Species,
cores) {
parallel::mclapply(list_names,FUN=function(p,
gene_associations= gene_data,
lst_nm_col = list_name_column,
gn_col = gene_column,
results_dir = results_directory,
ctd = ctd_file,
background = background_genes,
reps=bootstrap_reps,
annotLevel = annotation_Level,
genelistSpecies = genes_Species,
sctSpecies = ctd_Species){
print(p)
genes = get_gene_list(p,gene_associations,lst_nm_col, gn_col)
print(length(genes))
print(length(genes[genes %in% background]))
print("hits:")
print(genes[1:3])
print("background:")
print(background[1:10])
#genes = gene_associations[[p]]
try({
results = EWCE::bootstrap_enrichment_test(sct_data = ctd,
hits = genes,
bg = background,
reps = reps,
annotLevel = annotLevel,
genelistSpecies=genelistSpecies,
sctSpecies=sctSpecies)
saveRDS(results, paste0(results_dir,p, ".rds"))
return(TRUE)})
},mc.cores=cores)
}
#MultiEWCE::
ewce_para(list_names = Phenotypes,
#gene_lists = GeneLists,
gene_data = phenotype_to_genes,
list_name_column = "Phenotype",
gene_column = "Gene",
results_directory = results_dir,
ctd_file = ctd,
background_genes = background,
bootstrap_reps = reps,
annotation_Level= annotLevel,
genes_Species = genelistSpecies,
ctd_Species = sctSpecies,
cores = cores)
