results <- HPOExplorer::add_tier(phenos = results,
hpo = hpo,
keep_tiers = keep_tiers,
verbose = verbose)
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "keep_tiers",
verbose = verbose)
#### severity_threshold ####
results <- HPOExplorer::add_severity(phenos = results,
severity_threshold = severity_threshold,
verbose = verbose)
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "severity_threshold",
verbose = verbose)
#### severity_threshold_max ####
## i.e. is a phenotype always severe, regardless of disease?
if(!is.null(severity_threshold_max)){
results <- results[,Severity_score_max:=gsub(
-Inf,NA,max(Severity_score,na.rm = TRUE)),
by="HPO_ID"][Severity_score_max<=severity_threshold_max]
}
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "severity_threshold_max",
verbose = verbose)
#### pheno_ndiseases_threshold ####
results <- HPOExplorer::add_ndisease(
phenos = results,
pheno_ndiseases_threshold = pheno_ndiseases_threshold,
verbose = verbose)
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "pheno_ndiseases_threshold",
verbose = verbose)
#### pheno_frequency_threshold ####
results <- HPOExplorer::add_pheno_frequency(
phenos = results,
pheno_frequency_threshold = pheno_frequency_threshold,
verbose = verbose)
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "pheno_frequency_threshold",
verbose = verbose)
#### Filter celltypes ####
### Fix celltypes
results[,celltype_fixed:=EWCE::fix_celltype_names(CellType,
make_unique = FALSE)]
if(!is.null(keep_celltypes)){
all_celltypes <- unique(results$CellType)
results <- results[CellType %in% keep_celltypes,]
valid_celltypes <- unique(results$CellType)
messager(formatC(length(valid_celltypes),big.mark = ","),"/",
formatC(length(all_celltypes)),
"of cell types kept.",v=verbose)
}
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "keep_celltypes",
verbose = verbose)
o <- devoptera::args2vars(prioritise_targets, reassign = TRUE)
q <- fold_change <- CellType <- Gene <- width <- gene_biotype <-
HPO_term_valid <- intersection <- symptom.pval <- Severity_score <-
celltype_fixed <- intersection_size <- NULL;
t1 <- Sys.time()
messager("Prioritising gene targets.",v=verbose)
#### add_hpo_id  #####
results <- HPOExplorer::add_hpo_id(phenos = results,
phenotype_to_genes = phenotype_to_genes,
hpo = hpo,
verbose = verbose)
if("HPO_term_valid" %in% names(results)){
results <- results[HPO_term_valid==TRUE,]
}
#### add_hpo_definition  #####
results <- HPOExplorer::add_hpo_definition(phenos = results,
verbose = verbose)
#### add_info_content #####
if("info_content" %in% names(sort_cols)){
results <- HPOExplorer::add_info_content(phenos = results,
hpo = hpo,
verbose = verbose)
}
#### start ####
rep_dt <- report(dt = results,
step = "start",
verbose = verbose)
#### Filter associations #####
#### q_threshold ####
if(!is.null(q_threshold)){
messager("Filtering @ q-value <=",q_threshold,v=verbose)
results <- results[q<=q_threshold,]
}
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "q_threshold",
verbose = verbose)
#### fold_threshold ####
if(!is.null(fold_threshold)){
messager("Filtering @ fold-change >=",fold_threshold,v=verbose)
results <- results[fold_change>=fold_threshold,]
}
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "fold_threshold",
verbose = verbose)
#### Filter symptoms ####
## Do these steps early bc it will drastically reduce data size
## and thus speed up all subsequent steps.
#### symptom_p_threshold ####
if(!is.null(symptom_p_threshold)){
results <- results[symptom.pval<symptom_p_threshold]
}
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "symptom_p_threshold",
verbose = verbose)
#### symptom_intersection_size_threshold ####
if(!is.null(symptom_intersection_size_threshold)){
results <- results[intersection_size>=symptom_intersection_size_threshold]
}
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "symptom_intersection_size_threshold",
verbose = verbose)
#### Filter diseases ####
#### keep_deaths ####
results <- HPOExplorer::add_death(phenos = results,
keep_deaths = keep_deaths,
agg_by = "DatabaseID",
allow.cartesian = TRUE,
verbose = verbose)
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "keep_deaths",
verbose = verbose)
#### Filter phenotypes ####
#### remove_descendants ####
results <- HPOExplorer::add_ancestor(phenos = results,
hpo = hpo,
remove_descendants = remove_descendants,
verbose = verbose)
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "remove_descendants",
verbose = verbose)
#### keep_ont_levels ####
results <- HPOExplorer::add_ont_lvl(phenos = results,
absolute = TRUE,
keep_ont_levels = keep_ont_levels,
verbose = verbose)
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "keep_ont_levels",
verbose = verbose)
#### keep_onsets ####
results <- HPOExplorer::add_onset(phenos = results,
keep_onsets = keep_onsets,
agg_by=c("DatabaseID","HPO_ID"),
verbose = verbose)
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "keep_onsets",
verbose = verbose)
#### keep_tiers ####
results <- HPOExplorer::add_tier(phenos = results,
hpo = hpo,
keep_tiers = keep_tiers,
verbose = verbose)
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "keep_tiers",
verbose = verbose)
#### severity_threshold ####
results <- HPOExplorer::add_severity(phenos = results,
severity_threshold = severity_threshold,
verbose = verbose)
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "severity_threshold",
verbose = verbose)
#### severity_threshold_max ####
## i.e. is a phenotype always severe, regardless of disease?
if(!is.null(severity_threshold_max)){
results <- results[,Severity_score_max:=gsub(
-Inf,NA,max(Severity_score,na.rm = TRUE)),
by="HPO_ID"][Severity_score_max<=severity_threshold_max]
}
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "severity_threshold_max",
verbose = verbose)
#### pheno_ndiseases_threshold ####
results <- HPOExplorer::add_ndisease(
phenos = results,
pheno_ndiseases_threshold = pheno_ndiseases_threshold,
verbose = verbose)
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "pheno_ndiseases_threshold",
verbose = verbose)
#### pheno_frequency_threshold ####
results <- HPOExplorer::add_pheno_frequency(
phenos = results,
pheno_frequency_threshold = pheno_frequency_threshold,
verbose = verbose)
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "pheno_frequency_threshold",
verbose = verbose)
#### Filter celltypes ####
### Fix celltypes
results[,celltype_fixed:=EWCE::fix_celltype_names(CellType,
make_unique = FALSE)]
if(!is.null(keep_celltypes)){
all_celltypes <- unique(results$CellType)
results <- results[CellType %in% keep_celltypes,]
valid_celltypes <- unique(results$CellType)
messager(formatC(length(valid_celltypes),big.mark = ","),"/",
formatC(length(all_celltypes)),
"of cell types kept.",v=verbose)
}
rep_dt <- report(dt = results,
rep_dt = rep_dt,
step = "keep_celltypes",
verbose = verbose)
symptom_gene_overlap
HPOExplorer::phenos_to_granges(
phenos = results,
phenotype_to_genes = phenotype_to_genes,
hpo = hpo,
gene_col = if(isTRUE(symptom_gene_overlap)) "intersection" else NULL,
keep_seqnames = NULL,
split.field = NULL,
as_datatable = TRUE,
verbose = verbose)
results
gene_col = if(isTRUE(symptom_gene_overlap)) "intersection" else NULL
keep_seqnames = NULL
split.field = NULL
as_datatable = TRUE
by = c("HPO_ID","DatabaseID")
#### Prepare gene data ####
phenotype_to_genes <- data.table::copy(phenotype_to_genes)
data.table::setnames(phenotype_to_genes,"LinkID","DatabaseID",
skip_absent = TRUE)
#### Prepare phenotypes data ####
if(is.character(phenos)){
phenos <- data.table::data.table(HPO_ID=names(phenos),
Phenotype=unname(phenos))
} else if(is.null(phenos)){
phenos <- unique(phenotype_to_genes[,c("HPO_ID","Phenotype")])
}
phenos = results
#### Prepare phenotypes data ####
if(is.character(phenos)){
phenos <- data.table::data.table(HPO_ID=names(phenos),
Phenotype=unname(phenos))
} else if(is.null(phenos)){
phenos <- unique(phenotype_to_genes[,c("HPO_ID","Phenotype")])
}
#### Unlist intersection column ####
## Genes driving celltype-symptom enrichment.
if(!is.null(gene_col) &&
gene_col %in% names(phenos)){
phenos <- unlist_col(dt=phenos,
col=gene_col)
data.table::setnames(phenos,"intersection","Gene")
by <- c(by,"Gene")
}
function(dt,
col){
dt[rep(dt[,.I],lengths(get(col)))
][, eval(col) := unlist(dt[[col]])][]
}
#### Unlist intersection column ####
## Genes driving celltype-symptom enrichment.
if(!is.null(gene_col) &&
gene_col %in% names(phenos)){
phenos <- unlist_col(dt=phenos,
col=gene_col)
data.table::setnames(phenos,"intersection","Gene")
by <- c(by,"Gene")
}
devoptera::source_all("../HPOExplorer/R/")
#### Unlist intersection column ####
## Genes driving celltype-symptom enrichment.
if(!is.null(gene_col) &&
gene_col %in% names(phenos)){
phenos <- unlist_col(dt=phenos,
col=gene_col)
data.table::setnames(phenos,"intersection","Gene")
by <- c(by,"Gene")
}
phenos
#### Ensure necessary columns are in phenos ####
phenos <- add_hpo_id(phenos = phenos,
phenotype_to_genes = phenotype_to_genes,
hpo = hpo,
verbose = verbose)
phenos <- add_disease(phenos = phenos,
allow.cartesian = allow.cartesion,
verbose = verbose)
by <- by[by %in% names(phenos)]
by
annot <- unique(
phenotype_to_genes[,unique(c(by,"Gene","EntrezID")), with=FALSE]
)
data.table::merge.data.table(phenos,
annot,
by = by,
allow.cartesion = allow.cartesion)
phenos
#### Get gene lengths #####
gr <- get_gene_lengths(gene_list = phenos$Gene,
keep_seqnames = keep_seqnames,
verbose = verbose)
gr
phenos$Gene
keep_seqnames
library(MultiEWCE)
res <- prioritise_targets()
library(MultiEWCE)
res <- prioritise_targets()
vn <- prioritise_targets_network(top_targets = res$top_targets)
library(MultiEWCE)
res <- prioritise_targets()
vn <- prioritise_targets_network(top_targets = res$top_targets)
results = load_example_results()
results[,list(phenotyps=length(unique(HPO_ID))), by="Gene"]
results2=HPOExplorer:::unlist_col(results, col = "intersection")
results2[,list(phenotyps=length(unique(HPO_ID))), by="Gene"]
results2[,list(phenotyps=length(unique(HPO_ID))), by="intersection"]
summary(results2[,list(phenotyps=length(unique(HPO_ID))), by="intersection"])
phenotype_to_genes =
HPOExplorer::load_phenotype_to_genes()
phenotype_to_genes[,unlist(phenotypes=length(unique(HPO_ID))),by="Gene"]
phenotype_to_genes[,list(phenotypes=length(unique(HPO_ID))),by="Gene"]
summary(phenotype_to_genes[,list(phenotypes=length(unique(HPO_ID))),by="Gene"]$phenotypes)
hist(phenotype_to_genes[,list(phenotypes=length(unique(HPO_ID))),by="Gene"]$phenotypes)
hist(phenotype_to_genes[,list(n=length(unique(Gene))),by="HPO_ID"]$n)
summary(phenotype_to_genes[,list(n=length(unique(Gene))),by="HPO_ID"]$n)
library(MultiEWCE)
library(MultiEWCE)
results = load_example_results()
ctd = load_example_ctd()
ctd[[1]]
ctd[[1]]$mean_exp
ctd[[2]]$mean_exp
map = data.table::fread("https://raw.githubusercontent.com/neurogenomics/rare_disease_celltyping/master/data/DescartesHuman_celltype_mapping.csv")
map
celltype_col="CellType"
results[[celltype_col]]
map
data.table::setkeyv(map,"level1")
map[,tissues=list(unique(tissue)), by="level1"]
map[,list(tissues=unique(tissue))), by="level1"]
map[,list(tissues=unique(tissue)), by="level1"]
map[,list(tissues=as.list(unique(tissue))), by="level1"]
map[,list(tissues=list(unique(tissue))), by="level1"]
map_agg <- map[,list(tissues=list(unique(tissue))), keyby="level1"]
map_agg[results[[celltype_col]]]
map_agg[results[[celltype_col]],]
results$tissues <- map_agg[results[[celltype_col]],]$tissues
map = data.table::fread(
paste0(
"https://raw.githubusercontent.com/",
"neurogenomics/rare_disease_celltyping/master/data/",
"DescartesHuman_celltype_mapping.csv"
)
)[,CellType:=level1]
map_agg <- map[,list(tissues=list(unique(tissue))),
keyby="level1"]
results$tissues <- map_agg[results[[celltype_col]],]$tissues
map_agg <- map[,list(tissues=list(unique(tissue))),
keyby="CellType"]
results$tissues <- map_agg[results[[celltype_col]],]$tissues
devtools::document()
devtools::document()
library(MultiEWCE)
map_agg[celltypes,]$tissues
source("~/Desktop/ewce/MultiEWCE/R/add_tissues.R", echo=TRUE)
results <- load_example_results()
tissues <- map_tissues()
tissues
map = data.table::fread(
paste0(
"https://raw.githubusercontent.com/",
"neurogenomics/rare_disease_celltyping/master/data/",
"DescartesHuman_celltype_mapping.csv"
)
)[,CellType:=level1]
results <- load_example_results()
tissues <- map_tissues(celltypes = results$CellType)
tissues
tissues <- map_agg[celltypes,]$tissues
map_agg <- map[,list(tissues=list(unique(tissue))),
keyby="CellType"]
tissues <- map_agg[celltypes,]$tissues
map_agg[celltypes,]
map_agg
celltypes
celltypes = results$CellType
tissues <- map_agg[celltypes,]$tissues
tissues
sapply(tissues,paste, collapse=";")
tissues <- sapply(tissues,paste, collapse=";")
tissues
devtools::document()
devtools::document()
library(MultiEWCE)
results <- load_example_results()
tissues <- map_tissues(celltypes = results$CellType)
tissues
source("~/Desktop/ewce/MultiEWCE/R/add_tissues.R", echo=TRUE)
library(MultiEWCE)
map
map = data.table::fread(
paste0(
"https://raw.githubusercontent.com/",
"neurogenomics/rare_disease_celltyping/master/data/",
"DescartesHuman_celltype_mapping.csv"
)
)[,CellType:=level1]
map
map
View(map)
map[,list(n=length(unique(map$level1))),by="tissue"]
CTD=MultiEWCE::load_example_ctd("CTD_Descartes.rds")
CTD=MultiEWCE::load_example_ctd("CTD_DescartesHuman.rds")
CTD=MultiEWCE::load_example_ctd("ctd_DescartesHuman.rds")
CTD=MultiEWCE::load_example_ctd("ctd_DescartesHuman.rds")
CTD=MultiEWCE:::get_data("ctd_DescartesHuman.rds")
CTD
meta=readRDS(url("https://atlas.fredhutch.org/data/bbi/descartes/human_gtex/downloads/data_summarize_fetus_data/df_cell.RDS"))
meta
meta$Organ
str(meta)
unique(meta$Organ)
map <- meta[,c("Organ","Organ_cell_lineage")]
map <- unique(meta[,c("Organ","Organ_cell_lineage")])
map
str(meta)
stringr::str_split(map$Organ_cell_lineage,"-",n = 2,simplify = TRUE)
names(stringr::str_split(map$Organ_cell_lineage,"-",n = 2,simplify = TRUE))
data.table::data.table(
stringr::str_split(map$Organ_cell_lineage,"-",n = 2,simplify = TRUE) |>
`colnames<-`(c("tissue","celltype")),
)
data.table::data.table(
stringr::str_split(map$Organ_cell_lineage,"-",n = 2,simplify = TRUE) |>
`colnames<-`(c("tissue","celltype"))
)
map <- data.table::data.table(
stringr::str_split(unique(meta$Organ_cell_lineage),"-",n = 2,simplify = TRUE) |>
`colnames<-`(c("tissue","celltype"))
)
map
map
map[,length(unique(celltype)), keyby="tissue"]
map[,n=length(unique(celltype)), keyby="tissue"]
map[,list(n=length(unique(celltype))), keyby="tissue"]
map[,list(n=length(unique(celltype))), by="tissue"]
map
data.table::fwrite(map,"~/Desktop/ewce/rare_disease_celltyping/data/DescartesHuman_celltype_mapping.csv")
f <- "~/Desktop/ewce/rare_disease_celltyping/data/DescartesHuman_celltype_mapping.csv"
piggyback::pb_upload(file = f, repo = "neurogenomics/MultiEWCE")
devtools::document()
devtools::document()
library(MultiEWCE)
map = get_data("DescartesHuman_celltype_mapping.csv")
devtools::document()
source("~/Desktop/ewce/MultiEWCE/R/get_data.R", echo=TRUE)
map <- get_data("DescartesHuman_celltype_mapping.csv")
map
tissues <- map_agg[celltypes,]$tissues
#### Count celltypes per tissue ####
# map[,list(n=length(unique(celltype))), keyby="tissue"]
map_agg <- map[,list(tissues=list(unique(tissue))), keyby="celltype"]
map_agg
map[,celltype:=EWCE::fix_celltype_names(celltype,make_unique = FALSE)]
map
devtools::document()
library(MultiEWCE)
results <- load_example_results()
tissues <- map_tissues(celltypes = results$CellType)
tissues
library(MultiEWCE)
map <- get_data("DescartesHuman_celltype_mapping.csv")
source("~/Desktop/ewce/MultiEWCE/R/get_data.R", echo=TRUE)
map <- get_data("DescartesHuman_celltype_mapping.csv")
map
View(map)
ref
devtools::document()
library(MultiEWCE)
source("~/Desktop/ewce/MultiEWCE/R/add_ctd_data.R", echo=TRUE)
source("~/Desktop/ewce/MultiEWCE/R/add_ctd_data.R", echo=TRUE)
devoptera::args2vars(add_ctd)
res <- load_example_results("Descartes_All_Results_extras.rds")
#### Identify genes within CTD ####
shared_genes <- intersect(results$Gene,
rownames(ctd[[annotLevel]]$specificity))
#### Merge genes with phenotype/celltype results ####
results <- results[Gene %in% shared_genes,]
res
devtools::document()
library(MultiEWCE)
library(MultiEWCE)
d=data.table::fread("~/Downloads/annot_HPO_gpt_test.csv")
d
