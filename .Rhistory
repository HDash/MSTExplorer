results_full <- data.table::copy(results)
}
results_full
} else {
dat
}
target_tests <- test_target_celltypes(results=results,
tests="across_branches_per_celltype",
target_celltypes = target_celltypes,
q_threshold = q_threshold)
target_tests
data_summary <- dat[,list(
target_celltypes=paste(target_branches[[ancestor_name]],collapse = "/"),
phenotypes_per_ancestor=unique(phenotypes_per_ancestor),
n_celltypes=data.table::uniqueN(cl_name[term=="is_targetTRUE"]),
n_celltypes_sig=data.table::uniqueN(cl_name[term=="is_targetTRUE" &
p.value.adj<0.05])
),
by=c("ancestor_name")]
dat <- merge(dat,
target_tests[[1]],
all.x = TRUE,
by=c("ancestor_name","cl_id"))
dat <- merge(dat,
target_tests[[1]][term=="is_targetTRUE"],
all.x = TRUE,
by=c("ancestor_name","cl_id"))
dat[p.value.adj.signif=="ns",p.value.adj.signif:=NA]
data_summary <- dat[,list(
target_celltypes=paste(target_branches[[ancestor_name]],collapse = "/"),
phenotypes_per_ancestor=unique(phenotypes_per_ancestor),
n_celltypes=data.table::uniqueN(cl_name),
n_celltypes_sig=data.table::uniqueN(cl_name[p.value.adj<0.05])
),
by=c("ancestor_name")]
data_summary
target_branches
target_celltypes
Reduce(all.equal,target_celltypes)
target_celltypes
lapply(target_celltypes,lengt)
lapply(target_celltypes,length)
Reduce(function(x,y)length(setdiff(x,y))==0,length)
Reduce(function(x,y)length(setdiff(x,y))==0,target_celltypes)
Reduce(function(x,y)length(setdiff(x,y)),target_celltypes)
Map(function(x,y)length(setdiff(x,y)),target_celltypes)
do.call(function(x,y)length(setdiff(x,y)),target_celltypes)
length(dat$ancestor_name_original)
length(unique(dat$ancestor_name_original))
target_branches
target_branches2 <- lapply(stats::setNames(new_ancestors,
new_ancestors),
function(b){
target_branches[
unique(dat[ancestor_name==b,]$ancestor_name_original)
]|>unlist(use.names = FALSE) |> unique()
})
target_branches2
target_branches <- lapply(stats::setNames(new_ancestors,
new_ancestors),
function(b){
target_branches[
unique(dat[ancestor_name==b,]$ancestor_name_original)
]|>unlist(use.names = FALSE) |> unique()
})
data_summary <- dat[,list(
target_celltypes=paste(target_branches[[ancestor_name]],collapse = "/"),
phenotypes_per_ancestor=unique(phenotypes_per_ancestor),
n_celltypes=data.table::uniqueN(cl_name),
n_celltypes_sig=data.table::uniqueN(cl_name[p.value.adj<0.05])
),
by=c("ancestor_name")]
data_summary
#### Filter data ####
if(!is.null(q_threshold)){
dat <- dat[q<q_threshold]
}
#### Make facets ordered ####
dat[[facets]] <- factor(dat[[facets]],
# set facet var in the order of the fill var to avoid reordering
levels = rev(unique(names(target_celltypes))),
# levels=unique(dat[order(match(get(facets),get(fill_var))),][[facets]]),
ordered = TRUE)
if(!is.null(normalise_by) && normalise_by %in% names(dat)){
dat[,sig_phenotypes:=scales::rescale_max(sig_phenotypes),
by=normalise_by]
}
#### Create color map ####
if(is.null(color_map)){
color_map <- KGExplorer::map_colors(dat,
columns = fill_var,
preferred_palettes = preferred_palettes,
as="dict")[[1]]
}
#### Bar plot ####
ggbars <- ggplot2::ggplot(dat,
ggplot2::aes(x=!!ggplot2::sym(celltype_col),
y=sig_phenotypes,
fill=!!ggplot2::sym(fill_var)
)
) +
ggplot2::geom_bar(stat="identity") +
ggplot2::labs(x=NULL,
y=y_lab) +
ggplot2::theme_bw() +
ggplot2::theme(
legend.position = legend.position,
strip.background = ggplot2::element_rect(fill = "transparent"),
panel.grid.minor = ggplot2::element_blank(),
axis.text.x = ggplot2::element_text(angle = 90,
hjust = 1,
vjust = 0.5)
)
#### Add facets ####
if(!is.null(cols)){
ggbars <- ggbars +
ggplot2::facet_grid(facets = paste(facets,"~",cols),
scales = scales,
labeller = construct_labeller(dat=dat,
facets=facets,
facets_n=facets_n,
suffix=suffix))
} else {
ggbars <- ggbars +
ggplot2::facet_wrap(facets =facets,
as.table = FALSE,
scales = scales,
labeller = construct_labeller(dat=dat,
facets=facets,
facets_n=facets_n,
suffix=suffix),
ncol = ncol)
}
ggbars
if(!is.null(vlines)){
ggbars <- ggbars +
ggplot2::geom_vline(xintercept = vlines,
color="grey",alpha=1, linetype="dashed")
}
if(!is.null(color_map)){
ggbars <- ggbars +
ggplot2::scale_fill_manual(values=color_map)
}
if(!is.null(color_vector)){
ggbars <- suppressWarnings(
ggbars + ggplot2::theme(
axis.text.x = ggplot2::element_text(angle = 90, hjust = 1, vjust=0.5,
color = unname(color_vector))
)
)
}
#### Add test results to bar plot ####
if(isTRUE(add_test_target_celltypes)){
ggbars <- ggbars +
ggplot2::geom_text(ggplot2::aes(label=p.adj.signif,
y=1.05*sig_phenotypes),
# nudge_y=3,
size=2,
color="black",
alpha=.8,
na.rm = TRUE) +
ggplot2::scale_y_continuous(expand = ggplot2::expansion(mult = c(0, .2)))
}
#### Save plot ####
if(!is.null(save_path)){
KGExplorer::plot_save(plt = ggbars,
save_path = save_path,
height = height,
width = width)
}
ggbars
ggbars <- ggbars +
ggplot2::geom_text(ggplot2::aes(label=p.value.adj.signif,
y=1.05*sig_phenotypes),
# nudge_y=3,
size=2,
color="black",
alpha=.8,
na.rm = TRUE) +
ggplot2::scale_y_continuous(expand = ggplot2::expansion(mult = c(0, .2)))
ggbars
#### Bar plot ####
ggbars <- ggplot2::ggplot(dat,
ggplot2::aes(x=!!ggplot2::sym(celltype_col),
y=sig_phenotypes,
fill=!!ggplot2::sym(fill_var)
)
) +
ggplot2::geom_bar(stat="identity") +
ggplot2::labs(x=NULL,
y=y_lab) +
ggplot2::theme_bw() +
ggplot2::theme(
legend.position = legend.position,
strip.background = ggplot2::element_rect(fill = "transparent"),
panel.grid.minor = ggplot2::element_blank(),
axis.text.x = ggplot2::element_text(angle = 90,
hjust = 1,
vjust = 0.5)
)
#### Add facets ####
if(!is.null(cols)){
ggbars <- ggbars +
ggplot2::facet_grid(facets = paste(facets,"~",cols),
scales = scales,
labeller = construct_labeller(dat=dat,
facets=facets,
facets_n=facets_n,
suffix=suffix))
} else {
ggbars <- ggbars +
ggplot2::facet_wrap(facets =facets,
as.table = FALSE,
scales = scales,
labeller = construct_labeller(dat=dat,
facets=facets,
facets_n=facets_n,
suffix=suffix),
ncol = ncol)
}
if(!is.null(vlines)){
ggbars <- ggbars +
ggplot2::geom_vline(xintercept = vlines,
color="grey",alpha=1, linetype="dashed")
}
if(!is.null(color_map)){
ggbars <- ggbars +
ggplot2::scale_fill_manual(values=color_map)
}
if(!is.null(color_vector)){
ggbars <- suppressWarnings(
ggbars + ggplot2::theme(
axis.text.x = ggplot2::element_text(angle = 90, hjust = 1, vjust=0.5,
color = unname(color_vector))
)
)
}
#### Add test results to bar plot ####
if(isTRUE(add_test_target_celltypes)){
ggbars <- ggbars +
ggplot2::geom_text(ggplot2::aes(label=p.value.adj.signif,
y=1.05*sig_phenotypes),
# nudge_y=3,
size=2,
color="black",
alpha=.8,
na.rm = TRUE) +
ggplot2::scale_y_continuous(expand = ggplot2::expansion(mult = c(0, .2)))
}
ggbars
dat
dat[is.na(ancestor_name)]
facets
at[is.na(hpo_name)]
dat[is.na(hpo_name)]
dat[is.na(hpo_name)]$hpo_id
unique(dat[is.na(hpo_name)]$hpo_id)
HPOExplorer::map_phenotypes(unique(dat[is.na(hpo_name)]$hpo_id), to = "name", hpo = hpo)
facets
rev(unique(names(target_celltypes)))
devtools::check_man()
hpo <- HPOExplorer::get_hpo()
target_branches <- list("Recurrent bacterial infections"="leukocyte")
lvl <- subset(hpo@elementMetadata,name==names(target_branches)[1])$ontLvl
results <- load_example_results()
results <- HPOExplorer::add_ancestor(results,
lvl = lvl,
force_new = TRUE)
out <- plot_bar_dendro_facets(results=results,
target_branches=target_branches,
facets = "hpo_name",
legend.position="right",
lvl=lvl+1,
ncol=2,
vlines="hepatoblast",
facets_n=NULL,
q_threshold=0.05,
background_full=FALSE)
out
library(MSTExplorer)
library(MSTExplorer)
library(MSTExplorer)
library(MSTExplorer)
hpo <- HPOExplorer::get_hpo()
target_branches <- list("Recurrent bacterial infections"="leukocyte")
lvl <- subset(hpo@elementMetadata,name==names(target_branches)[1])$ontLvl
results <- load_example_results()
results <- HPOExplorer::add_ancestor(results,
lvl = lvl,
force_new = TRUE)
out <- plot_bar_dendro_facets(results=results,
target_branches=target_branches,
facets = "hpo_name",
legend.position="right",
lvl=lvl+1,
ncol=2,
vlines="hepatoblast",
facets_n=NULL,
q_threshold=0.05,
background_full=FALSE)
out
out$data
out$plot
out$plot+ggplot2::scale_fill_discrete(drop=T)
out$plot+ggplot2::scale_x_discrete(drop=T)
out$plot+ggplot2::scale_x_discrete(drop=T)
out$plot$data
out$plot$data[grepl("^GABA",out$plot$data$cl_name)]
out <- plot_bar_dendro_facets(results=results,
target_branches=target_branches,
facets = "hpo_name",
legend.position="right",
lvl=lvl+1,
ncol=2,
vlines="hepatoblast",
facets_n=NULL,
q_threshold=0.05,
background_full=T)
ggplot2::geom_label
?ggplot2::geom_label
devtools::check_man()
library(MSTExplorer)
ttdi <- KGExplorer::get_ttd()
KGExplorer::get_version(ttdi)
library(MSTExplorer)
library(MSTExplorer)
devoptera::args2vars()
devoptera::args2vars(reassign = F)
devoptera::args2vars(reassign = F)
target_celltypes
b=names(target_celltypes)[1]
b
messager("Running tests: ",b, parallel = TRUE)
d <- data.table::copy(results)
d[,is_sig:=q<0.05]
## Define on-target cell types for branch
d[,is_target:=(get(celltype_col) %in% target_celltypes[[b]]) &
(ancestor_name==b)]
### Ensure there's enough variation to run tests
d[,valid:=(length(unique(is_target))>1) & (length(unique(is_sig))>1),
by=c(celltype_col)]
{
results <- results[,total_phenotypes:=data.table::uniqueN(hpo_id)]
results <- HPOExplorer::add_hpo_name(results,
hpo = hpo)
results <- HPOExplorer::add_ancestor(results,
hpo = hpo)
results <- map_celltype(results)
results[, sig_phenotypes:=data.table::uniqueN(hpo_id[q<q_threshold],
na.rm = TRUE),
by=c(celltype_col,"cl_id","ancestor","ancestor_name")]
results[, phenotypes_per_ancestor:=data.table::uniqueN(hpo_id),
by=c("ancestor","ancestor_name")]
results_full <- data.table::copy(results)
results <- KGExplorer::filter_dt(results,
filters = list(ancestor_name=keep_ancestors))
target_celltypes <- get_target_celltypes(target_branches=target_branches)
}
d <- data.table::copy(results)
d[,is_sig:=q<0.05]
## Define on-target cell types for branch
d[,is_target:=(get(celltype_col) %in% target_celltypes[[b]]) &
(ancestor_name==b)]
### Ensure there's enough variation to run tests
d[,valid:=(length(unique(is_target))>1) & (length(unique(is_sig))>1),
by=c(celltype_col)]
d <- d[valid==TRUE]
if(nrow(d)==0){
messager("Skipping tests.")
return(NULL)
}
d[,is_sig:=q<0.05][,is_target:=get(celltype_col) %in%
target_celltypes[b][[ancestor_name]], by=.I]
b
d
results
celltype_col
target_celltypes
celltype_col="cl_id"
## Define on-target cell types for branch
d[,is_target:=(get(celltype_col) %in% target_celltypes[[b]]) &
(ancestor_name==b)]
d
d <- data.table::copy(results)
d[,is_sig:=q<0.05]
## Define on-target cell types for branch
d[,is_target:=(get(celltype_col) %in% target_celltypes[[b]]) &
(ancestor_name==b)]
### Ensure there's enough variation to run tests
d[,valid:=(length(unique(is_target))>1) & (length(unique(is_sig))>1),
by=c(celltype_col)]
d <- d[valid==TRUE]
if(nrow(d)==0){
messager("Skipping tests.")
return(NULL)
}
d
d[,is_sig:=q<0.05][,is_target:=get(celltype_col) %in%
target_celltypes[b][[ancestor_name]], by=.I]
unique(d$cl_id)
unique(d[[celltype_col]])
lapply(unique(d[[celltype_col]]), function(x){
d2 <- d[get(celltype_col)==x]|>
stats::lm(formula=  is_sig ~ is_target + hpo_id) |>
rstatix::tidy()
d2[[celltype_col]] <- x
# d2[d2$term=="is_sigTRUE",]
d2
})|>data.table::rbindlist(fill=TRUE)
d2 <- d|>
dplyr::group_by(cl_id)|>
rstatix::anova_test(formula = is_sig ~ is_target,
within=dplyr::all_of(within_var)
)
d2
unique(d[[celltype_col]])
x=unique(d[[celltype_col]])[1]
x
d[get(celltype_col)==x]
d[get(celltype_col)==x]|>
stats::lm(formula=  is_sig ~ is_target + hpo_id)
d[get(celltype_col)==x]|>
stats::lm(formula=  is_sig ~ is_target )
d2 <- d[get(celltype_col)==x]|>
stats::lm(formula= is_sig ~ is_target) |>
rstatix::tidy()
d2
d[get(celltype_col)==x]|>
stats::glm(formula= is_sig ~ is_target)
d[get(celltype_col)==x]|>
stats::glm(formula= is_sig ~ is_target, family="binomial")
d[get(celltype_col)==x]|>
stats::glm(formula= is_sig ~ is_target, family="binomial") |>
rstatix::tidy()
d[get(celltype_col)==x]|>
stats::glm(formula= is_sig ~ is_target + (1|get(within_var)),
family="binomial")
d[get(celltype_col)==x]|>
stats::glm(formula= is_sig ~ is_target + (hpo_id),
family="binomial")
lme4::lmer(data=d[get(celltype_col)==x],
formula= is_sig ~ is_target)
lme4::lmer(data=d[get(celltype_col)==x],
formula= is_sig ~ is_target + (1|hpo_id),
lapply(unique(d[[celltype_col]]), function(x){
d2 <- d[get(celltype_col)==x]|>
stats::glm(formula= is_sig ~ is_target,
family="binomial") |>
rstatix::tidy()
d2[[celltype_col]] <- x
d2
})|>data.table::rbindlist(fill=TRUE)
}
lme4::lmer(data=d[get(celltype_col)==x],
formula= is_sig ~ is_target + (1|hpo_id))
lme4::lmer(data=d[get(celltype_col)==x],
formula= is_sig ~ is_target + (hpo_id))
? lme4::lmer
lme4::lmer(data=d[get(celltype_col)==x],
formula= is_sig ~ is_target + (1|hpo_id),
control=lme4::lmerControl(check.nobs.vs.nlev = "ignore",
check.nobs.vs.rankZ = "ignore",
check.nobs.vs.nRE="ignore"))
lme4::lmer(data=d[get(celltype_col)==x],
formula= is_sig ~ is_target + (1|hpo_id),
control=lme4::lmerControl(check.nobs.vs.nlev = "ignore",
check.nobs.vs.rankZ = "ignore",
check.nobs.vs.nRE="ignore")) |>
rstatix::tidy()
lme4::lmer(data=d[get(celltype_col)==x],
formula= is_sig ~ is_target + (1|hpo_id),
control=lme4::lmerControl(check.nobs.vs.nlev = "ignore",
check.nobs.vs.rankZ = "ignore",
check.nobs.vs.nRE="ignore")) |>
summary()
lme4::lmer(data=d[get(celltype_col)==x],
formula= is_sig ~ is_target + (1|hpo_id),
control=lme4::lmerControl(check.nobs.vs.nlev = "ignore",
check.nobs.vs.rankZ = "ignore",
check.nobs.vs.nRE="ignore")) |>
summary()|>
rstatix::tidy()
lme4::lmer(data=d[get(celltype_col)==x],
formula= is_sig ~ is_target + (1|hpo_id),
control=lme4::lmerControl(check.nobs.vs.nlev = "ignore",
check.nobs.vs.rankZ = "ignore",
check.nobs.vs.nRE="ignore")) |>
summary()
lme4::lmer(data=d[get(celltype_col)==x],
formula= is_sig ~ is_target + (1|hpo_id),
control=lme4::lmerControl(check.nobs.vs.nlev = "ignore",
check.nobs.vs.rankZ = "ignore",
check.nobs.vs.nRE="ignore")) |>
summary() |>
broom.mixed::tidy() |>
}, mc.cores = cores) |>
lme4::lmer(data=d[get(celltype_col)==x],
formula= is_sig ~ is_target + (1|hpo_id),
control=lme4::lmerControl(check.nobs.vs.nlev = "ignore",
check.nobs.vs.rankZ = "ignore",
check.nobs.vs.nRE="ignore")) |>
summary() |>
broom.mixed::tidy()
lme4::lmer(data=d[get(celltype_col)==x],
formula= is_sig ~ is_target + (1|hpo_id),
control=lme4::lmerControl(check.nobs.vs.nlev = "ignore",
check.nobs.vs.rankZ = "ignore",
check.nobs.vs.nRE="ignore")) |>
summary() |>as.data.frame()
?stats::glm
devtools::check_man()
library(MSTExplorer)
